
ECE212Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005200  08005200  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005208  08005208  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08005210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000174  08005384  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005384  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000bc76  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000c666  00000000  00000000  0002be1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d06  00000000  00000000  00038480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c252e  00000000  00000000  0003ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008d0  00000000  00000000  000fd0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021147  00000000  00000000  000fd970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011eab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003200  00000000  00000000  0011eb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f88 	.word	0x08004f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08004f88 	.word	0x08004f88

080001d0 <TestAsmCall>:

// BX lr for return from subrountines to where pointed by LR (R14)

.text
TestAsmCall:
PUSH {lr}
 80001d0:	b500      	push	{lr}
/*--------------------------------------*/
ldr r4,=0xFFFFFFFF
 80001d2:	f04f 34ff 	mov.w	r4, #4294967295
PUSH {r4}
 80001d6:	b410      	push	{r4}
bl Welcomeprompt
 80001d8:	f000 f810 	bl	80001fc <Welcomeprompt>
POP {r4}
 80001dc:	bc10      	pop	{r4}
ldr r0,=0x20001000
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <TestAsmCall+0x28>)
PUSH {r4}
 80001e0:	b410      	push	{r4}
bl Sort
 80001e2:	f000 f85d 	bl	80002a0 <Sort>
POP {r4}
 80001e6:	bc10      	pop	{r4}
//POP {r5}
ldr r5,=0x20001000
 80001e8:	4d03      	ldr	r5, [pc, #12]	; (80001f8 <TestAsmCall+0x28>)
PUSH {r5}
 80001ea:	b420      	push	{r5}
PUSH {r4}
 80001ec:	b410      	push	{r4}
bl Display
 80001ee:	f000 f876 	bl	80002de <Display>
POP {r4}
 80001f2:	bc10      	pop	{r4}
POP {r5}
 80001f4:	bc20      	pop	{r5}
/*-----------------DO NOT MODIFY--------*/
POP {PC}
 80001f6:	bd00      	pop	{pc}
ldr r0,=0x20001000
 80001f8:	20001000 	.word	0x20001000

080001fc <Welcomeprompt>:
.extern getstring

.text
Welcomeprompt:
/*-----------------Students write their subroutine here--------------------*/
pop {r4}
 80001fc:	bc10      	pop	{r4}
push {lr}
 80001fe:	b500      	push	{lr}

08000200 <Maro>:
Maro:
.equ location, 0x20001000


WelcomeMsg:
bl cr
 8000200:	f000 fa3a 	bl	8000678 <cr>
ldr r0, =welcome_msg
 8000204:	4820      	ldr	r0, [pc, #128]	; (8000288 <Return+0x8>)
bl printf
 8000206:	f002 ff79 	bl	80030fc <iprintf>
bl cr
 800020a:	f000 fa35 	bl	8000678 <cr>

0800020e <InputSize>:


InputSize:
ldr r0, =size_prompt
 800020e:	481f      	ldr	r0, [pc, #124]	; (800028c <Return+0xc>)
bl printf
 8000210:	f002 ff74 	bl	80030fc <iprintf>
bl cr
 8000214:	f000 fa30 	bl	8000678 <cr>
bl getstring
 8000218:	f000 fa38 	bl	800068c <getstring>

cmp r0, #3
 800021c:	2803      	cmp	r0, #3
blt InvalidSize
 800021e:	db23      	blt.n	8000268 <InvalidSize>
cmp r0, #10
 8000220:	280a      	cmp	r0, #10
bgt InvalidSize
 8000222:	dc21      	bgt.n	8000268 <InvalidSize>

ldr r1, =location
 8000224:	491a      	ldr	r1, [pc, #104]	; (8000290 <Return+0x10>)
mov r4, r0
 8000226:	1c04      	adds	r4, r0, #0
sub r2, r4, #2
 8000228:	1ea2      	subs	r2, r4, #2

b InputEntries
 800022a:	e7ff      	b.n	800022c <InputEntries>

0800022c <InputEntries>:


InputEntries:
push {r1}
 800022c:	b402      	push	{r1}
push {r2}
 800022e:	b404      	push	{r2}

ldr r0, =entries_prompt
 8000230:	4818      	ldr	r0, [pc, #96]	; (8000294 <Return+0x14>)
bl printf
 8000232:	f002 ff63 	bl	80030fc <iprintf>
bl cr
 8000236:	f000 fa1f 	bl	8000678 <cr>
bl getstring
 800023a:	f000 fa27 	bl	800068c <getstring>

pop {r2}
 800023e:	bc04      	pop	{r2}
pop {r1}
 8000240:	bc02      	pop	{r1}

cmp r0, #0
 8000242:	2800      	cmp	r0, #0
blt InvalidEntry
 8000244:	db16      	blt.n	8000274 <InvalidEntry>

str r0, [r1]
 8000246:	6008      	str	r0, [r1, #0]
add r1, r1, #4
 8000248:	3104      	adds	r1, #4
cmp r2, #0
 800024a:	2a00      	cmp	r2, #0
sub r2, r2, #1
 800024c:	3a01      	subs	r2, #1
bge InputEntries
 800024e:	daed      	bge.n	800022c <InputEntries>

push {r1}
 8000250:	b402      	push	{r1}

ldr r0, =last_entries_prompt
 8000252:	4811      	ldr	r0, [pc, #68]	; (8000298 <Return+0x18>)
bl printf
 8000254:	f002 ff52 	bl	80030fc <iprintf>
bl cr
 8000258:	f000 fa0e 	bl	8000678 <cr>
bl getstring
 800025c:	f000 fa16 	bl	800068c <getstring>

pop {r1}
 8000260:	bc02      	pop	{r1}

str r0, [r1]
 8000262:	6008      	str	r0, [r1, #0]
add r1, r1, #4
 8000264:	3104      	adds	r1, #4

b Return
 8000266:	e00b      	b.n	8000280 <Return>

08000268 <InvalidSize>:


InvalidSize:
ldr r0, =error_msg
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <Return+0x1c>)
bl printf
 800026a:	f002 ff47 	bl	80030fc <iprintf>
bl cr
 800026e:	f000 fa03 	bl	8000678 <cr>
b InputSize
 8000272:	e7cc      	b.n	800020e <InputSize>

08000274 <InvalidEntry>:


InvalidEntry:
ldr r0, =error_msg
 8000274:	4809      	ldr	r0, [pc, #36]	; (800029c <Return+0x1c>)
bl printf
 8000276:	f002 ff41 	bl	80030fc <iprintf>
bl cr
 800027a:	f000 f9fd 	bl	8000678 <cr>
b InputEntries
 800027e:	e7d5      	b.n	800022c <InputEntries>

08000280 <Return>:


Return:
pop {r7}
 8000280:	bc80      	pop	{r7}
push {r4}
 8000282:	b410      	push	{r4}
bx r7
 8000284:	4738      	bx	r7
 8000286:	0000      	.short	0x0000
ldr r0, =welcome_msg
 8000288:	20000000 	.word	0x20000000
ldr r0, =size_prompt
 800028c:	2000001f 	.word	0x2000001f
ldr r1, =location
 8000290:	20001000 	.word	0x20001000
ldr r0, =entries_prompt
 8000294:	20000067 	.word	0x20000067
ldr r0, =last_entries_prompt
 8000298:	2000009b 	.word	0x2000009b
ldr r0, =error_msg
 800029c:	200000d6 	.word	0x200000d6

080002a0 <Sort>:
Sort:
/*-----------------Students write their subroutine here--------------------*/


Init:
pop {r4}
 80002a0:	bc10      	pop	{r4}
push {lr}
 80002a2:	b500      	push	{lr}
mov r1, r0
 80002a4:	1c01      	adds	r1, r0, #0
mov r2, #0
 80002a6:	2200      	movs	r2, #0
mov r6, #0
 80002a8:	2600      	movs	r6, #0
mov r7, r4
 80002aa:	1c27      	adds	r7, r4, #0
sub r7, r7, #1
 80002ac:	3f01      	subs	r7, #1

080002ae <Iterate>:


Iterate:
mov r3, #0
 80002ae:	2300      	movs	r3, #0
ldr r3, [r1]
 80002b0:	680b      	ldr	r3, [r1, #0]
ldr r5, [r1, #4]
 80002b2:	684d      	ldr	r5, [r1, #4]
cmp r3, r5
 80002b4:	42ab      	cmp	r3, r5
bgt Swap
 80002b6:	dc00      	bgt.n	80002ba <Swap>
b Inner
 80002b8:	e003      	b.n	80002c2 <Inner>

080002ba <Swap>:


Swap:
str r3, [r1, #4]
 80002ba:	604b      	str	r3, [r1, #4]
str r5, [r1]
 80002bc:	600d      	str	r5, [r1, #0]
mov r3, #0
 80002be:	2300      	movs	r3, #0
mov r5, #0
 80002c0:	2500      	movs	r5, #0

080002c2 <Inner>:


Inner:
add r1, r1, #4
 80002c2:	3104      	adds	r1, #4
add r2, r2, #1
 80002c4:	3201      	adds	r2, #1
sub r3, r7, r6
 80002c6:	1bbb      	subs	r3, r7, r6
cmp r2, r3
 80002c8:	429a      	cmp	r2, r3
blt Iterate
 80002ca:	dbf0      	blt.n	80002ae <Iterate>

080002cc <Outer>:


Outer:
mov r2, #0
 80002cc:	2200      	movs	r2, #0
mov r1, r0
 80002ce:	1c01      	adds	r1, r0, #0
add r6, r6, #1
 80002d0:	3601      	adds	r6, #1
cmp r6, r7
 80002d2:	42be      	cmp	r6, r7
blt Iterate
 80002d4:	dbeb      	blt.n	80002ae <Iterate>
b Return
 80002d6:	e7ff      	b.n	80002d8 <Return>

080002d8 <Return>:


Return:
pop {r7}
 80002d8:	bc80      	pop	{r7}
push {r4}
 80002da:	b410      	push	{r4}
bx r7
 80002dc:	4738      	bx	r7

080002de <Display>:
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <cr>:
void Test();
/*---------------------------------------*/

/*---------Added by Wing------------------*/
void cr()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
		printf( "\r\n");
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <cr+0x10>)
 800067e:	f002 fdc3 	bl	8003208 <puts>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08004fa0 	.word	0x08004fa0

0800068c <getstring>:
{
		printf( "0x\%X ", P1);
}
int number;
int getstring()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
			int r;
repeat:			r = scanf("%d", &number );
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <getstring+0x34>)
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <getstring+0x38>)
 8000696:	f002 fdbf 	bl	8003218 <iscanf>
 800069a:	6078      	str	r0, [r7, #4]
/*******************************************
 * clears the buffer if a wrong input is given
*********************************************/

		if (r==0)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d108      	bne.n	80006b4 <getstring+0x28>
		{	getchar();
 80006a2:	f002 fced 	bl	8003080 <getchar>
			printf("\r\n");
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <getstring+0x3c>)
 80006a8:	f002 fdae 	bl	8003208 <puts>
			printf("\r\nNot a number entered, please enter valid number \n");
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <getstring+0x40>)
 80006ae:	f002 fdab 	bl	8003208 <puts>
			goto repeat;
 80006b2:	e7ee      	b.n	8000692 <getstring+0x6>
		}


			return number;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <getstring+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000019c 	.word	0x2000019c
 80006c4:	08004fb0 	.word	0x08004fb0
 80006c8:	08004fa0 	.word	0x08004fa0
 80006cc:	08004fb4 	.word	0x08004fb4

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fb15 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f816 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f8c6 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 f894 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
/*---------Added by Wing-------------------*/
RetargetInit(&huart2);
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <main+0x30>)
 80006e6:	f000 f913 	bl	8000910 <RetargetInit>
printf("\r\nECE212 Lab3");
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <main+0x34>)
 80006ec:	f002 fd06 	bl	80030fc <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/*---------Added by Wing-------------------*/
TestAsmCall();
 80006f0:	f7ff fd6e 	bl	80001d0 <TestAsmCall>
HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f000 fb78 	bl	8000dec <HAL_Delay>
TestAsmCall();
 80006fc:	e7f8      	b.n	80006f0 <main+0x20>
 80006fe:	bf00      	nop
 8000700:	200001a0 	.word	0x200001a0
 8000704:	08004fe8 	.word	0x08004fe8

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ac      	sub	sp, #176	; 0xb0
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000712:	2244      	movs	r2, #68	; 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fce8 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2254      	movs	r2, #84	; 0x54
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fcda 	bl	80030ec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000738:	f000 fde4 	bl	8001304 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <SystemClock_Config+0x100>)
 800073e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000742:	4a31      	ldr	r2, [pc, #196]	; (8000808 <SystemClock_Config+0x100>)
 8000744:	f023 0318 	bic.w	r3, r3, #24
 8000748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800074c:	2314      	movs	r3, #20
 800074e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000760:	2360      	movs	r3, #96	; 0x60
 8000762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800076c:	2301      	movs	r3, #1
 800076e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800077e:	2307      	movs	r3, #7
 8000780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fe29 	bl	80013ec <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a0:	f000 f8ae 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2303      	movs	r3, #3
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fa34 	bl	8001c2c <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ca:	f000 f899 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fc2d 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80007e4:	f000 f88c 	bl	8000900 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ec:	f000 fda8 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007f6:	f000 f883 	bl	8000900 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007fa:	f001 fe11 	bl	8002420 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007fe:	bf00      	nop
 8000800:	37b0      	adds	r7, #176	; 0xb0
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	f001 fee8 	bl	8002624 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f851 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001a0 	.word	0x200001a0
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_GPIO_Init+0x8c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_GPIO_Init+0x8c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_GPIO_Init+0x8c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <MX_GPIO_Init+0x90>)
 80008d0:	f000 fd00 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008d4:	2308      	movs	r3, #8
 80008d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0x90>)
 80008ec:	f000 fb88 	bl	8001000 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <RetargetInit+0x28>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <RetargetInit+0x2c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6898      	ldr	r0, [r3, #8]
 8000924:	2300      	movs	r3, #0
 8000926:	2202      	movs	r2, #2
 8000928:	2100      	movs	r1, #0
 800092a:	f002 fc8d 	bl	8003248 <setvbuf>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000224 	.word	0x20000224
 800093c:	20000110 	.word	0x20000110

08000940 <_isatty>:

int _isatty(int fd) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db04      	blt.n	8000958 <_isatty+0x18>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b02      	cmp	r3, #2
 8000952:	dc01      	bgt.n	8000958 <_isatty+0x18>
    return 1;
 8000954:	2301      	movs	r3, #1
 8000956:	e005      	b.n	8000964 <_isatty+0x24>

  errno = EBADF;
 8000958:	f002 fb8c 	bl	8003074 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	2209      	movs	r2, #9
 8000960:	601a      	str	r2, [r3, #0]
  return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_write>:

int _write(int fd, char* ptr, int len) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d002      	beq.n	8000984 <_write+0x18>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d111      	bne.n	80009a8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <_write+0x54>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	b29a      	uxth	r2, r3
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	f001 fe95 	bl	80026c0 <HAL_UART_Transmit>
 8000996:	4603      	mov	r3, r0
 8000998:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d101      	bne.n	80009a4 <_write+0x38>
      return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	e008      	b.n	80009b6 <_write+0x4a>
    else
      return EIO;
 80009a4:	2305      	movs	r3, #5
 80009a6:	e006      	b.n	80009b6 <_write+0x4a>
  }
  errno = EBADF;
 80009a8:	f002 fb64 	bl	8003074 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2209      	movs	r2, #9
 80009b0:	601a      	str	r2, [r3, #0]
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000224 	.word	0x20000224

080009c4 <_close>:

int _close(int fd) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db04      	blt.n	80009dc <_close+0x18>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	dc01      	bgt.n	80009dc <_close+0x18>
    return 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	e006      	b.n	80009ea <_close+0x26>

  errno = EBADF;
 80009dc:	f002 fb4a 	bl	8003074 <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2209      	movs	r2, #9
 80009e4:	601a      	str	r2, [r3, #0]
  return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80009fe:	f002 fb39 	bl	8003074 <__errno>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2209      	movs	r2, #9
 8000a06:	601a      	str	r2, [r3, #0]
  return -1;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_read>:

int _read(int fd, char* ptr, int len) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d110      	bne.n	8000a48 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <_read+0x4c>)
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	2201      	movs	r2, #1
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	f001 fed9 	bl	80027e8 <HAL_UART_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <_read+0x30>
      return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e008      	b.n	8000a56 <_read+0x42>
    else
      return EIO;
 8000a44:	2305      	movs	r3, #5
 8000a46:	e006      	b.n	8000a56 <_read+0x42>
  }
  errno = EBADF;
 8000a48:	f002 fb14 	bl	8003074 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2209      	movs	r2, #9
 8000a50:	601a      	str	r2, [r3, #0]
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000224 	.word	0x20000224

08000a64 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db08      	blt.n	8000a86 <_fstat+0x22>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dc05      	bgt.n	8000a86 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a80:	605a      	str	r2, [r3, #4]
    return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e005      	b.n	8000a92 <_fstat+0x2e>
  }

  errno = EBADF;
 8000a86:	f002 faf5 	bl	8003074 <__errno>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	601a      	str	r2, [r3, #0]
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	; 0x60
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d13a      	bne.n	8000b7c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b36:	2304      	movs	r3, #4
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fa54 	bl	8001000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 fa42 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8e8 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f002 fa30 	bl	8003074 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20010000 	.word	0x20010000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000190 	.word	0x20000190
 8000c48:	20000240 	.word	0x20000240

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <SystemInit+0x5c>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <SystemInit+0x5c>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <SystemInit+0x60>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <SystemInit+0x60>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <SystemInit+0x60>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <SystemInit+0x60>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <SystemInit+0x60>)
 8000c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <SystemInit+0x60>)
 8000c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SystemInit+0x60>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <SystemInit+0x60>)
 8000c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SystemInit+0x60>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	40021000 	.word	0x40021000

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ffca 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cba:	e003      	b.n	8000cc4 <LoopCopyDataInit>

08000cbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cc2:	3104      	adds	r1, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ccc:	d3f6      	bcc.n	8000cbc <CopyDataInit>
	ldr	r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd0:	e002      	b.n	8000cd8 <LoopFillZerobss>

08000cd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cd4:	f842 3b04 	str.w	r3, [r2], #4

08000cd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <LoopForever+0x16>)
	cmp	r2, r3
 8000cda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cdc:	d3f9      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 f9e1 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fcf5 	bl	80006d0 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000cec:	08005210 	.word	0x08005210
	ldr	r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cf4:	20000174 	.word	0x20000174
	ldr	r2, =_sbss
 8000cf8:	20000174 	.word	0x20000174
	ldr	r3, = _ebss
 8000cfc:	2000023c 	.word	0x2000023c

08000d00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_IRQHandler>

08000d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f943 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f80e 	bl	8000d34 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d24:	f7ff feba 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d023      	beq.n	8000d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_InitTick+0x70>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f941 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d809      	bhi.n	8000d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f919 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x74>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000010c 	.word	0x2000010c
 8000da4:	20000104 	.word	0x20000104
 8000da8:	20000108 	.word	0x20000108

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000010c 	.word	0x2000010c
 8000dd0:	20000228 	.word	0x20000228

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000228 	.word	0x20000228

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000010c 	.word	0x2000010c

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5c 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb0 	bl	8000f54 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e148      	b.n	80012a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 813a 	beq.w	800129c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d00b      	beq.n	8001048 <HAL_GPIO_Init+0x48>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	2b11      	cmp	r3, #17
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0xea>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d123      	bne.n	8001132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	6939      	ldr	r1, [r7, #16]
 800112e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0203 	and.w	r2, r3, #3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8094 	beq.w	800129c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x2c0>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x2c0>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6613      	str	r3, [r2, #96]	; 0x60
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x2c0>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x2c4>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b6:	d00d      	beq.n	80011d4 <HAL_GPIO_Init+0x1d4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a43      	ldr	r2, [pc, #268]	; (80012c8 <HAL_GPIO_Init+0x2c8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0x1d0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_GPIO_Init+0x2cc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_GPIO_Init+0x1cc>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1d6>
 80011cc:	2307      	movs	r3, #7
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1d6>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1d6>
 80011d4:	2300      	movs	r3, #0
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2c4>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001218:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f aeaf 	bne.w	8001010 <HAL_GPIO_Init+0x10>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_PWREx_GetVoltageRange+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134e:	d130      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135c:	d038      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	e002      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d102      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f2      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d110      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e00f      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d007      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000104 	.word	0x20000104
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f000 bc11 	b.w	8001c22 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001400:	4ba0      	ldr	r3, [pc, #640]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140a:	4b9e      	ldr	r3, [pc, #632]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80e4 	beq.w	80015ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_RCC_OscConfig+0x4c>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b0c      	cmp	r3, #12
 800142c:	f040 808b 	bne.w	8001546 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b01      	cmp	r3, #1
 8001434:	f040 8087 	bne.w	8001546 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x64>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e3e8      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_RCC_OscConfig+0x7e>
 8001460:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001468:	e005      	b.n	8001476 <HAL_RCC_OscConfig+0x8a>
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001476:	4293      	cmp	r3, r2
 8001478:	d223      	bcs.n	80014c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fd7a 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e3c9      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4977      	ldr	r1, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	4972      	ldr	r1, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e025      	b.n	800150e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6f      	ldr	r2, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	496a      	ldr	r1, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	4965      	ldr	r1, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd3a 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e389      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150e:	f000 fc6f 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	495a      	ldr	r1, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x29c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x2a0>)
 800152c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x2a4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fbfe 	bl	8000d34 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d052      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	e36d      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d032      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155a:	f7ff fc3b 	bl	8000dd4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001562:	f7ff fc37 	bl	8000dd4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e356      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	493a      	ldr	r1, [pc, #232]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc08 	bl	8000dd4 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc04 	bl	8000dd4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e323      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1dc>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d073      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x21c>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d10e      	bne.n	8001620 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d063      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d15f      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e300      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x24c>
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0x288>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x270>
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x288>
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fbaa 	bl	8000dd4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e010      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
 8001684:	40021000 	.word	0x40021000
 8001688:	08005004 	.word	0x08005004
 800168c:	20000104 	.word	0x20000104
 8001690:	20000108 	.word	0x20000108
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fb9e 	bl	8000dd4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e2bd      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4baf      	ldr	r3, [pc, #700]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2a8>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb8e 	bl	8000dd4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fb8a 	bl	8000dd4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e2a9      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4ba5      	ldr	r3, [pc, #660]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d0>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x310>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b99      	ldr	r3, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e286      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b93      	ldr	r3, [pc, #588]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4990      	ldr	r1, [pc, #576]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a8b      	ldr	r2, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fb49 	bl	8000dd4 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fb45 	bl	8000dd4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e264      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	497c      	ldr	r1, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a79      	ldr	r2, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb25 	bl	8000dd4 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fb21 	bl	8000dd4 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e240      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03c      	beq.n	8001832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb00 	bl	8000dd4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fafc 	bl	8000dd4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e21b      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	e01b      	b.n	8001832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fae3 	bl	8000dd4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fadf 	bl	8000dd4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1fe      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a6 	beq.w	800198c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001884:	f7ff faa6 	bl	8000dd4 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff faa2 	bl	8000dd4 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1c1      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	e024      	b.n	800190e <HAL_RCC_OscConfig+0x522>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d110      	bne.n	80018ee <HAL_RCC_OscConfig+0x502>
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ec:	e00f      	b.n	800190e <HAL_RCC_OscConfig+0x522>
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa5d 	bl	8000dd4 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fa59 	bl	8000dd4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e176      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ed      	beq.n	800191e <HAL_RCC_OscConfig+0x532>
 8001942:	e01a      	b.n	800197a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa46 	bl	8000dd4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fa42 	bl	8000dd4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d906      	bls.n	800196c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e15f      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4baa      	ldr	r3, [pc, #680]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e8      	bne.n	800194c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4ba5      	ldr	r3, [pc, #660]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	4aa4      	ldr	r2, [pc, #656]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01c      	beq.n	80019da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a0:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a6:	4a9c      	ldr	r2, [pc, #624]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff fa10 	bl	8000dd4 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b8:	f7ff fa0c 	bl	8000dd4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e12b      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ca:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ef      	beq.n	80019b8 <HAL_RCC_OscConfig+0x5cc>
 80019d8:	e01b      	b.n	8001a12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019da:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 80019dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e0:	4a8d      	ldr	r2, [pc, #564]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f9f3 	bl	8000dd4 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f2:	f7ff f9ef 	bl	8000dd4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e10e      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ef      	bne.n	80019f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8102 	beq.w	8001c20 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 80c5 	bne.w	8001bb0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a26:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0203 	and.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d12c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	3b01      	subs	r3, #1
 8001a46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d123      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d11b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d113      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d109      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d067      	beq.n	8001b64 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d062      	beq.n	8001b60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0bb      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab6:	f7ff f98d 	bl	8000dd4 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f989 	bl	8000dd4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0a8      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <HAL_RCC_OscConfig+0x830>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0552      	lsls	r2, r2, #21
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0a:	0852      	lsrs	r2, r2, #1
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	0652      	lsls	r2, r2, #25
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b16:	06d2      	lsls	r2, r2, #27
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	493f      	ldr	r1, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b38:	f7ff f94c 	bl	8000dd4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f948 	bl	8000dd4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5e:	e05f      	b.n	8001c20 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e05e      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d157      	bne.n	8001c20 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b88:	f7ff f924 	bl	8000dd4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f920 	bl	8000dd4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e03f      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x7a4>
 8001bae:	e037      	b.n	8001c20 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d02d      	beq.n	8001c12 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bd4:	f023 0303 	bic.w	r3, r3, #3
 8001bd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001be0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f8f3 	bl	8000dd4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f8ef 	bl	8000dd4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e00e      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_RCC_OscConfig+0x82c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x806>
 8001c10:	e006      	b.n	8001c20 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_OscConfig+0x836>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0c8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4961      	ldr	r1, [pc, #388]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b0      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d04c      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c84:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e09e      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e092      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e086      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e07e      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 0203 	bic.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	493f      	ldr	r1, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce6:	f7ff f875 	bl	8000dd4 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7ff f871 	bl	8000dd4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e066      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 020c 	and.w	r2, r3, #12
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d1eb      	bne.n	8001cee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	492c      	ldr	r1, [pc, #176]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d210      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4924      	ldr	r1, [pc, #144]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e036      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4918      	ldr	r1, [pc, #96]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4910      	ldr	r1, [pc, #64]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da2:	f000 f825 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_ClockConfig+0x1b4>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490c      	ldr	r1, [pc, #48]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffb4 	bl	8000d34 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08005004 	.word	0x08005004
 8001de8:	20000104 	.word	0x20000104
 8001dec:	20000108 	.word	0x20000108

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d121      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11e      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e005      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e004      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d134      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d003      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0xac>
 8001e94:	e005      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9e:	617b      	str	r3, [r7, #20]
      break;
 8001ea0:	e002      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	617b      	str	r3, [r7, #20]
      break;
 8001ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	fb02 f203 	mul.w	r2, r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	0e5b      	lsrs	r3, r3, #25
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	0800501c 	.word	0x0800501c
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000104 	.word	0x20000104

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08005014 	.word	0x08005014

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f50:	f7ff ffda 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0adb      	lsrs	r3, r3, #11
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08005014 	.word	0x08005014

08001f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f9c8 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
 8001f96:	e014      	b.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f9b8 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc8:	d10b      	bne.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d919      	bls.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd4:	d902      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e013      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e010      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d902      	bls.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe8:	2303      	movs	r3, #3
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e00a      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d102      	bne.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e004      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b70      	cmp	r3, #112	; 0x70
 8001ffe:	d101      	bne.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002000:	2301      	movs	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4909      	ldr	r1, [pc, #36]	; (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002040:	2300      	movs	r3, #0
 8002042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002044:	2300      	movs	r3, #0
 8002046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002050:	2b00      	cmp	r3, #0
 8002052:	d031      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800205c:	d01a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800205e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002062:	d814      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800206c:	d10f      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800206e:	4bac      	ldr	r3, [pc, #688]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4aab      	ldr	r2, [pc, #684]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800207a:	e00c      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f9dc 	bl	8002440 <RCCEx_PLLSAI1_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208c:	e003      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
      break;
 8002092:	e000      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800209c:	4ba0      	ldr	r3, [pc, #640]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	499d      	ldr	r1, [pc, #628]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b2:	e001      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8099 	beq.w	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ca:	4b95      	ldr	r3, [pc, #596]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	4a8e      	ldr	r2, [pc, #568]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	; 0x58
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a88      	ldr	r2, [pc, #544]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002108:	f7fe fe64 	bl	8000dd4 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fe60 	bl	8000dd4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d902      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	74fb      	strb	r3, [r7, #19]
        break;
 8002122:	e005      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d155      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002136:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01e      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	429a      	cmp	r2, r3
 8002150:	d019      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217e:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d016      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fe20 	bl	8000dd4 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	e00b      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fe1c 	bl	8000dd4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d902      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	74fb      	strb	r3, [r7, #19]
            break;
 80021ae:	e006      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ec      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10b      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d2:	4953      	ldr	r1, [pc, #332]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021da:	e004      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
 80021e0:	e001      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7c7b      	ldrb	r3, [r7, #17]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a4b      	ldr	r2, [pc, #300]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002204:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4943      	ldr	r1, [pc, #268]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f023 020c 	bic.w	r2, r3, #12
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	493a      	ldr	r1, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	4932      	ldr	r1, [pc, #200]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	4929      	ldr	r1, [pc, #164]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	4921      	ldr	r1, [pc, #132]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4918      	ldr	r1, [pc, #96]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4910      	ldr	r1, [pc, #64]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d02c      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002310:	d10a      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a02      	ldr	r2, [pc, #8]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231c:	60d3      	str	r3, [r2, #12]
 800231e:	e015      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002330:	d10c      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f881 	bl	8002440 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d028      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	492d      	ldr	r1, [pc, #180]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002376:	d106      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a27      	ldr	r2, [pc, #156]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
 8002384:	e011      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238e:	d10c      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f852 	bl	8002440 <RCCEx_PLLSAI1_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01c      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	4915      	ldr	r1, [pc, #84]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2102      	movs	r1, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f82f 	bl	8002440 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4904      	ldr	r1, [pc, #16]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002412:	7cbb      	ldrb	r3, [r7, #18]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0203 	and.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d10d      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
       ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002472:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
       ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d047      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e044      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d018      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x86>
 8002494:	2b03      	cmp	r3, #3
 8002496:	d825      	bhi.n	80024e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0x62>
 800249c:	2b02      	cmp	r3, #2
 800249e:	d009      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0x74>
 80024a0:	e020      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e01a      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b4:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e013      	b.n	80024ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024e2:	e006      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e004      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024fa:	4b49      	ldr	r3, [pc, #292]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	430b      	orrs	r3, r1
 8002510:	4943      	ldr	r1, [pc, #268]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d17c      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800251c:	4b40      	ldr	r3, [pc, #256]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a3f      	ldr	r2, [pc, #252]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002528:	f7fe fc54 	bl	8000dd4 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252e:	e009      	b.n	8002544 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002530:	f7fe fc50 	bl	8000dd4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d902      	bls.n	8002544 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	73fb      	strb	r3, [r7, #15]
        break;
 8002542:	e005      	b.n	8002550 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ef      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d15f      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d110      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	06d2      	lsls	r2, r2, #27
 8002574:	430a      	orrs	r2, r1
 8002576:	492a      	ldr	r1, [pc, #168]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	610b      	str	r3, [r1, #16]
 800257c:	e027      	b.n	80025ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d112      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800258c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6892      	ldr	r2, [r2, #8]
 8002594:	0211      	lsls	r1, r2, #8
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6912      	ldr	r2, [r2, #16]
 800259a:	0852      	lsrs	r2, r2, #1
 800259c:	3a01      	subs	r2, #1
 800259e:	0552      	lsls	r2, r2, #21
 80025a0:	430a      	orrs	r2, r1
 80025a2:	491f      	ldr	r1, [pc, #124]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	610b      	str	r3, [r1, #16]
 80025a8:	e011      	b.n	80025ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	0211      	lsls	r1, r2, #8
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6952      	ldr	r2, [r2, #20]
 80025c0:	0852      	lsrs	r2, r2, #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	0652      	lsls	r2, r2, #25
 80025c6:	430a      	orrs	r2, r1
 80025c8:	4915      	ldr	r1, [pc, #84]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fbfb 	bl	8000dd4 <HAL_GetTick>
 80025de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e0:	e009      	b.n	80025f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e2:	f7fe fbf7 	bl	8000dd4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d902      	bls.n	80025f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	73fb      	strb	r3, [r7, #15]
          break;
 80025f4:	e005      	b.n	8002602 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ef      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e040      	b.n	80026b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fa4c 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f992 	bl	800298c <UART_SetConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e022      	b.n	80026b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fb92 	bl	8002da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fc19 	bl	8002ee8 <UART_CheckIdleState>
 80026b6:	4603      	mov	r3, r0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	f040 8082 	bne.w	80027de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_UART_Transmit+0x26>
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07a      	b.n	80027e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_UART_Transmit+0x38>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e073      	b.n	80027e0 <HAL_UART_Transmit+0x120>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2221      	movs	r2, #33	; 0x21
 800270c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270e:	f7fe fb61 	bl	8000dd4 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272c:	d108      	bne.n	8002740 <HAL_UART_Transmit+0x80>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e003      	b.n	8002748 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002750:	e02d      	b.n	80027ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fc0c 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e039      	b.n	80027e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277e:	b292      	uxth	r2, r2
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3302      	adds	r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e008      	b.n	800279c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b292      	uxth	r2, r2
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1cb      	bne.n	8002752 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2140      	movs	r1, #64	; 0x40
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fbd8 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e005      	b.n	80027e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	f040 80bf 	bne.w	8002980 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_UART_Receive+0x26>
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0b7      	b.n	8002982 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_UART_Receive+0x38>
 800281c:	2302      	movs	r3, #2
 800281e:	e0b0      	b.n	8002982 <HAL_UART_Receive+0x19a>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	; 0x22
 8002834:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800283c:	f7fe faca 	bl	8000dd4 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	d10e      	bne.n	800287a <HAL_UART_Receive+0x92>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_UART_Receive+0x88>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f240 12ff 	movw	r2, #511	; 0x1ff
 800286a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800286e:	e02d      	b.n	80028cc <HAL_UART_Receive+0xe4>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002878:	e028      	b.n	80028cc <HAL_UART_Receive+0xe4>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_UART_Receive+0xb6>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <HAL_UART_Receive+0xac>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002892:	e01b      	b.n	80028cc <HAL_UART_Receive+0xe4>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	227f      	movs	r2, #127	; 0x7f
 8002898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800289c:	e016      	b.n	80028cc <HAL_UART_Receive+0xe4>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a6:	d10d      	bne.n	80028c4 <HAL_UART_Receive+0xdc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <HAL_UART_Receive+0xd2>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	227f      	movs	r2, #127	; 0x7f
 80028b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028b8:	e008      	b.n	80028cc <HAL_UART_Receive+0xe4>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028c2:	e003      	b.n	80028cc <HAL_UART_Receive+0xe4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Receive+0x108>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002900:	e033      	b.n	800296a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2120      	movs	r1, #32
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb34 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e032      	b.n	8002982 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002928:	b29a      	uxth	r2, r3
 800292a:	8a7b      	ldrh	r3, [r7, #18]
 800292c:	4013      	ands	r3, r2
 800292e:	b29a      	uxth	r2, r3
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	3302      	adds	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	e00d      	b.n	8002958 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002942:	b29b      	uxth	r3, r3
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8a7b      	ldrh	r3, [r7, #18]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4013      	ands	r3, r2
 800294c:	b2da      	uxtb	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1c5      	bne.n	8002902 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4baf      	ldr	r3, [pc, #700]	; (8002c74 <UART_SetConfig+0x2e8>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	69f9      	ldr	r1, [r7, #28]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4aa4      	ldr	r2, [pc, #656]	; (8002c78 <UART_SetConfig+0x2ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a9b      	ldr	r2, [pc, #620]	; (8002c7c <UART_SetConfig+0x2f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d121      	bne.n	8002a56 <UART_SetConfig+0xca>
 8002a12:	4b9b      	ldr	r3, [pc, #620]	; (8002c80 <UART_SetConfig+0x2f4>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d817      	bhi.n	8002a50 <UART_SetConfig+0xc4>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <UART_SetConfig+0x9c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a45 	.word	0x08002a45
 8002a30:	08002a3f 	.word	0x08002a3f
 8002a34:	08002a4b 	.word	0x08002a4b
 8002a38:	2301      	movs	r3, #1
 8002a3a:	76fb      	strb	r3, [r7, #27]
 8002a3c:	e070      	b.n	8002b20 <UART_SetConfig+0x194>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	76fb      	strb	r3, [r7, #27]
 8002a42:	e06d      	b.n	8002b20 <UART_SetConfig+0x194>
 8002a44:	2304      	movs	r3, #4
 8002a46:	76fb      	strb	r3, [r7, #27]
 8002a48:	e06a      	b.n	8002b20 <UART_SetConfig+0x194>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	76fb      	strb	r3, [r7, #27]
 8002a4e:	e067      	b.n	8002b20 <UART_SetConfig+0x194>
 8002a50:	2310      	movs	r3, #16
 8002a52:	76fb      	strb	r3, [r7, #27]
 8002a54:	e064      	b.n	8002b20 <UART_SetConfig+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a8a      	ldr	r2, [pc, #552]	; (8002c84 <UART_SetConfig+0x2f8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d132      	bne.n	8002ac6 <UART_SetConfig+0x13a>
 8002a60:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <UART_SetConfig+0x2f4>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d828      	bhi.n	8002ac0 <UART_SetConfig+0x134>
 8002a6e:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <UART_SetConfig+0xe8>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002ac1 	.word	0x08002ac1
 8002a7c:	08002ac1 	.word	0x08002ac1
 8002a80:	08002ac1 	.word	0x08002ac1
 8002a84:	08002ab5 	.word	0x08002ab5
 8002a88:	08002ac1 	.word	0x08002ac1
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ac1 	.word	0x08002ac1
 8002a94:	08002aaf 	.word	0x08002aaf
 8002a98:	08002ac1 	.word	0x08002ac1
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002ac1 	.word	0x08002ac1
 8002aa4:	08002abb 	.word	0x08002abb
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	e038      	b.n	8002b20 <UART_SetConfig+0x194>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	76fb      	strb	r3, [r7, #27]
 8002ab2:	e035      	b.n	8002b20 <UART_SetConfig+0x194>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	76fb      	strb	r3, [r7, #27]
 8002ab8:	e032      	b.n	8002b20 <UART_SetConfig+0x194>
 8002aba:	2308      	movs	r3, #8
 8002abc:	76fb      	strb	r3, [r7, #27]
 8002abe:	e02f      	b.n	8002b20 <UART_SetConfig+0x194>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	76fb      	strb	r3, [r7, #27]
 8002ac4:	e02c      	b.n	8002b20 <UART_SetConfig+0x194>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6b      	ldr	r2, [pc, #428]	; (8002c78 <UART_SetConfig+0x2ec>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d125      	bne.n	8002b1c <UART_SetConfig+0x190>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	; (8002c80 <UART_SetConfig+0x2f4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ade:	d017      	beq.n	8002b10 <UART_SetConfig+0x184>
 8002ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ae4:	d817      	bhi.n	8002b16 <UART_SetConfig+0x18a>
 8002ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aea:	d00b      	beq.n	8002b04 <UART_SetConfig+0x178>
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af0:	d811      	bhi.n	8002b16 <UART_SetConfig+0x18a>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <UART_SetConfig+0x172>
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d006      	beq.n	8002b0a <UART_SetConfig+0x17e>
 8002afc:	e00b      	b.n	8002b16 <UART_SetConfig+0x18a>
 8002afe:	2300      	movs	r3, #0
 8002b00:	76fb      	strb	r3, [r7, #27]
 8002b02:	e00d      	b.n	8002b20 <UART_SetConfig+0x194>
 8002b04:	2302      	movs	r3, #2
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e00a      	b.n	8002b20 <UART_SetConfig+0x194>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e007      	b.n	8002b20 <UART_SetConfig+0x194>
 8002b10:	2308      	movs	r3, #8
 8002b12:	76fb      	strb	r3, [r7, #27]
 8002b14:	e004      	b.n	8002b20 <UART_SetConfig+0x194>
 8002b16:	2310      	movs	r3, #16
 8002b18:	76fb      	strb	r3, [r7, #27]
 8002b1a:	e001      	b.n	8002b20 <UART_SetConfig+0x194>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <UART_SetConfig+0x2ec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d173      	bne.n	8002c12 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b2a:	7efb      	ldrb	r3, [r7, #27]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d824      	bhi.n	8002b7a <UART_SetConfig+0x1ee>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <UART_SetConfig+0x1ac>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b5d 	.word	0x08002b5d
 8002b3c:	08002b7b 	.word	0x08002b7b
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002b7b 	.word	0x08002b7b
 8002b48:	08002b6b 	.word	0x08002b6b
 8002b4c:	08002b7b 	.word	0x08002b7b
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002b7b 	.word	0x08002b7b
 8002b58:	08002b73 	.word	0x08002b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b5c:	f7ff f9e0 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002b60:	6178      	str	r0, [r7, #20]
        break;
 8002b62:	e00f      	b.n	8002b84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b64:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <UART_SetConfig+0x2fc>)
 8002b66:	617b      	str	r3, [r7, #20]
        break;
 8002b68:	e00c      	b.n	8002b84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6a:	f7ff f941 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	6178      	str	r0, [r7, #20]
        break;
 8002b70:	e008      	b.n	8002b84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b76:	617b      	str	r3, [r7, #20]
        break;
 8002b78:	e004      	b.n	8002b84 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	76bb      	strb	r3, [r7, #26]
        break;
 8002b82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80fe 	beq.w	8002d88 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d305      	bcc.n	8002ba8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d902      	bls.n	8002bae <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	76bb      	strb	r3, [r7, #26]
 8002bac:	e0ec      	b.n	8002d88 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	020b      	lsls	r3, r1, #8
 8002bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002bc4:	0202      	lsls	r2, r0, #8
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	6849      	ldr	r1, [r1, #4]
 8002bca:	0849      	lsrs	r1, r1, #1
 8002bcc:	4608      	mov	r0, r1
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	1814      	adds	r4, r2, r0
 8002bd4:	eb43 0501 	adc.w	r5, r3, r1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fbcb 	bl	8000380 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4613      	mov	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bf8:	d308      	bcc.n	8002c0c <UART_SetConfig+0x280>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c00:	d204      	bcs.n	8002c0c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	e0bd      	b.n	8002d88 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	76bb      	strb	r3, [r7, #26]
 8002c10:	e0ba      	b.n	8002d88 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1a:	d168      	bne.n	8002cee <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8002c1c:	7efb      	ldrb	r3, [r7, #27]
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d834      	bhi.n	8002c8c <UART_SetConfig+0x300>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <UART_SetConfig+0x29c>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c4d 	.word	0x08002c4d
 8002c2c:	08002c55 	.word	0x08002c55
 8002c30:	08002c5d 	.word	0x08002c5d
 8002c34:	08002c8d 	.word	0x08002c8d
 8002c38:	08002c63 	.word	0x08002c63
 8002c3c:	08002c8d 	.word	0x08002c8d
 8002c40:	08002c8d 	.word	0x08002c8d
 8002c44:	08002c8d 	.word	0x08002c8d
 8002c48:	08002c6b 	.word	0x08002c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f7ff f968 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002c50:	6178      	str	r0, [r7, #20]
        break;
 8002c52:	e020      	b.n	8002c96 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c54:	f7ff f97a 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002c58:	6178      	str	r0, [r7, #20]
        break;
 8002c5a:	e01c      	b.n	8002c96 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <UART_SetConfig+0x2fc>)
 8002c5e:	617b      	str	r3, [r7, #20]
        break;
 8002c60:	e019      	b.n	8002c96 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c62:	f7ff f8c5 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002c66:	6178      	str	r0, [r7, #20]
        break;
 8002c68:	e015      	b.n	8002c96 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6e:	617b      	str	r3, [r7, #20]
        break;
 8002c70:	e011      	b.n	8002c96 <UART_SetConfig+0x30a>
 8002c72:	bf00      	nop
 8002c74:	efff69f3 	.word	0xefff69f3
 8002c78:	40008000 	.word	0x40008000
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40004400 	.word	0x40004400
 8002c88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	76bb      	strb	r3, [r7, #26]
        break;
 8002c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d075      	beq.n	8002d88 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005a      	lsls	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d916      	bls.n	8002ce8 <UART_SetConfig+0x35c>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d212      	bcs.n	8002ce8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f023 030f 	bic.w	r3, r3, #15
 8002cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	89fa      	ldrh	r2, [r7, #14]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	e04f      	b.n	8002d88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	76bb      	strb	r3, [r7, #26]
 8002cec:	e04c      	b.n	8002d88 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cee:	7efb      	ldrb	r3, [r7, #27]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d828      	bhi.n	8002d46 <UART_SetConfig+0x3ba>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <UART_SetConfig+0x370>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d21 	.word	0x08002d21
 8002d00:	08002d29 	.word	0x08002d29
 8002d04:	08002d31 	.word	0x08002d31
 8002d08:	08002d47 	.word	0x08002d47
 8002d0c:	08002d37 	.word	0x08002d37
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d47 	.word	0x08002d47
 8002d18:	08002d47 	.word	0x08002d47
 8002d1c:	08002d3f 	.word	0x08002d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7ff f8fe 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002d24:	6178      	str	r0, [r7, #20]
        break;
 8002d26:	e013      	b.n	8002d50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d28:	f7ff f910 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002d2c:	6178      	str	r0, [r7, #20]
        break;
 8002d2e:	e00f      	b.n	8002d50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <UART_SetConfig+0x414>)
 8002d32:	617b      	str	r3, [r7, #20]
        break;
 8002d34:	e00c      	b.n	8002d50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d36:	f7ff f85b 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002d3a:	6178      	str	r0, [r7, #20]
        break;
 8002d3c:	e008      	b.n	8002d50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d42:	617b      	str	r3, [r7, #20]
        break;
 8002d44:	e004      	b.n	8002d50 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	76bb      	strb	r3, [r7, #26]
        break;
 8002d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085a      	lsrs	r2, r3, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	d908      	bls.n	8002d84 <UART_SetConfig+0x3f8>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d204      	bcs.n	8002d84 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d94:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00f42400 	.word	0x00f42400

08002da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea2:	d10a      	bne.n	8002eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ef8:	f7fd ff6c 	bl	8000dd4 <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d10e      	bne.n	8002f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f82d 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e023      	b.n	8002f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d10e      	bne.n	8002f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f817 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e00d      	b.n	8002f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8a:	e05e      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d05a      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fd ff1e 	bl	8000dd4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11b      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e043      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02c      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d124      	bne.n	800304a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003008:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003018:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e00f      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d091      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <__errno>:
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <__errno+0x8>)
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000110 	.word	0x20000110

08003080 <getchar>:
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <getchar+0x20>)
 8003082:	b510      	push	{r4, lr}
 8003084:	681c      	ldr	r4, [r3, #0]
 8003086:	b124      	cbz	r4, 8003092 <getchar+0x12>
 8003088:	69a3      	ldr	r3, [r4, #24]
 800308a:	b913      	cbnz	r3, 8003092 <getchar+0x12>
 800308c:	4620      	mov	r0, r4
 800308e:	f000 fb8d 	bl	80037ac <__sinit>
 8003092:	6861      	ldr	r1, [r4, #4]
 8003094:	4620      	mov	r0, r4
 8003096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309a:	f000 bc41 	b.w	8003920 <_getc_r>
 800309e:	bf00      	nop
 80030a0:	20000110 	.word	0x20000110

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4d0d      	ldr	r5, [pc, #52]	; (80030dc <__libc_init_array+0x38>)
 80030a8:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030aa:	1b64      	subs	r4, r4, r5
 80030ac:	10a4      	asrs	r4, r4, #2
 80030ae:	2600      	movs	r6, #0
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	4d0b      	ldr	r5, [pc, #44]	; (80030e4 <__libc_init_array+0x40>)
 80030b6:	4c0c      	ldr	r4, [pc, #48]	; (80030e8 <__libc_init_array+0x44>)
 80030b8:	f001 ff66 	bl	8004f88 <_init>
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	2600      	movs	r6, #0
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08005208 	.word	0x08005208
 80030e0:	08005208 	.word	0x08005208
 80030e4:	08005208 	.word	0x08005208
 80030e8:	0800520c 	.word	0x0800520c

080030ec <memset>:
 80030ec:	4402      	add	r2, r0
 80030ee:	4603      	mov	r3, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <iprintf>:
 80030fc:	b40f      	push	{r0, r1, r2, r3}
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <iprintf+0x2c>)
 8003100:	b513      	push	{r0, r1, r4, lr}
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	b124      	cbz	r4, 8003110 <iprintf+0x14>
 8003106:	69a3      	ldr	r3, [r4, #24]
 8003108:	b913      	cbnz	r3, 8003110 <iprintf+0x14>
 800310a:	4620      	mov	r0, r4
 800310c:	f000 fb4e 	bl	80037ac <__sinit>
 8003110:	ab05      	add	r3, sp, #20
 8003112:	9a04      	ldr	r2, [sp, #16]
 8003114:	68a1      	ldr	r1, [r4, #8]
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	4620      	mov	r0, r4
 800311a:	f000 fd85 	bl	8003c28 <_vfiprintf_r>
 800311e:	b002      	add	sp, #8
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	b004      	add	sp, #16
 8003126:	4770      	bx	lr
 8003128:	20000110 	.word	0x20000110

0800312c <_puts_r>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	460e      	mov	r6, r1
 8003130:	4605      	mov	r5, r0
 8003132:	b118      	cbz	r0, 800313c <_puts_r+0x10>
 8003134:	6983      	ldr	r3, [r0, #24]
 8003136:	b90b      	cbnz	r3, 800313c <_puts_r+0x10>
 8003138:	f000 fb38 	bl	80037ac <__sinit>
 800313c:	69ab      	ldr	r3, [r5, #24]
 800313e:	68ac      	ldr	r4, [r5, #8]
 8003140:	b913      	cbnz	r3, 8003148 <_puts_r+0x1c>
 8003142:	4628      	mov	r0, r5
 8003144:	f000 fb32 	bl	80037ac <__sinit>
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <_puts_r+0xd0>)
 800314a:	429c      	cmp	r4, r3
 800314c:	d120      	bne.n	8003190 <_puts_r+0x64>
 800314e:	686c      	ldr	r4, [r5, #4]
 8003150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003152:	07db      	lsls	r3, r3, #31
 8003154:	d405      	bmi.n	8003162 <_puts_r+0x36>
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	0598      	lsls	r0, r3, #22
 800315a:	d402      	bmi.n	8003162 <_puts_r+0x36>
 800315c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315e:	f000 fc20 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	0719      	lsls	r1, r3, #28
 8003166:	d51d      	bpl.n	80031a4 <_puts_r+0x78>
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	b1db      	cbz	r3, 80031a4 <_puts_r+0x78>
 800316c:	3e01      	subs	r6, #1
 800316e:	68a3      	ldr	r3, [r4, #8]
 8003170:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003174:	3b01      	subs	r3, #1
 8003176:	60a3      	str	r3, [r4, #8]
 8003178:	bb39      	cbnz	r1, 80031ca <_puts_r+0x9e>
 800317a:	2b00      	cmp	r3, #0
 800317c:	da38      	bge.n	80031f0 <_puts_r+0xc4>
 800317e:	4622      	mov	r2, r4
 8003180:	210a      	movs	r1, #10
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f926 	bl	80033d4 <__swbuf_r>
 8003188:	3001      	adds	r0, #1
 800318a:	d011      	beq.n	80031b0 <_puts_r+0x84>
 800318c:	250a      	movs	r5, #10
 800318e:	e011      	b.n	80031b4 <_puts_r+0x88>
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <_puts_r+0xd4>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d101      	bne.n	800319a <_puts_r+0x6e>
 8003196:	68ac      	ldr	r4, [r5, #8]
 8003198:	e7da      	b.n	8003150 <_puts_r+0x24>
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <_puts_r+0xd8>)
 800319c:	429c      	cmp	r4, r3
 800319e:	bf08      	it	eq
 80031a0:	68ec      	ldreq	r4, [r5, #12]
 80031a2:	e7d5      	b.n	8003150 <_puts_r+0x24>
 80031a4:	4621      	mov	r1, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 f966 	bl	8003478 <__swsetup_r>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d0dd      	beq.n	800316c <_puts_r+0x40>
 80031b0:	f04f 35ff 	mov.w	r5, #4294967295
 80031b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031b6:	07da      	lsls	r2, r3, #31
 80031b8:	d405      	bmi.n	80031c6 <_puts_r+0x9a>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	059b      	lsls	r3, r3, #22
 80031be:	d402      	bmi.n	80031c6 <_puts_r+0x9a>
 80031c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031c2:	f000 fbef 	bl	80039a4 <__retarget_lock_release_recursive>
 80031c6:	4628      	mov	r0, r5
 80031c8:	bd70      	pop	{r4, r5, r6, pc}
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da04      	bge.n	80031d8 <_puts_r+0xac>
 80031ce:	69a2      	ldr	r2, [r4, #24]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	dc06      	bgt.n	80031e2 <_puts_r+0xb6>
 80031d4:	290a      	cmp	r1, #10
 80031d6:	d004      	beq.n	80031e2 <_puts_r+0xb6>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	6022      	str	r2, [r4, #0]
 80031de:	7019      	strb	r1, [r3, #0]
 80031e0:	e7c5      	b.n	800316e <_puts_r+0x42>
 80031e2:	4622      	mov	r2, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f8f5 	bl	80033d4 <__swbuf_r>
 80031ea:	3001      	adds	r0, #1
 80031ec:	d1bf      	bne.n	800316e <_puts_r+0x42>
 80031ee:	e7df      	b.n	80031b0 <_puts_r+0x84>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	250a      	movs	r5, #10
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	6022      	str	r2, [r4, #0]
 80031f8:	701d      	strb	r5, [r3, #0]
 80031fa:	e7db      	b.n	80031b4 <_puts_r+0x88>
 80031fc:	08005070 	.word	0x08005070
 8003200:	08005090 	.word	0x08005090
 8003204:	08005050 	.word	0x08005050

08003208 <puts>:
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <puts+0xc>)
 800320a:	4601      	mov	r1, r0
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	f7ff bf8d 	b.w	800312c <_puts_r>
 8003212:	bf00      	nop
 8003214:	20000110 	.word	0x20000110

08003218 <iscanf>:
 8003218:	b40f      	push	{r0, r1, r2, r3}
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <iscanf+0x2c>)
 800321c:	b513      	push	{r0, r1, r4, lr}
 800321e:	681c      	ldr	r4, [r3, #0]
 8003220:	b124      	cbz	r4, 800322c <iscanf+0x14>
 8003222:	69a3      	ldr	r3, [r4, #24]
 8003224:	b913      	cbnz	r3, 800322c <iscanf+0x14>
 8003226:	4620      	mov	r0, r4
 8003228:	f000 fac0 	bl	80037ac <__sinit>
 800322c:	ab05      	add	r3, sp, #20
 800322e:	9a04      	ldr	r2, [sp, #16]
 8003230:	6861      	ldr	r1, [r4, #4]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	4620      	mov	r0, r4
 8003236:	f001 f95f 	bl	80044f8 <_vfiscanf_r>
 800323a:	b002      	add	sp, #8
 800323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003240:	b004      	add	sp, #16
 8003242:	4770      	bx	lr
 8003244:	20000110 	.word	0x20000110

08003248 <setvbuf>:
 8003248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800324c:	461d      	mov	r5, r3
 800324e:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <setvbuf+0x17c>)
 8003250:	681f      	ldr	r7, [r3, #0]
 8003252:	4604      	mov	r4, r0
 8003254:	460e      	mov	r6, r1
 8003256:	4690      	mov	r8, r2
 8003258:	b127      	cbz	r7, 8003264 <setvbuf+0x1c>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	b913      	cbnz	r3, 8003264 <setvbuf+0x1c>
 800325e:	4638      	mov	r0, r7
 8003260:	f000 faa4 	bl	80037ac <__sinit>
 8003264:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <setvbuf+0x180>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d167      	bne.n	800333a <setvbuf+0xf2>
 800326a:	687c      	ldr	r4, [r7, #4]
 800326c:	f1b8 0f02 	cmp.w	r8, #2
 8003270:	d006      	beq.n	8003280 <setvbuf+0x38>
 8003272:	f1b8 0f01 	cmp.w	r8, #1
 8003276:	f200 809f 	bhi.w	80033b8 <setvbuf+0x170>
 800327a:	2d00      	cmp	r5, #0
 800327c:	f2c0 809c 	blt.w	80033b8 <setvbuf+0x170>
 8003280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003282:	07db      	lsls	r3, r3, #31
 8003284:	d405      	bmi.n	8003292 <setvbuf+0x4a>
 8003286:	89a3      	ldrh	r3, [r4, #12]
 8003288:	0598      	lsls	r0, r3, #22
 800328a:	d402      	bmi.n	8003292 <setvbuf+0x4a>
 800328c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328e:	f000 fb88 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8003292:	4621      	mov	r1, r4
 8003294:	4638      	mov	r0, r7
 8003296:	f000 f9e3 	bl	8003660 <_fflush_r>
 800329a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800329c:	b141      	cbz	r1, 80032b0 <setvbuf+0x68>
 800329e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032a2:	4299      	cmp	r1, r3
 80032a4:	d002      	beq.n	80032ac <setvbuf+0x64>
 80032a6:	4638      	mov	r0, r7
 80032a8:	f000 fbea 	bl	8003a80 <_free_r>
 80032ac:	2300      	movs	r3, #0
 80032ae:	6363      	str	r3, [r4, #52]	; 0x34
 80032b0:	2300      	movs	r3, #0
 80032b2:	61a3      	str	r3, [r4, #24]
 80032b4:	6063      	str	r3, [r4, #4]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	0619      	lsls	r1, r3, #24
 80032ba:	d503      	bpl.n	80032c4 <setvbuf+0x7c>
 80032bc:	6921      	ldr	r1, [r4, #16]
 80032be:	4638      	mov	r0, r7
 80032c0:	f000 fbde 	bl	8003a80 <_free_r>
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	f1b8 0f02 	cmp.w	r8, #2
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	d06c      	beq.n	80033b0 <setvbuf+0x168>
 80032d6:	ab01      	add	r3, sp, #4
 80032d8:	466a      	mov	r2, sp
 80032da:	4621      	mov	r1, r4
 80032dc:	4638      	mov	r0, r7
 80032de:	f000 fb62 	bl	80039a6 <__swhatbuf_r>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	4318      	orrs	r0, r3
 80032e6:	81a0      	strh	r0, [r4, #12]
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	d130      	bne.n	800334e <setvbuf+0x106>
 80032ec:	9d00      	ldr	r5, [sp, #0]
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fbbe 	bl	8003a70 <malloc>
 80032f4:	4606      	mov	r6, r0
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d155      	bne.n	80033a6 <setvbuf+0x15e>
 80032fa:	f8dd 9000 	ldr.w	r9, [sp]
 80032fe:	45a9      	cmp	r9, r5
 8003300:	d14a      	bne.n	8003398 <setvbuf+0x150>
 8003302:	f04f 35ff 	mov.w	r5, #4294967295
 8003306:	2200      	movs	r2, #0
 8003308:	60a2      	str	r2, [r4, #8]
 800330a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800330e:	6022      	str	r2, [r4, #0]
 8003310:	6122      	str	r2, [r4, #16]
 8003312:	2201      	movs	r2, #1
 8003314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003318:	6162      	str	r2, [r4, #20]
 800331a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	07d2      	lsls	r2, r2, #31
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	d405      	bmi.n	8003332 <setvbuf+0xea>
 8003326:	f413 7f00 	tst.w	r3, #512	; 0x200
 800332a:	d102      	bne.n	8003332 <setvbuf+0xea>
 800332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332e:	f000 fb39 	bl	80039a4 <__retarget_lock_release_recursive>
 8003332:	4628      	mov	r0, r5
 8003334:	b003      	add	sp, #12
 8003336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <setvbuf+0x184>)
 800333c:	429c      	cmp	r4, r3
 800333e:	d101      	bne.n	8003344 <setvbuf+0xfc>
 8003340:	68bc      	ldr	r4, [r7, #8]
 8003342:	e793      	b.n	800326c <setvbuf+0x24>
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <setvbuf+0x188>)
 8003346:	429c      	cmp	r4, r3
 8003348:	bf08      	it	eq
 800334a:	68fc      	ldreq	r4, [r7, #12]
 800334c:	e78e      	b.n	800326c <setvbuf+0x24>
 800334e:	2e00      	cmp	r6, #0
 8003350:	d0cd      	beq.n	80032ee <setvbuf+0xa6>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	b913      	cbnz	r3, 800335c <setvbuf+0x114>
 8003356:	4638      	mov	r0, r7
 8003358:	f000 fa28 	bl	80037ac <__sinit>
 800335c:	f1b8 0f01 	cmp.w	r8, #1
 8003360:	bf08      	it	eq
 8003362:	89a3      	ldrheq	r3, [r4, #12]
 8003364:	6026      	str	r6, [r4, #0]
 8003366:	bf04      	itt	eq
 8003368:	f043 0301 	orreq.w	r3, r3, #1
 800336c:	81a3      	strheq	r3, [r4, #12]
 800336e:	89a2      	ldrh	r2, [r4, #12]
 8003370:	f012 0308 	ands.w	r3, r2, #8
 8003374:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003378:	d01c      	beq.n	80033b4 <setvbuf+0x16c>
 800337a:	07d3      	lsls	r3, r2, #31
 800337c:	bf41      	itttt	mi
 800337e:	2300      	movmi	r3, #0
 8003380:	426d      	negmi	r5, r5
 8003382:	60a3      	strmi	r3, [r4, #8]
 8003384:	61a5      	strmi	r5, [r4, #24]
 8003386:	bf58      	it	pl
 8003388:	60a5      	strpl	r5, [r4, #8]
 800338a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800338c:	f015 0501 	ands.w	r5, r5, #1
 8003390:	d115      	bne.n	80033be <setvbuf+0x176>
 8003392:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003396:	e7c8      	b.n	800332a <setvbuf+0xe2>
 8003398:	4648      	mov	r0, r9
 800339a:	f000 fb69 	bl	8003a70 <malloc>
 800339e:	4606      	mov	r6, r0
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d0ae      	beq.n	8003302 <setvbuf+0xba>
 80033a4:	464d      	mov	r5, r9
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	e7d0      	b.n	8003352 <setvbuf+0x10a>
 80033b0:	2500      	movs	r5, #0
 80033b2:	e7a8      	b.n	8003306 <setvbuf+0xbe>
 80033b4:	60a3      	str	r3, [r4, #8]
 80033b6:	e7e8      	b.n	800338a <setvbuf+0x142>
 80033b8:	f04f 35ff 	mov.w	r5, #4294967295
 80033bc:	e7b9      	b.n	8003332 <setvbuf+0xea>
 80033be:	2500      	movs	r5, #0
 80033c0:	e7b7      	b.n	8003332 <setvbuf+0xea>
 80033c2:	bf00      	nop
 80033c4:	20000110 	.word	0x20000110
 80033c8:	08005070 	.word	0x08005070
 80033cc:	08005090 	.word	0x08005090
 80033d0:	08005050 	.word	0x08005050

080033d4 <__swbuf_r>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	460e      	mov	r6, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	4605      	mov	r5, r0
 80033dc:	b118      	cbz	r0, 80033e6 <__swbuf_r+0x12>
 80033de:	6983      	ldr	r3, [r0, #24]
 80033e0:	b90b      	cbnz	r3, 80033e6 <__swbuf_r+0x12>
 80033e2:	f000 f9e3 	bl	80037ac <__sinit>
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <__swbuf_r+0x98>)
 80033e8:	429c      	cmp	r4, r3
 80033ea:	d12b      	bne.n	8003444 <__swbuf_r+0x70>
 80033ec:	686c      	ldr	r4, [r5, #4]
 80033ee:	69a3      	ldr	r3, [r4, #24]
 80033f0:	60a3      	str	r3, [r4, #8]
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	071a      	lsls	r2, r3, #28
 80033f6:	d52f      	bpl.n	8003458 <__swbuf_r+0x84>
 80033f8:	6923      	ldr	r3, [r4, #16]
 80033fa:	b36b      	cbz	r3, 8003458 <__swbuf_r+0x84>
 80033fc:	6923      	ldr	r3, [r4, #16]
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	1ac0      	subs	r0, r0, r3
 8003402:	6963      	ldr	r3, [r4, #20]
 8003404:	b2f6      	uxtb	r6, r6
 8003406:	4283      	cmp	r3, r0
 8003408:	4637      	mov	r7, r6
 800340a:	dc04      	bgt.n	8003416 <__swbuf_r+0x42>
 800340c:	4621      	mov	r1, r4
 800340e:	4628      	mov	r0, r5
 8003410:	f000 f926 	bl	8003660 <_fflush_r>
 8003414:	bb30      	cbnz	r0, 8003464 <__swbuf_r+0x90>
 8003416:	68a3      	ldr	r3, [r4, #8]
 8003418:	3b01      	subs	r3, #1
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	6022      	str	r2, [r4, #0]
 8003422:	701e      	strb	r6, [r3, #0]
 8003424:	6963      	ldr	r3, [r4, #20]
 8003426:	3001      	adds	r0, #1
 8003428:	4283      	cmp	r3, r0
 800342a:	d004      	beq.n	8003436 <__swbuf_r+0x62>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	07db      	lsls	r3, r3, #31
 8003430:	d506      	bpl.n	8003440 <__swbuf_r+0x6c>
 8003432:	2e0a      	cmp	r6, #10
 8003434:	d104      	bne.n	8003440 <__swbuf_r+0x6c>
 8003436:	4621      	mov	r1, r4
 8003438:	4628      	mov	r0, r5
 800343a:	f000 f911 	bl	8003660 <_fflush_r>
 800343e:	b988      	cbnz	r0, 8003464 <__swbuf_r+0x90>
 8003440:	4638      	mov	r0, r7
 8003442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <__swbuf_r+0x9c>)
 8003446:	429c      	cmp	r4, r3
 8003448:	d101      	bne.n	800344e <__swbuf_r+0x7a>
 800344a:	68ac      	ldr	r4, [r5, #8]
 800344c:	e7cf      	b.n	80033ee <__swbuf_r+0x1a>
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <__swbuf_r+0xa0>)
 8003450:	429c      	cmp	r4, r3
 8003452:	bf08      	it	eq
 8003454:	68ec      	ldreq	r4, [r5, #12]
 8003456:	e7ca      	b.n	80033ee <__swbuf_r+0x1a>
 8003458:	4621      	mov	r1, r4
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f80c 	bl	8003478 <__swsetup_r>
 8003460:	2800      	cmp	r0, #0
 8003462:	d0cb      	beq.n	80033fc <__swbuf_r+0x28>
 8003464:	f04f 37ff 	mov.w	r7, #4294967295
 8003468:	e7ea      	b.n	8003440 <__swbuf_r+0x6c>
 800346a:	bf00      	nop
 800346c:	08005070 	.word	0x08005070
 8003470:	08005090 	.word	0x08005090
 8003474:	08005050 	.word	0x08005050

08003478 <__swsetup_r>:
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <__swsetup_r+0xcc>)
 800347a:	b570      	push	{r4, r5, r6, lr}
 800347c:	681d      	ldr	r5, [r3, #0]
 800347e:	4606      	mov	r6, r0
 8003480:	460c      	mov	r4, r1
 8003482:	b125      	cbz	r5, 800348e <__swsetup_r+0x16>
 8003484:	69ab      	ldr	r3, [r5, #24]
 8003486:	b913      	cbnz	r3, 800348e <__swsetup_r+0x16>
 8003488:	4628      	mov	r0, r5
 800348a:	f000 f98f 	bl	80037ac <__sinit>
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <__swsetup_r+0xd0>)
 8003490:	429c      	cmp	r4, r3
 8003492:	d10f      	bne.n	80034b4 <__swsetup_r+0x3c>
 8003494:	686c      	ldr	r4, [r5, #4]
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800349c:	0719      	lsls	r1, r3, #28
 800349e:	d42c      	bmi.n	80034fa <__swsetup_r+0x82>
 80034a0:	06dd      	lsls	r5, r3, #27
 80034a2:	d411      	bmi.n	80034c8 <__swsetup_r+0x50>
 80034a4:	2309      	movs	r3, #9
 80034a6:	6033      	str	r3, [r6, #0]
 80034a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295
 80034b2:	e03e      	b.n	8003532 <__swsetup_r+0xba>
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <__swsetup_r+0xd4>)
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d101      	bne.n	80034be <__swsetup_r+0x46>
 80034ba:	68ac      	ldr	r4, [r5, #8]
 80034bc:	e7eb      	b.n	8003496 <__swsetup_r+0x1e>
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <__swsetup_r+0xd8>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	bf08      	it	eq
 80034c4:	68ec      	ldreq	r4, [r5, #12]
 80034c6:	e7e6      	b.n	8003496 <__swsetup_r+0x1e>
 80034c8:	0758      	lsls	r0, r3, #29
 80034ca:	d512      	bpl.n	80034f2 <__swsetup_r+0x7a>
 80034cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034ce:	b141      	cbz	r1, 80034e2 <__swsetup_r+0x6a>
 80034d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d4:	4299      	cmp	r1, r3
 80034d6:	d002      	beq.n	80034de <__swsetup_r+0x66>
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 fad1 	bl	8003a80 <_free_r>
 80034de:	2300      	movs	r3, #0
 80034e0:	6363      	str	r3, [r4, #52]	; 0x34
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	2300      	movs	r3, #0
 80034ec:	6063      	str	r3, [r4, #4]
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	b94b      	cbnz	r3, 8003512 <__swsetup_r+0x9a>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003508:	d003      	beq.n	8003512 <__swsetup_r+0x9a>
 800350a:	4621      	mov	r1, r4
 800350c:	4630      	mov	r0, r6
 800350e:	f000 fa6f 	bl	80039f0 <__smakebuf_r>
 8003512:	89a0      	ldrh	r0, [r4, #12]
 8003514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003518:	f010 0301 	ands.w	r3, r0, #1
 800351c:	d00a      	beq.n	8003534 <__swsetup_r+0xbc>
 800351e:	2300      	movs	r3, #0
 8003520:	60a3      	str	r3, [r4, #8]
 8003522:	6963      	ldr	r3, [r4, #20]
 8003524:	425b      	negs	r3, r3
 8003526:	61a3      	str	r3, [r4, #24]
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	b943      	cbnz	r3, 800353e <__swsetup_r+0xc6>
 800352c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003530:	d1ba      	bne.n	80034a8 <__swsetup_r+0x30>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	0781      	lsls	r1, r0, #30
 8003536:	bf58      	it	pl
 8003538:	6963      	ldrpl	r3, [r4, #20]
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	e7f4      	b.n	8003528 <__swsetup_r+0xb0>
 800353e:	2000      	movs	r0, #0
 8003540:	e7f7      	b.n	8003532 <__swsetup_r+0xba>
 8003542:	bf00      	nop
 8003544:	20000110 	.word	0x20000110
 8003548:	08005070 	.word	0x08005070
 800354c:	08005090 	.word	0x08005090
 8003550:	08005050 	.word	0x08005050

08003554 <__sflush_r>:
 8003554:	898a      	ldrh	r2, [r1, #12]
 8003556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355a:	4605      	mov	r5, r0
 800355c:	0710      	lsls	r0, r2, #28
 800355e:	460c      	mov	r4, r1
 8003560:	d458      	bmi.n	8003614 <__sflush_r+0xc0>
 8003562:	684b      	ldr	r3, [r1, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dc05      	bgt.n	8003574 <__sflush_r+0x20>
 8003568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	dc02      	bgt.n	8003574 <__sflush_r+0x20>
 800356e:	2000      	movs	r0, #0
 8003570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003576:	2e00      	cmp	r6, #0
 8003578:	d0f9      	beq.n	800356e <__sflush_r+0x1a>
 800357a:	2300      	movs	r3, #0
 800357c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003580:	682f      	ldr	r7, [r5, #0]
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	d032      	beq.n	80035ec <__sflush_r+0x98>
 8003586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	075a      	lsls	r2, r3, #29
 800358c:	d505      	bpl.n	800359a <__sflush_r+0x46>
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	1ac0      	subs	r0, r0, r3
 8003592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003594:	b10b      	cbz	r3, 800359a <__sflush_r+0x46>
 8003596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	2300      	movs	r3, #0
 800359c:	4602      	mov	r2, r0
 800359e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a0:	6a21      	ldr	r1, [r4, #32]
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b0      	blx	r6
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	d106      	bne.n	80035ba <__sflush_r+0x66>
 80035ac:	6829      	ldr	r1, [r5, #0]
 80035ae:	291d      	cmp	r1, #29
 80035b0:	d82c      	bhi.n	800360c <__sflush_r+0xb8>
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <__sflush_r+0x108>)
 80035b4:	40ca      	lsrs	r2, r1
 80035b6:	07d6      	lsls	r6, r2, #31
 80035b8:	d528      	bpl.n	800360c <__sflush_r+0xb8>
 80035ba:	2200      	movs	r2, #0
 80035bc:	6062      	str	r2, [r4, #4]
 80035be:	04d9      	lsls	r1, r3, #19
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	6022      	str	r2, [r4, #0]
 80035c4:	d504      	bpl.n	80035d0 <__sflush_r+0x7c>
 80035c6:	1c42      	adds	r2, r0, #1
 80035c8:	d101      	bne.n	80035ce <__sflush_r+0x7a>
 80035ca:	682b      	ldr	r3, [r5, #0]
 80035cc:	b903      	cbnz	r3, 80035d0 <__sflush_r+0x7c>
 80035ce:	6560      	str	r0, [r4, #84]	; 0x54
 80035d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d2:	602f      	str	r7, [r5, #0]
 80035d4:	2900      	cmp	r1, #0
 80035d6:	d0ca      	beq.n	800356e <__sflush_r+0x1a>
 80035d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035dc:	4299      	cmp	r1, r3
 80035de:	d002      	beq.n	80035e6 <__sflush_r+0x92>
 80035e0:	4628      	mov	r0, r5
 80035e2:	f000 fa4d 	bl	8003a80 <_free_r>
 80035e6:	2000      	movs	r0, #0
 80035e8:	6360      	str	r0, [r4, #52]	; 0x34
 80035ea:	e7c1      	b.n	8003570 <__sflush_r+0x1c>
 80035ec:	6a21      	ldr	r1, [r4, #32]
 80035ee:	2301      	movs	r3, #1
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b0      	blx	r6
 80035f4:	1c41      	adds	r1, r0, #1
 80035f6:	d1c7      	bne.n	8003588 <__sflush_r+0x34>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0c4      	beq.n	8003588 <__sflush_r+0x34>
 80035fe:	2b1d      	cmp	r3, #29
 8003600:	d001      	beq.n	8003606 <__sflush_r+0xb2>
 8003602:	2b16      	cmp	r3, #22
 8003604:	d101      	bne.n	800360a <__sflush_r+0xb6>
 8003606:	602f      	str	r7, [r5, #0]
 8003608:	e7b1      	b.n	800356e <__sflush_r+0x1a>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003610:	81a3      	strh	r3, [r4, #12]
 8003612:	e7ad      	b.n	8003570 <__sflush_r+0x1c>
 8003614:	690f      	ldr	r7, [r1, #16]
 8003616:	2f00      	cmp	r7, #0
 8003618:	d0a9      	beq.n	800356e <__sflush_r+0x1a>
 800361a:	0793      	lsls	r3, r2, #30
 800361c:	680e      	ldr	r6, [r1, #0]
 800361e:	bf08      	it	eq
 8003620:	694b      	ldreq	r3, [r1, #20]
 8003622:	600f      	str	r7, [r1, #0]
 8003624:	bf18      	it	ne
 8003626:	2300      	movne	r3, #0
 8003628:	eba6 0807 	sub.w	r8, r6, r7
 800362c:	608b      	str	r3, [r1, #8]
 800362e:	f1b8 0f00 	cmp.w	r8, #0
 8003632:	dd9c      	ble.n	800356e <__sflush_r+0x1a>
 8003634:	6a21      	ldr	r1, [r4, #32]
 8003636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003638:	4643      	mov	r3, r8
 800363a:	463a      	mov	r2, r7
 800363c:	4628      	mov	r0, r5
 800363e:	47b0      	blx	r6
 8003640:	2800      	cmp	r0, #0
 8003642:	dc06      	bgt.n	8003652 <__sflush_r+0xfe>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364a:	81a3      	strh	r3, [r4, #12]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	e78e      	b.n	8003570 <__sflush_r+0x1c>
 8003652:	4407      	add	r7, r0
 8003654:	eba8 0800 	sub.w	r8, r8, r0
 8003658:	e7e9      	b.n	800362e <__sflush_r+0xda>
 800365a:	bf00      	nop
 800365c:	20400001 	.word	0x20400001

08003660 <_fflush_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	690b      	ldr	r3, [r1, #16]
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	b913      	cbnz	r3, 8003670 <_fflush_r+0x10>
 800366a:	2500      	movs	r5, #0
 800366c:	4628      	mov	r0, r5
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	b118      	cbz	r0, 800367a <_fflush_r+0x1a>
 8003672:	6983      	ldr	r3, [r0, #24]
 8003674:	b90b      	cbnz	r3, 800367a <_fflush_r+0x1a>
 8003676:	f000 f899 	bl	80037ac <__sinit>
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <_fflush_r+0x6c>)
 800367c:	429c      	cmp	r4, r3
 800367e:	d11b      	bne.n	80036b8 <_fflush_r+0x58>
 8003680:	686c      	ldr	r4, [r5, #4]
 8003682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0ef      	beq.n	800366a <_fflush_r+0xa>
 800368a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800368c:	07d0      	lsls	r0, r2, #31
 800368e:	d404      	bmi.n	800369a <_fflush_r+0x3a>
 8003690:	0599      	lsls	r1, r3, #22
 8003692:	d402      	bmi.n	800369a <_fflush_r+0x3a>
 8003694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003696:	f000 f984 	bl	80039a2 <__retarget_lock_acquire_recursive>
 800369a:	4628      	mov	r0, r5
 800369c:	4621      	mov	r1, r4
 800369e:	f7ff ff59 	bl	8003554 <__sflush_r>
 80036a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a4:	07da      	lsls	r2, r3, #31
 80036a6:	4605      	mov	r5, r0
 80036a8:	d4e0      	bmi.n	800366c <_fflush_r+0xc>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	059b      	lsls	r3, r3, #22
 80036ae:	d4dd      	bmi.n	800366c <_fflush_r+0xc>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f000 f977 	bl	80039a4 <__retarget_lock_release_recursive>
 80036b6:	e7d9      	b.n	800366c <_fflush_r+0xc>
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <_fflush_r+0x70>)
 80036ba:	429c      	cmp	r4, r3
 80036bc:	d101      	bne.n	80036c2 <_fflush_r+0x62>
 80036be:	68ac      	ldr	r4, [r5, #8]
 80036c0:	e7df      	b.n	8003682 <_fflush_r+0x22>
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <_fflush_r+0x74>)
 80036c4:	429c      	cmp	r4, r3
 80036c6:	bf08      	it	eq
 80036c8:	68ec      	ldreq	r4, [r5, #12]
 80036ca:	e7da      	b.n	8003682 <_fflush_r+0x22>
 80036cc:	08005070 	.word	0x08005070
 80036d0:	08005090 	.word	0x08005090
 80036d4:	08005050 	.word	0x08005050

080036d8 <fflush>:
 80036d8:	4601      	mov	r1, r0
 80036da:	b920      	cbnz	r0, 80036e6 <fflush+0xe>
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <fflush+0x18>)
 80036de:	4905      	ldr	r1, [pc, #20]	; (80036f4 <fflush+0x1c>)
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	f000 b8fe 	b.w	80038e2 <_fwalk_reent>
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <fflush+0x20>)
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f7ff bfb9 	b.w	8003660 <_fflush_r>
 80036ee:	bf00      	nop
 80036f0:	0800504c 	.word	0x0800504c
 80036f4:	08003661 	.word	0x08003661
 80036f8:	20000110 	.word	0x20000110

080036fc <std>:
 80036fc:	2300      	movs	r3, #0
 80036fe:	b510      	push	{r4, lr}
 8003700:	4604      	mov	r4, r0
 8003702:	e9c0 3300 	strd	r3, r3, [r0]
 8003706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800370a:	6083      	str	r3, [r0, #8]
 800370c:	8181      	strh	r1, [r0, #12]
 800370e:	6643      	str	r3, [r0, #100]	; 0x64
 8003710:	81c2      	strh	r2, [r0, #14]
 8003712:	6183      	str	r3, [r0, #24]
 8003714:	4619      	mov	r1, r3
 8003716:	2208      	movs	r2, #8
 8003718:	305c      	adds	r0, #92	; 0x5c
 800371a:	f7ff fce7 	bl	80030ec <memset>
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <std+0x38>)
 8003720:	6263      	str	r3, [r4, #36]	; 0x24
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <std+0x3c>)
 8003724:	62a3      	str	r3, [r4, #40]	; 0x28
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <std+0x40>)
 8003728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <std+0x44>)
 800372c:	6224      	str	r4, [r4, #32]
 800372e:	6323      	str	r3, [r4, #48]	; 0x30
 8003730:	bd10      	pop	{r4, pc}
 8003732:	bf00      	nop
 8003734:	080049f5 	.word	0x080049f5
 8003738:	08004a17 	.word	0x08004a17
 800373c:	08004a4f 	.word	0x08004a4f
 8003740:	08004a73 	.word	0x08004a73

08003744 <_cleanup_r>:
 8003744:	4901      	ldr	r1, [pc, #4]	; (800374c <_cleanup_r+0x8>)
 8003746:	f000 b8cc 	b.w	80038e2 <_fwalk_reent>
 800374a:	bf00      	nop
 800374c:	08003661 	.word	0x08003661

08003750 <__sfmoreglue>:
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	1e4a      	subs	r2, r1, #1
 8003754:	2568      	movs	r5, #104	; 0x68
 8003756:	4355      	muls	r5, r2
 8003758:	460e      	mov	r6, r1
 800375a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800375e:	f000 f9df 	bl	8003b20 <_malloc_r>
 8003762:	4604      	mov	r4, r0
 8003764:	b140      	cbz	r0, 8003778 <__sfmoreglue+0x28>
 8003766:	2100      	movs	r1, #0
 8003768:	e9c0 1600 	strd	r1, r6, [r0]
 800376c:	300c      	adds	r0, #12
 800376e:	60a0      	str	r0, [r4, #8]
 8003770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003774:	f7ff fcba 	bl	80030ec <memset>
 8003778:	4620      	mov	r0, r4
 800377a:	bd70      	pop	{r4, r5, r6, pc}

0800377c <__sfp_lock_acquire>:
 800377c:	4801      	ldr	r0, [pc, #4]	; (8003784 <__sfp_lock_acquire+0x8>)
 800377e:	f000 b910 	b.w	80039a2 <__retarget_lock_acquire_recursive>
 8003782:	bf00      	nop
 8003784:	20000234 	.word	0x20000234

08003788 <__sfp_lock_release>:
 8003788:	4801      	ldr	r0, [pc, #4]	; (8003790 <__sfp_lock_release+0x8>)
 800378a:	f000 b90b 	b.w	80039a4 <__retarget_lock_release_recursive>
 800378e:	bf00      	nop
 8003790:	20000234 	.word	0x20000234

08003794 <__sinit_lock_acquire>:
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <__sinit_lock_acquire+0x8>)
 8003796:	f000 b904 	b.w	80039a2 <__retarget_lock_acquire_recursive>
 800379a:	bf00      	nop
 800379c:	2000022f 	.word	0x2000022f

080037a0 <__sinit_lock_release>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__sinit_lock_release+0x8>)
 80037a2:	f000 b8ff 	b.w	80039a4 <__retarget_lock_release_recursive>
 80037a6:	bf00      	nop
 80037a8:	2000022f 	.word	0x2000022f

080037ac <__sinit>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	4604      	mov	r4, r0
 80037b0:	f7ff fff0 	bl	8003794 <__sinit_lock_acquire>
 80037b4:	69a3      	ldr	r3, [r4, #24]
 80037b6:	b11b      	cbz	r3, 80037c0 <__sinit+0x14>
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037bc:	f7ff bff0 	b.w	80037a0 <__sinit_lock_release>
 80037c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037c4:	6523      	str	r3, [r4, #80]	; 0x50
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <__sinit+0x68>)
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <__sinit+0x6c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	bf04      	itt	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	61a3      	streq	r3, [r4, #24]
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 f820 	bl	800381c <__sfp>
 80037dc:	6060      	str	r0, [r4, #4]
 80037de:	4620      	mov	r0, r4
 80037e0:	f000 f81c 	bl	800381c <__sfp>
 80037e4:	60a0      	str	r0, [r4, #8]
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 f818 	bl	800381c <__sfp>
 80037ec:	2200      	movs	r2, #0
 80037ee:	60e0      	str	r0, [r4, #12]
 80037f0:	2104      	movs	r1, #4
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	f7ff ff82 	bl	80036fc <std>
 80037f8:	68a0      	ldr	r0, [r4, #8]
 80037fa:	2201      	movs	r2, #1
 80037fc:	2109      	movs	r1, #9
 80037fe:	f7ff ff7d 	bl	80036fc <std>
 8003802:	68e0      	ldr	r0, [r4, #12]
 8003804:	2202      	movs	r2, #2
 8003806:	2112      	movs	r1, #18
 8003808:	f7ff ff78 	bl	80036fc <std>
 800380c:	2301      	movs	r3, #1
 800380e:	61a3      	str	r3, [r4, #24]
 8003810:	e7d2      	b.n	80037b8 <__sinit+0xc>
 8003812:	bf00      	nop
 8003814:	0800504c 	.word	0x0800504c
 8003818:	08003745 	.word	0x08003745

0800381c <__sfp>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	4607      	mov	r7, r0
 8003820:	f7ff ffac 	bl	800377c <__sfp_lock_acquire>
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <__sfp+0x84>)
 8003826:	681e      	ldr	r6, [r3, #0]
 8003828:	69b3      	ldr	r3, [r6, #24]
 800382a:	b913      	cbnz	r3, 8003832 <__sfp+0x16>
 800382c:	4630      	mov	r0, r6
 800382e:	f7ff ffbd 	bl	80037ac <__sinit>
 8003832:	3648      	adds	r6, #72	; 0x48
 8003834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003838:	3b01      	subs	r3, #1
 800383a:	d503      	bpl.n	8003844 <__sfp+0x28>
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	b30b      	cbz	r3, 8003884 <__sfp+0x68>
 8003840:	6836      	ldr	r6, [r6, #0]
 8003842:	e7f7      	b.n	8003834 <__sfp+0x18>
 8003844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003848:	b9d5      	cbnz	r5, 8003880 <__sfp+0x64>
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <__sfp+0x88>)
 800384c:	60e3      	str	r3, [r4, #12]
 800384e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003852:	6665      	str	r5, [r4, #100]	; 0x64
 8003854:	f000 f8a4 	bl	80039a0 <__retarget_lock_init_recursive>
 8003858:	f7ff ff96 	bl	8003788 <__sfp_lock_release>
 800385c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003864:	6025      	str	r5, [r4, #0]
 8003866:	61a5      	str	r5, [r4, #24]
 8003868:	2208      	movs	r2, #8
 800386a:	4629      	mov	r1, r5
 800386c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003870:	f7ff fc3c 	bl	80030ec <memset>
 8003874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800387c:	4620      	mov	r0, r4
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003880:	3468      	adds	r4, #104	; 0x68
 8003882:	e7d9      	b.n	8003838 <__sfp+0x1c>
 8003884:	2104      	movs	r1, #4
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff ff62 	bl	8003750 <__sfmoreglue>
 800388c:	4604      	mov	r4, r0
 800388e:	6030      	str	r0, [r6, #0]
 8003890:	2800      	cmp	r0, #0
 8003892:	d1d5      	bne.n	8003840 <__sfp+0x24>
 8003894:	f7ff ff78 	bl	8003788 <__sfp_lock_release>
 8003898:	230c      	movs	r3, #12
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	e7ee      	b.n	800387c <__sfp+0x60>
 800389e:	bf00      	nop
 80038a0:	0800504c 	.word	0x0800504c
 80038a4:	ffff0001 	.word	0xffff0001

080038a8 <_fwalk>:
 80038a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ac:	460f      	mov	r7, r1
 80038ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038b2:	2600      	movs	r6, #0
 80038b4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80038b8:	f1b8 0801 	subs.w	r8, r8, #1
 80038bc:	d505      	bpl.n	80038ca <_fwalk+0x22>
 80038be:	6824      	ldr	r4, [r4, #0]
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	d1f7      	bne.n	80038b4 <_fwalk+0xc>
 80038c4:	4630      	mov	r0, r6
 80038c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ca:	89ab      	ldrh	r3, [r5, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d906      	bls.n	80038de <_fwalk+0x36>
 80038d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038d4:	3301      	adds	r3, #1
 80038d6:	d002      	beq.n	80038de <_fwalk+0x36>
 80038d8:	4628      	mov	r0, r5
 80038da:	47b8      	blx	r7
 80038dc:	4306      	orrs	r6, r0
 80038de:	3568      	adds	r5, #104	; 0x68
 80038e0:	e7ea      	b.n	80038b8 <_fwalk+0x10>

080038e2 <_fwalk_reent>:
 80038e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e6:	4606      	mov	r6, r0
 80038e8:	4688      	mov	r8, r1
 80038ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038ee:	2700      	movs	r7, #0
 80038f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038f4:	f1b9 0901 	subs.w	r9, r9, #1
 80038f8:	d505      	bpl.n	8003906 <_fwalk_reent+0x24>
 80038fa:	6824      	ldr	r4, [r4, #0]
 80038fc:	2c00      	cmp	r4, #0
 80038fe:	d1f7      	bne.n	80038f0 <_fwalk_reent+0xe>
 8003900:	4638      	mov	r0, r7
 8003902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003906:	89ab      	ldrh	r3, [r5, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d907      	bls.n	800391c <_fwalk_reent+0x3a>
 800390c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003910:	3301      	adds	r3, #1
 8003912:	d003      	beq.n	800391c <_fwalk_reent+0x3a>
 8003914:	4629      	mov	r1, r5
 8003916:	4630      	mov	r0, r6
 8003918:	47c0      	blx	r8
 800391a:	4307      	orrs	r7, r0
 800391c:	3568      	adds	r5, #104	; 0x68
 800391e:	e7e9      	b.n	80038f4 <_fwalk_reent+0x12>

08003920 <_getc_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	460c      	mov	r4, r1
 8003924:	4605      	mov	r5, r0
 8003926:	b118      	cbz	r0, 8003930 <_getc_r+0x10>
 8003928:	6983      	ldr	r3, [r0, #24]
 800392a:	b90b      	cbnz	r3, 8003930 <_getc_r+0x10>
 800392c:	f7ff ff3e 	bl	80037ac <__sinit>
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <_getc_r+0x74>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d11e      	bne.n	8003974 <_getc_r+0x54>
 8003936:	686c      	ldr	r4, [r5, #4]
 8003938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800393a:	07d8      	lsls	r0, r3, #31
 800393c:	d405      	bmi.n	800394a <_getc_r+0x2a>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	0599      	lsls	r1, r3, #22
 8003942:	d402      	bmi.n	800394a <_getc_r+0x2a>
 8003944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003946:	f000 f82c 	bl	80039a2 <__retarget_lock_acquire_recursive>
 800394a:	6863      	ldr	r3, [r4, #4]
 800394c:	3b01      	subs	r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	da19      	bge.n	8003988 <_getc_r+0x68>
 8003954:	4628      	mov	r0, r5
 8003956:	4621      	mov	r1, r4
 8003958:	f000 ffd6 	bl	8004908 <__srget_r>
 800395c:	4605      	mov	r5, r0
 800395e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003960:	07da      	lsls	r2, r3, #31
 8003962:	d405      	bmi.n	8003970 <_getc_r+0x50>
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	059b      	lsls	r3, r3, #22
 8003968:	d402      	bmi.n	8003970 <_getc_r+0x50>
 800396a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396c:	f000 f81a 	bl	80039a4 <__retarget_lock_release_recursive>
 8003970:	4628      	mov	r0, r5
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_getc_r+0x78>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <_getc_r+0x5e>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7dc      	b.n	8003938 <_getc_r+0x18>
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <_getc_r+0x7c>)
 8003980:	429c      	cmp	r4, r3
 8003982:	bf08      	it	eq
 8003984:	68ec      	ldreq	r4, [r5, #12]
 8003986:	e7d7      	b.n	8003938 <_getc_r+0x18>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	6022      	str	r2, [r4, #0]
 800398e:	781d      	ldrb	r5, [r3, #0]
 8003990:	e7e5      	b.n	800395e <_getc_r+0x3e>
 8003992:	bf00      	nop
 8003994:	08005070 	.word	0x08005070
 8003998:	08005090 	.word	0x08005090
 800399c:	08005050 	.word	0x08005050

080039a0 <__retarget_lock_init_recursive>:
 80039a0:	4770      	bx	lr

080039a2 <__retarget_lock_acquire_recursive>:
 80039a2:	4770      	bx	lr

080039a4 <__retarget_lock_release_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__swhatbuf_r>:
 80039a6:	b570      	push	{r4, r5, r6, lr}
 80039a8:	460e      	mov	r6, r1
 80039aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ae:	2900      	cmp	r1, #0
 80039b0:	b096      	sub	sp, #88	; 0x58
 80039b2:	4614      	mov	r4, r2
 80039b4:	461d      	mov	r5, r3
 80039b6:	da07      	bge.n	80039c8 <__swhatbuf_r+0x22>
 80039b8:	2300      	movs	r3, #0
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	89b3      	ldrh	r3, [r6, #12]
 80039be:	061a      	lsls	r2, r3, #24
 80039c0:	d410      	bmi.n	80039e4 <__swhatbuf_r+0x3e>
 80039c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c6:	e00e      	b.n	80039e6 <__swhatbuf_r+0x40>
 80039c8:	466a      	mov	r2, sp
 80039ca:	f001 fa4f 	bl	8004e6c <_fstat_r>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	dbf2      	blt.n	80039b8 <__swhatbuf_r+0x12>
 80039d2:	9a01      	ldr	r2, [sp, #4]
 80039d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039dc:	425a      	negs	r2, r3
 80039de:	415a      	adcs	r2, r3
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	e7ee      	b.n	80039c2 <__swhatbuf_r+0x1c>
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	2000      	movs	r0, #0
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	b016      	add	sp, #88	; 0x58
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080039f0 <__smakebuf_r>:
 80039f0:	898b      	ldrh	r3, [r1, #12]
 80039f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039f4:	079d      	lsls	r5, r3, #30
 80039f6:	4606      	mov	r6, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	d507      	bpl.n	8003a0c <__smakebuf_r+0x1c>
 80039fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	2301      	movs	r3, #1
 8003a06:	6163      	str	r3, [r4, #20]
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	ab01      	add	r3, sp, #4
 8003a0e:	466a      	mov	r2, sp
 8003a10:	f7ff ffc9 	bl	80039a6 <__swhatbuf_r>
 8003a14:	9900      	ldr	r1, [sp, #0]
 8003a16:	4605      	mov	r5, r0
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f000 f881 	bl	8003b20 <_malloc_r>
 8003a1e:	b948      	cbnz	r0, 8003a34 <__smakebuf_r+0x44>
 8003a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a24:	059a      	lsls	r2, r3, #22
 8003a26:	d4ef      	bmi.n	8003a08 <__smakebuf_r+0x18>
 8003a28:	f023 0303 	bic.w	r3, r3, #3
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	e7e3      	b.n	80039fc <__smakebuf_r+0xc>
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <__smakebuf_r+0x7c>)
 8003a36:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	6020      	str	r0, [r4, #0]
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	9b00      	ldr	r3, [sp, #0]
 8003a44:	6163      	str	r3, [r4, #20]
 8003a46:	9b01      	ldr	r3, [sp, #4]
 8003a48:	6120      	str	r0, [r4, #16]
 8003a4a:	b15b      	cbz	r3, 8003a64 <__smakebuf_r+0x74>
 8003a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a50:	4630      	mov	r0, r6
 8003a52:	f001 fa1d 	bl	8004e90 <_isatty_r>
 8003a56:	b128      	cbz	r0, 8003a64 <__smakebuf_r+0x74>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	89a0      	ldrh	r0, [r4, #12]
 8003a66:	4305      	orrs	r5, r0
 8003a68:	81a5      	strh	r5, [r4, #12]
 8003a6a:	e7cd      	b.n	8003a08 <__smakebuf_r+0x18>
 8003a6c:	08003745 	.word	0x08003745

08003a70 <malloc>:
 8003a70:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <malloc+0xc>)
 8003a72:	4601      	mov	r1, r0
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	f000 b853 	b.w	8003b20 <_malloc_r>
 8003a7a:	bf00      	nop
 8003a7c:	20000110 	.word	0x20000110

08003a80 <_free_r>:
 8003a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d048      	beq.n	8003b18 <_free_r+0x98>
 8003a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a8a:	9001      	str	r0, [sp, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a92:	bfb8      	it	lt
 8003a94:	18e4      	addlt	r4, r4, r3
 8003a96:	f001 fa2b 	bl	8004ef0 <__malloc_lock>
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <_free_r+0x9c>)
 8003a9c:	9801      	ldr	r0, [sp, #4]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	4615      	mov	r5, r2
 8003aa2:	b933      	cbnz	r3, 8003ab2 <_free_r+0x32>
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	6014      	str	r4, [r2, #0]
 8003aa8:	b003      	add	sp, #12
 8003aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aae:	f001 ba25 	b.w	8004efc <__malloc_unlock>
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	d90b      	bls.n	8003ace <_free_r+0x4e>
 8003ab6:	6821      	ldr	r1, [r4, #0]
 8003ab8:	1862      	adds	r2, r4, r1
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bf04      	itt	eq
 8003abe:	681a      	ldreq	r2, [r3, #0]
 8003ac0:	685b      	ldreq	r3, [r3, #4]
 8003ac2:	6063      	str	r3, [r4, #4]
 8003ac4:	bf04      	itt	eq
 8003ac6:	1852      	addeq	r2, r2, r1
 8003ac8:	6022      	streq	r2, [r4, #0]
 8003aca:	602c      	str	r4, [r5, #0]
 8003acc:	e7ec      	b.n	8003aa8 <_free_r+0x28>
 8003ace:	461a      	mov	r2, r3
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b10b      	cbz	r3, 8003ad8 <_free_r+0x58>
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	d9fa      	bls.n	8003ace <_free_r+0x4e>
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	1855      	adds	r5, r2, r1
 8003adc:	42a5      	cmp	r5, r4
 8003ade:	d10b      	bne.n	8003af8 <_free_r+0x78>
 8003ae0:	6824      	ldr	r4, [r4, #0]
 8003ae2:	4421      	add	r1, r4
 8003ae4:	1854      	adds	r4, r2, r1
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	d1dd      	bne.n	8003aa8 <_free_r+0x28>
 8003aec:	681c      	ldr	r4, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	6053      	str	r3, [r2, #4]
 8003af2:	4421      	add	r1, r4
 8003af4:	6011      	str	r1, [r2, #0]
 8003af6:	e7d7      	b.n	8003aa8 <_free_r+0x28>
 8003af8:	d902      	bls.n	8003b00 <_free_r+0x80>
 8003afa:	230c      	movs	r3, #12
 8003afc:	6003      	str	r3, [r0, #0]
 8003afe:	e7d3      	b.n	8003aa8 <_free_r+0x28>
 8003b00:	6825      	ldr	r5, [r4, #0]
 8003b02:	1961      	adds	r1, r4, r5
 8003b04:	428b      	cmp	r3, r1
 8003b06:	bf04      	itt	eq
 8003b08:	6819      	ldreq	r1, [r3, #0]
 8003b0a:	685b      	ldreq	r3, [r3, #4]
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	bf04      	itt	eq
 8003b10:	1949      	addeq	r1, r1, r5
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	6054      	str	r4, [r2, #4]
 8003b16:	e7c7      	b.n	8003aa8 <_free_r+0x28>
 8003b18:	b003      	add	sp, #12
 8003b1a:	bd30      	pop	{r4, r5, pc}
 8003b1c:	20000194 	.word	0x20000194

08003b20 <_malloc_r>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	1ccd      	adds	r5, r1, #3
 8003b24:	f025 0503 	bic.w	r5, r5, #3
 8003b28:	3508      	adds	r5, #8
 8003b2a:	2d0c      	cmp	r5, #12
 8003b2c:	bf38      	it	cc
 8003b2e:	250c      	movcc	r5, #12
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	4606      	mov	r6, r0
 8003b34:	db01      	blt.n	8003b3a <_malloc_r+0x1a>
 8003b36:	42a9      	cmp	r1, r5
 8003b38:	d903      	bls.n	8003b42 <_malloc_r+0x22>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	2000      	movs	r0, #0
 8003b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b42:	f001 f9d5 	bl	8004ef0 <__malloc_lock>
 8003b46:	4921      	ldr	r1, [pc, #132]	; (8003bcc <_malloc_r+0xac>)
 8003b48:	680a      	ldr	r2, [r1, #0]
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	b99c      	cbnz	r4, 8003b76 <_malloc_r+0x56>
 8003b4e:	4f20      	ldr	r7, [pc, #128]	; (8003bd0 <_malloc_r+0xb0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b923      	cbnz	r3, 8003b5e <_malloc_r+0x3e>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 ff02 	bl	8004960 <_sbrk_r>
 8003b5c:	6038      	str	r0, [r7, #0]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4630      	mov	r0, r6
 8003b62:	f000 fefd 	bl	8004960 <_sbrk_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d123      	bne.n	8003bb2 <_malloc_r+0x92>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f001 f9c4 	bl	8004efc <__malloc_unlock>
 8003b74:	e7e3      	b.n	8003b3e <_malloc_r+0x1e>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	1b5b      	subs	r3, r3, r5
 8003b7a:	d417      	bmi.n	8003bac <_malloc_r+0x8c>
 8003b7c:	2b0b      	cmp	r3, #11
 8003b7e:	d903      	bls.n	8003b88 <_malloc_r+0x68>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	441c      	add	r4, r3
 8003b84:	6025      	str	r5, [r4, #0]
 8003b86:	e004      	b.n	8003b92 <_malloc_r+0x72>
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	42a2      	cmp	r2, r4
 8003b8c:	bf0c      	ite	eq
 8003b8e:	600b      	streq	r3, [r1, #0]
 8003b90:	6053      	strne	r3, [r2, #4]
 8003b92:	4630      	mov	r0, r6
 8003b94:	f001 f9b2 	bl	8004efc <__malloc_unlock>
 8003b98:	f104 000b 	add.w	r0, r4, #11
 8003b9c:	1d23      	adds	r3, r4, #4
 8003b9e:	f020 0007 	bic.w	r0, r0, #7
 8003ba2:	1ac2      	subs	r2, r0, r3
 8003ba4:	d0cc      	beq.n	8003b40 <_malloc_r+0x20>
 8003ba6:	1a1b      	subs	r3, r3, r0
 8003ba8:	50a3      	str	r3, [r4, r2]
 8003baa:	e7c9      	b.n	8003b40 <_malloc_r+0x20>
 8003bac:	4622      	mov	r2, r4
 8003bae:	6864      	ldr	r4, [r4, #4]
 8003bb0:	e7cc      	b.n	8003b4c <_malloc_r+0x2c>
 8003bb2:	1cc4      	adds	r4, r0, #3
 8003bb4:	f024 0403 	bic.w	r4, r4, #3
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d0e3      	beq.n	8003b84 <_malloc_r+0x64>
 8003bbc:	1a21      	subs	r1, r4, r0
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 fece 	bl	8004960 <_sbrk_r>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d1dd      	bne.n	8003b84 <_malloc_r+0x64>
 8003bc8:	e7cf      	b.n	8003b6a <_malloc_r+0x4a>
 8003bca:	bf00      	nop
 8003bcc:	20000194 	.word	0x20000194
 8003bd0:	20000198 	.word	0x20000198

08003bd4 <__sfputc_r>:
 8003bd4:	6893      	ldr	r3, [r2, #8]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	b410      	push	{r4}
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	da08      	bge.n	8003bf2 <__sfputc_r+0x1e>
 8003be0:	6994      	ldr	r4, [r2, #24]
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	db01      	blt.n	8003bea <__sfputc_r+0x16>
 8003be6:	290a      	cmp	r1, #10
 8003be8:	d103      	bne.n	8003bf2 <__sfputc_r+0x1e>
 8003bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bee:	f7ff bbf1 	b.w	80033d4 <__swbuf_r>
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	1c58      	adds	r0, r3, #1
 8003bf6:	6010      	str	r0, [r2, #0]
 8003bf8:	7019      	strb	r1, [r3, #0]
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <__sfputs_r>:
 8003c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c04:	4606      	mov	r6, r0
 8003c06:	460f      	mov	r7, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	18d5      	adds	r5, r2, r3
 8003c0c:	42ac      	cmp	r4, r5
 8003c0e:	d101      	bne.n	8003c14 <__sfputs_r+0x12>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e007      	b.n	8003c24 <__sfputs_r+0x22>
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	463a      	mov	r2, r7
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f7ff ffda 	bl	8003bd4 <__sfputc_r>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d1f3      	bne.n	8003c0c <__sfputs_r+0xa>
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c28 <_vfiprintf_r>:
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	460d      	mov	r5, r1
 8003c2e:	b09d      	sub	sp, #116	; 0x74
 8003c30:	4614      	mov	r4, r2
 8003c32:	4698      	mov	r8, r3
 8003c34:	4606      	mov	r6, r0
 8003c36:	b118      	cbz	r0, 8003c40 <_vfiprintf_r+0x18>
 8003c38:	6983      	ldr	r3, [r0, #24]
 8003c3a:	b90b      	cbnz	r3, 8003c40 <_vfiprintf_r+0x18>
 8003c3c:	f7ff fdb6 	bl	80037ac <__sinit>
 8003c40:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <_vfiprintf_r+0x240>)
 8003c42:	429d      	cmp	r5, r3
 8003c44:	d11b      	bne.n	8003c7e <_vfiprintf_r+0x56>
 8003c46:	6875      	ldr	r5, [r6, #4]
 8003c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c4a:	07d9      	lsls	r1, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_vfiprintf_r+0x32>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	059a      	lsls	r2, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_vfiprintf_r+0x32>
 8003c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c56:	f7ff fea4 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8003c5a:	89ab      	ldrh	r3, [r5, #12]
 8003c5c:	071b      	lsls	r3, r3, #28
 8003c5e:	d501      	bpl.n	8003c64 <_vfiprintf_r+0x3c>
 8003c60:	692b      	ldr	r3, [r5, #16]
 8003c62:	b9eb      	cbnz	r3, 8003ca0 <_vfiprintf_r+0x78>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff fc06 	bl	8003478 <__swsetup_r>
 8003c6c:	b1c0      	cbz	r0, 8003ca0 <_vfiprintf_r+0x78>
 8003c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c70:	07dc      	lsls	r4, r3, #31
 8003c72:	d50e      	bpl.n	8003c92 <_vfiprintf_r+0x6a>
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	b01d      	add	sp, #116	; 0x74
 8003c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	; (8003e6c <_vfiprintf_r+0x244>)
 8003c80:	429d      	cmp	r5, r3
 8003c82:	d101      	bne.n	8003c88 <_vfiprintf_r+0x60>
 8003c84:	68b5      	ldr	r5, [r6, #8]
 8003c86:	e7df      	b.n	8003c48 <_vfiprintf_r+0x20>
 8003c88:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <_vfiprintf_r+0x248>)
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	bf08      	it	eq
 8003c8e:	68f5      	ldreq	r5, [r6, #12]
 8003c90:	e7da      	b.n	8003c48 <_vfiprintf_r+0x20>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	0598      	lsls	r0, r3, #22
 8003c96:	d4ed      	bmi.n	8003c74 <_vfiprintf_r+0x4c>
 8003c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c9a:	f7ff fe83 	bl	80039a4 <__retarget_lock_release_recursive>
 8003c9e:	e7e9      	b.n	8003c74 <_vfiprintf_r+0x4c>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cae:	2330      	movs	r3, #48	; 0x30
 8003cb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e74 <_vfiprintf_r+0x24c>
 8003cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb8:	f04f 0901 	mov.w	r9, #1
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	469a      	mov	sl, r3
 8003cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc4:	b10a      	cbz	r2, 8003cca <_vfiprintf_r+0xa2>
 8003cc6:	2a25      	cmp	r2, #37	; 0x25
 8003cc8:	d1f9      	bne.n	8003cbe <_vfiprintf_r+0x96>
 8003cca:	ebba 0b04 	subs.w	fp, sl, r4
 8003cce:	d00b      	beq.n	8003ce8 <_vfiprintf_r+0xc0>
 8003cd0:	465b      	mov	r3, fp
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ff93 	bl	8003c02 <__sfputs_r>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f000 80aa 	beq.w	8003e36 <_vfiprintf_r+0x20e>
 8003ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce4:	445a      	add	r2, fp
 8003ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a2 	beq.w	8003e36 <_vfiprintf_r+0x20e>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfc:	f10a 0a01 	add.w	sl, sl, #1
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	9307      	str	r3, [sp, #28]
 8003d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d08:	931a      	str	r3, [sp, #104]	; 0x68
 8003d0a:	4654      	mov	r4, sl
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d12:	4858      	ldr	r0, [pc, #352]	; (8003e74 <_vfiprintf_r+0x24c>)
 8003d14:	f7fc fae4 	bl	80002e0 <memchr>
 8003d18:	9a04      	ldr	r2, [sp, #16]
 8003d1a:	b9d8      	cbnz	r0, 8003d54 <_vfiprintf_r+0x12c>
 8003d1c:	06d1      	lsls	r1, r2, #27
 8003d1e:	bf44      	itt	mi
 8003d20:	2320      	movmi	r3, #32
 8003d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d26:	0713      	lsls	r3, r2, #28
 8003d28:	bf44      	itt	mi
 8003d2a:	232b      	movmi	r3, #43	; 0x2b
 8003d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d30:	f89a 3000 	ldrb.w	r3, [sl]
 8003d34:	2b2a      	cmp	r3, #42	; 0x2a
 8003d36:	d015      	beq.n	8003d64 <_vfiprintf_r+0x13c>
 8003d38:	9a07      	ldr	r2, [sp, #28]
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d48:	3b30      	subs	r3, #48	; 0x30
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d94e      	bls.n	8003dec <_vfiprintf_r+0x1c4>
 8003d4e:	b1b0      	cbz	r0, 8003d7e <_vfiprintf_r+0x156>
 8003d50:	9207      	str	r2, [sp, #28]
 8003d52:	e014      	b.n	8003d7e <_vfiprintf_r+0x156>
 8003d54:	eba0 0308 	sub.w	r3, r0, r8
 8003d58:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	46a2      	mov	sl, r4
 8003d62:	e7d2      	b.n	8003d0a <_vfiprintf_r+0xe2>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	1d19      	adds	r1, r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	9103      	str	r1, [sp, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bfbb      	ittet	lt
 8003d70:	425b      	neglt	r3, r3
 8003d72:	f042 0202 	orrlt.w	r2, r2, #2
 8003d76:	9307      	strge	r3, [sp, #28]
 8003d78:	9307      	strlt	r3, [sp, #28]
 8003d7a:	bfb8      	it	lt
 8003d7c:	9204      	strlt	r2, [sp, #16]
 8003d7e:	7823      	ldrb	r3, [r4, #0]
 8003d80:	2b2e      	cmp	r3, #46	; 0x2e
 8003d82:	d10c      	bne.n	8003d9e <_vfiprintf_r+0x176>
 8003d84:	7863      	ldrb	r3, [r4, #1]
 8003d86:	2b2a      	cmp	r3, #42	; 0x2a
 8003d88:	d135      	bne.n	8003df6 <_vfiprintf_r+0x1ce>
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	9203      	str	r2, [sp, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfb8      	it	lt
 8003d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9a:	3402      	adds	r4, #2
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e84 <_vfiprintf_r+0x25c>
 8003da2:	7821      	ldrb	r1, [r4, #0]
 8003da4:	2203      	movs	r2, #3
 8003da6:	4650      	mov	r0, sl
 8003da8:	f7fc fa9a 	bl	80002e0 <memchr>
 8003dac:	b140      	cbz	r0, 8003dc0 <_vfiprintf_r+0x198>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	eba0 000a 	sub.w	r0, r0, sl
 8003db4:	fa03 f000 	lsl.w	r0, r3, r0
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	4303      	orrs	r3, r0
 8003dbc:	3401      	adds	r4, #1
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc4:	482c      	ldr	r0, [pc, #176]	; (8003e78 <_vfiprintf_r+0x250>)
 8003dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dca:	2206      	movs	r2, #6
 8003dcc:	f7fc fa88 	bl	80002e0 <memchr>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d03f      	beq.n	8003e54 <_vfiprintf_r+0x22c>
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <_vfiprintf_r+0x254>)
 8003dd6:	bb1b      	cbnz	r3, 8003e20 <_vfiprintf_r+0x1f8>
 8003dd8:	9b03      	ldr	r3, [sp, #12]
 8003dda:	3307      	adds	r3, #7
 8003ddc:	f023 0307 	bic.w	r3, r3, #7
 8003de0:	3308      	adds	r3, #8
 8003de2:	9303      	str	r3, [sp, #12]
 8003de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de6:	443b      	add	r3, r7
 8003de8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dea:	e767      	b.n	8003cbc <_vfiprintf_r+0x94>
 8003dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df0:	460c      	mov	r4, r1
 8003df2:	2001      	movs	r0, #1
 8003df4:	e7a5      	b.n	8003d42 <_vfiprintf_r+0x11a>
 8003df6:	2300      	movs	r3, #0
 8003df8:	3401      	adds	r4, #1
 8003dfa:	9305      	str	r3, [sp, #20]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f04f 0c0a 	mov.w	ip, #10
 8003e02:	4620      	mov	r0, r4
 8003e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e08:	3a30      	subs	r2, #48	; 0x30
 8003e0a:	2a09      	cmp	r2, #9
 8003e0c:	d903      	bls.n	8003e16 <_vfiprintf_r+0x1ee>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0c5      	beq.n	8003d9e <_vfiprintf_r+0x176>
 8003e12:	9105      	str	r1, [sp, #20]
 8003e14:	e7c3      	b.n	8003d9e <_vfiprintf_r+0x176>
 8003e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e7f0      	b.n	8003e02 <_vfiprintf_r+0x1da>
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	462a      	mov	r2, r5
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <_vfiprintf_r+0x258>)
 8003e28:	a904      	add	r1, sp, #16
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f3af 8000 	nop.w
 8003e30:	4607      	mov	r7, r0
 8003e32:	1c78      	adds	r0, r7, #1
 8003e34:	d1d6      	bne.n	8003de4 <_vfiprintf_r+0x1bc>
 8003e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e38:	07d9      	lsls	r1, r3, #31
 8003e3a:	d405      	bmi.n	8003e48 <_vfiprintf_r+0x220>
 8003e3c:	89ab      	ldrh	r3, [r5, #12]
 8003e3e:	059a      	lsls	r2, r3, #22
 8003e40:	d402      	bmi.n	8003e48 <_vfiprintf_r+0x220>
 8003e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e44:	f7ff fdae 	bl	80039a4 <__retarget_lock_release_recursive>
 8003e48:	89ab      	ldrh	r3, [r5, #12]
 8003e4a:	065b      	lsls	r3, r3, #25
 8003e4c:	f53f af12 	bmi.w	8003c74 <_vfiprintf_r+0x4c>
 8003e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e52:	e711      	b.n	8003c78 <_vfiprintf_r+0x50>
 8003e54:	ab03      	add	r3, sp, #12
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	462a      	mov	r2, r5
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <_vfiprintf_r+0x258>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 f880 	bl	8003f64 <_printf_i>
 8003e64:	e7e4      	b.n	8003e30 <_vfiprintf_r+0x208>
 8003e66:	bf00      	nop
 8003e68:	08005070 	.word	0x08005070
 8003e6c:	08005090 	.word	0x08005090
 8003e70:	08005050 	.word	0x08005050
 8003e74:	080050b0 	.word	0x080050b0
 8003e78:	080050ba 	.word	0x080050ba
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003c03 	.word	0x08003c03
 8003e84:	080050b6 	.word	0x080050b6

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	68e5      	ldr	r5, [r4, #12]
 8003ef2:	6832      	ldr	r2, [r6, #0]
 8003ef4:	f003 0306 	and.w	r3, r3, #6
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	bf08      	it	eq
 8003efc:	1aad      	subeq	r5, r5, r2
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	4691      	mov	r9, r2
 8003f6c:	7e27      	ldrb	r7, [r4, #24]
 8003f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f70:	2f78      	cmp	r7, #120	; 0x78
 8003f72:	4680      	mov	r8, r0
 8003f74:	469a      	mov	sl, r3
 8003f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d8 	beq.w	8004136 <_printf_i+0x1d2>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80a3 	beq.w	80040d2 <_printf_i+0x16e>
 8003f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a001      	add	r0, pc, #4	; (adr r0, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	0800411d 	.word	0x0800411d
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	080040ff 	.word	0x080040ff
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	0800413f 	.word	0x0800413f
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	08004107 	.word	0x08004107
 8003ffc:	680b      	ldr	r3, [r1, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	600a      	str	r2, [r1, #0]
 8004004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e0a3      	b.n	8004158 <_printf_i+0x1f4>
 8004010:	6825      	ldr	r5, [r4, #0]
 8004012:	6808      	ldr	r0, [r1, #0]
 8004014:	062e      	lsls	r6, r5, #24
 8004016:	f100 0304 	add.w	r3, r0, #4
 800401a:	d50a      	bpl.n	8004032 <_printf_i+0xce>
 800401c:	6805      	ldr	r5, [r0, #0]
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	2d00      	cmp	r5, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0xc8>
 8004024:	232d      	movs	r3, #45	; 0x2d
 8004026:	426d      	negs	r5, r5
 8004028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402c:	485e      	ldr	r0, [pc, #376]	; (80041a8 <_printf_i+0x244>)
 800402e:	230a      	movs	r3, #10
 8004030:	e019      	b.n	8004066 <_printf_i+0x102>
 8004032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004036:	6805      	ldr	r5, [r0, #0]
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	bf18      	it	ne
 800403c:	b22d      	sxthne	r5, r5
 800403e:	e7ef      	b.n	8004020 <_printf_i+0xbc>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	1d18      	adds	r0, r3, #4
 8004046:	6008      	str	r0, [r1, #0]
 8004048:	0628      	lsls	r0, r5, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0xec>
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0xf2>
 8004050:	0669      	lsls	r1, r5, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0xe8>
 8004054:	881d      	ldrh	r5, [r3, #0]
 8004056:	4854      	ldr	r0, [pc, #336]	; (80041a8 <_printf_i+0x244>)
 8004058:	2f6f      	cmp	r7, #111	; 0x6f
 800405a:	bf0c      	ite	eq
 800405c:	2308      	moveq	r3, #8
 800405e:	230a      	movne	r3, #10
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004066:	6866      	ldr	r6, [r4, #4]
 8004068:	60a6      	str	r6, [r4, #8]
 800406a:	2e00      	cmp	r6, #0
 800406c:	bfa2      	ittt	ge
 800406e:	6821      	ldrge	r1, [r4, #0]
 8004070:	f021 0104 	bicge.w	r1, r1, #4
 8004074:	6021      	strge	r1, [r4, #0]
 8004076:	b90d      	cbnz	r5, 800407c <_printf_i+0x118>
 8004078:	2e00      	cmp	r6, #0
 800407a:	d04d      	beq.n	8004118 <_printf_i+0x1b4>
 800407c:	4616      	mov	r6, r2
 800407e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004082:	fb03 5711 	mls	r7, r3, r1, r5
 8004086:	5dc7      	ldrb	r7, [r0, r7]
 8004088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800408c:	462f      	mov	r7, r5
 800408e:	42bb      	cmp	r3, r7
 8004090:	460d      	mov	r5, r1
 8004092:	d9f4      	bls.n	800407e <_printf_i+0x11a>
 8004094:	2b08      	cmp	r3, #8
 8004096:	d10b      	bne.n	80040b0 <_printf_i+0x14c>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	07df      	lsls	r7, r3, #31
 800409c:	d508      	bpl.n	80040b0 <_printf_i+0x14c>
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	bfde      	ittt	le
 80040a6:	2330      	movle	r3, #48	; 0x30
 80040a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040b0:	1b92      	subs	r2, r2, r6
 80040b2:	6122      	str	r2, [r4, #16]
 80040b4:	f8cd a000 	str.w	sl, [sp]
 80040b8:	464b      	mov	r3, r9
 80040ba:	aa03      	add	r2, sp, #12
 80040bc:	4621      	mov	r1, r4
 80040be:	4640      	mov	r0, r8
 80040c0:	f7ff fee2 	bl	8003e88 <_printf_common>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d14c      	bne.n	8004162 <_printf_i+0x1fe>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b004      	add	sp, #16
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	4835      	ldr	r0, [pc, #212]	; (80041a8 <_printf_i+0x244>)
 80040d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	680e      	ldr	r6, [r1, #0]
 80040dc:	061f      	lsls	r7, r3, #24
 80040de:	f856 5b04 	ldr.w	r5, [r6], #4
 80040e2:	600e      	str	r6, [r1, #0]
 80040e4:	d514      	bpl.n	8004110 <_printf_i+0x1ac>
 80040e6:	07d9      	lsls	r1, r3, #31
 80040e8:	bf44      	itt	mi
 80040ea:	f043 0320 	orrmi.w	r3, r3, #32
 80040ee:	6023      	strmi	r3, [r4, #0]
 80040f0:	b91d      	cbnz	r5, 80040fa <_printf_i+0x196>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f023 0320 	bic.w	r3, r3, #32
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	2310      	movs	r3, #16
 80040fc:	e7b0      	b.n	8004060 <_printf_i+0xfc>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	2378      	movs	r3, #120	; 0x78
 8004108:	4828      	ldr	r0, [pc, #160]	; (80041ac <_printf_i+0x248>)
 800410a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410e:	e7e3      	b.n	80040d8 <_printf_i+0x174>
 8004110:	065e      	lsls	r6, r3, #25
 8004112:	bf48      	it	mi
 8004114:	b2ad      	uxthmi	r5, r5
 8004116:	e7e6      	b.n	80040e6 <_printf_i+0x182>
 8004118:	4616      	mov	r6, r2
 800411a:	e7bb      	b.n	8004094 <_printf_i+0x130>
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	6826      	ldr	r6, [r4, #0]
 8004120:	6960      	ldr	r0, [r4, #20]
 8004122:	1d1d      	adds	r5, r3, #4
 8004124:	600d      	str	r5, [r1, #0]
 8004126:	0635      	lsls	r5, r6, #24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	d501      	bpl.n	8004130 <_printf_i+0x1cc>
 800412c:	6018      	str	r0, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0x1d2>
 8004130:	0671      	lsls	r1, r6, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0x1c8>
 8004134:	8018      	strh	r0, [r3, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	4616      	mov	r6, r2
 800413c:	e7ba      	b.n	80040b4 <_printf_i+0x150>
 800413e:	680b      	ldr	r3, [r1, #0]
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	600a      	str	r2, [r1, #0]
 8004144:	681e      	ldr	r6, [r3, #0]
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	2100      	movs	r1, #0
 800414a:	4630      	mov	r0, r6
 800414c:	f7fc f8c8 	bl	80002e0 <memchr>
 8004150:	b108      	cbz	r0, 8004156 <_printf_i+0x1f2>
 8004152:	1b80      	subs	r0, r0, r6
 8004154:	6060      	str	r0, [r4, #4]
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	2300      	movs	r3, #0
 800415c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004160:	e7a8      	b.n	80040b4 <_printf_i+0x150>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	4632      	mov	r2, r6
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	47d0      	blx	sl
 800416c:	3001      	adds	r0, #1
 800416e:	d0ab      	beq.n	80040c8 <_printf_i+0x164>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	079b      	lsls	r3, r3, #30
 8004174:	d413      	bmi.n	800419e <_printf_i+0x23a>
 8004176:	68e0      	ldr	r0, [r4, #12]
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	4298      	cmp	r0, r3
 800417c:	bfb8      	it	lt
 800417e:	4618      	movlt	r0, r3
 8004180:	e7a4      	b.n	80040cc <_printf_i+0x168>
 8004182:	2301      	movs	r3, #1
 8004184:	4632      	mov	r2, r6
 8004186:	4649      	mov	r1, r9
 8004188:	4640      	mov	r0, r8
 800418a:	47d0      	blx	sl
 800418c:	3001      	adds	r0, #1
 800418e:	d09b      	beq.n	80040c8 <_printf_i+0x164>
 8004190:	3501      	adds	r5, #1
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	9903      	ldr	r1, [sp, #12]
 8004196:	1a5b      	subs	r3, r3, r1
 8004198:	42ab      	cmp	r3, r5
 800419a:	dcf2      	bgt.n	8004182 <_printf_i+0x21e>
 800419c:	e7eb      	b.n	8004176 <_printf_i+0x212>
 800419e:	2500      	movs	r5, #0
 80041a0:	f104 0619 	add.w	r6, r4, #25
 80041a4:	e7f5      	b.n	8004192 <_printf_i+0x22e>
 80041a6:	bf00      	nop
 80041a8:	080050c1 	.word	0x080050c1
 80041ac:	080050d2 	.word	0x080050d2

080041b0 <__svfiscanf_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	461d      	mov	r5, r3
 80041b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80041b8:	07df      	lsls	r7, r3, #31
 80041ba:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80041be:	4606      	mov	r6, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	4692      	mov	sl, r2
 80041c4:	d405      	bmi.n	80041d2 <__svfiscanf_r+0x22>
 80041c6:	898b      	ldrh	r3, [r1, #12]
 80041c8:	0598      	lsls	r0, r3, #22
 80041ca:	d402      	bmi.n	80041d2 <__svfiscanf_r+0x22>
 80041cc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80041ce:	f7ff fbe8 	bl	80039a2 <__retarget_lock_acquire_recursive>
 80041d2:	2300      	movs	r3, #0
 80041d4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80041d8:	4bae      	ldr	r3, [pc, #696]	; (8004494 <__svfiscanf_r+0x2e4>)
 80041da:	93a0      	str	r3, [sp, #640]	; 0x280
 80041dc:	f10d 0804 	add.w	r8, sp, #4
 80041e0:	4bad      	ldr	r3, [pc, #692]	; (8004498 <__svfiscanf_r+0x2e8>)
 80041e2:	4fae      	ldr	r7, [pc, #696]	; (800449c <__svfiscanf_r+0x2ec>)
 80041e4:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80044a0 <__svfiscanf_r+0x2f0>
 80041e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80041ec:	93a1      	str	r3, [sp, #644]	; 0x284
 80041ee:	9500      	str	r5, [sp, #0]
 80041f0:	f89a b000 	ldrb.w	fp, [sl]
 80041f4:	f1bb 0f00 	cmp.w	fp, #0
 80041f8:	f000 8170 	beq.w	80044dc <__svfiscanf_r+0x32c>
 80041fc:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8004200:	f013 0308 	ands.w	r3, r3, #8
 8004204:	f10a 0501 	add.w	r5, sl, #1
 8004208:	d019      	beq.n	800423e <__svfiscanf_r+0x8e>
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd0f      	ble.n	8004230 <__svfiscanf_r+0x80>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	5cba      	ldrb	r2, [r7, r2]
 8004216:	0711      	lsls	r1, r2, #28
 8004218:	d401      	bmi.n	800421e <__svfiscanf_r+0x6e>
 800421a:	46aa      	mov	sl, r5
 800421c:	e7e8      	b.n	80041f0 <__svfiscanf_r+0x40>
 800421e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004220:	3201      	adds	r2, #1
 8004222:	9245      	str	r2, [sp, #276]	; 0x114
 8004224:	6862      	ldr	r2, [r4, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	3a01      	subs	r2, #1
 800422a:	6062      	str	r2, [r4, #4]
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	e7ec      	b.n	800420a <__svfiscanf_r+0x5a>
 8004230:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004232:	4621      	mov	r1, r4
 8004234:	4630      	mov	r0, r6
 8004236:	4798      	blx	r3
 8004238:	2800      	cmp	r0, #0
 800423a:	d0e9      	beq.n	8004210 <__svfiscanf_r+0x60>
 800423c:	e7ed      	b.n	800421a <__svfiscanf_r+0x6a>
 800423e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004242:	f040 8086 	bne.w	8004352 <__svfiscanf_r+0x1a2>
 8004246:	9341      	str	r3, [sp, #260]	; 0x104
 8004248:	9343      	str	r3, [sp, #268]	; 0x10c
 800424a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800424e:	2b2a      	cmp	r3, #42	; 0x2a
 8004250:	bf02      	ittt	eq
 8004252:	2310      	moveq	r3, #16
 8004254:	9341      	streq	r3, [sp, #260]	; 0x104
 8004256:	f10a 0502 	addeq.w	r5, sl, #2
 800425a:	220a      	movs	r2, #10
 800425c:	46aa      	mov	sl, r5
 800425e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004262:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004266:	2b09      	cmp	r3, #9
 8004268:	d91e      	bls.n	80042a8 <__svfiscanf_r+0xf8>
 800426a:	488d      	ldr	r0, [pc, #564]	; (80044a0 <__svfiscanf_r+0x2f0>)
 800426c:	2203      	movs	r2, #3
 800426e:	f7fc f837 	bl	80002e0 <memchr>
 8004272:	b140      	cbz	r0, 8004286 <__svfiscanf_r+0xd6>
 8004274:	2301      	movs	r3, #1
 8004276:	eba0 0009 	sub.w	r0, r0, r9
 800427a:	fa03 f000 	lsl.w	r0, r3, r0
 800427e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004280:	4318      	orrs	r0, r3
 8004282:	9041      	str	r0, [sp, #260]	; 0x104
 8004284:	4655      	mov	r5, sl
 8004286:	f815 3b01 	ldrb.w	r3, [r5], #1
 800428a:	2b78      	cmp	r3, #120	; 0x78
 800428c:	d807      	bhi.n	800429e <__svfiscanf_r+0xee>
 800428e:	2b57      	cmp	r3, #87	; 0x57
 8004290:	d811      	bhi.n	80042b6 <__svfiscanf_r+0x106>
 8004292:	2b25      	cmp	r3, #37	; 0x25
 8004294:	d05d      	beq.n	8004352 <__svfiscanf_r+0x1a2>
 8004296:	d857      	bhi.n	8004348 <__svfiscanf_r+0x198>
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80d6 	beq.w	800444a <__svfiscanf_r+0x29a>
 800429e:	2303      	movs	r3, #3
 80042a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80042a2:	230a      	movs	r3, #10
 80042a4:	9342      	str	r3, [sp, #264]	; 0x108
 80042a6:	e08b      	b.n	80043c0 <__svfiscanf_r+0x210>
 80042a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80042aa:	fb02 1303 	mla	r3, r2, r3, r1
 80042ae:	3b30      	subs	r3, #48	; 0x30
 80042b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80042b2:	4655      	mov	r5, sl
 80042b4:	e7d2      	b.n	800425c <__svfiscanf_r+0xac>
 80042b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80042ba:	2a20      	cmp	r2, #32
 80042bc:	d8ef      	bhi.n	800429e <__svfiscanf_r+0xee>
 80042be:	a101      	add	r1, pc, #4	; (adr r1, 80042c4 <__svfiscanf_r+0x114>)
 80042c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80042c4:	080043ab 	.word	0x080043ab
 80042c8:	0800429f 	.word	0x0800429f
 80042cc:	0800429f 	.word	0x0800429f
 80042d0:	08004409 	.word	0x08004409
 80042d4:	0800429f 	.word	0x0800429f
 80042d8:	0800429f 	.word	0x0800429f
 80042dc:	0800429f 	.word	0x0800429f
 80042e0:	0800429f 	.word	0x0800429f
 80042e4:	0800429f 	.word	0x0800429f
 80042e8:	0800429f 	.word	0x0800429f
 80042ec:	0800429f 	.word	0x0800429f
 80042f0:	0800441f 	.word	0x0800441f
 80042f4:	080043f5 	.word	0x080043f5
 80042f8:	0800434f 	.word	0x0800434f
 80042fc:	0800434f 	.word	0x0800434f
 8004300:	0800434f 	.word	0x0800434f
 8004304:	0800429f 	.word	0x0800429f
 8004308:	080043f9 	.word	0x080043f9
 800430c:	0800429f 	.word	0x0800429f
 8004310:	0800429f 	.word	0x0800429f
 8004314:	0800429f 	.word	0x0800429f
 8004318:	0800429f 	.word	0x0800429f
 800431c:	0800442f 	.word	0x0800442f
 8004320:	08004401 	.word	0x08004401
 8004324:	080043a3 	.word	0x080043a3
 8004328:	0800429f 	.word	0x0800429f
 800432c:	0800429f 	.word	0x0800429f
 8004330:	0800442b 	.word	0x0800442b
 8004334:	0800429f 	.word	0x0800429f
 8004338:	080043f5 	.word	0x080043f5
 800433c:	0800429f 	.word	0x0800429f
 8004340:	0800429f 	.word	0x0800429f
 8004344:	080043ab 	.word	0x080043ab
 8004348:	3b45      	subs	r3, #69	; 0x45
 800434a:	2b02      	cmp	r3, #2
 800434c:	d8a7      	bhi.n	800429e <__svfiscanf_r+0xee>
 800434e:	2305      	movs	r3, #5
 8004350:	e035      	b.n	80043be <__svfiscanf_r+0x20e>
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	dd0d      	ble.n	8004374 <__svfiscanf_r+0x1c4>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	455a      	cmp	r2, fp
 800435e:	f040 80bd 	bne.w	80044dc <__svfiscanf_r+0x32c>
 8004362:	3301      	adds	r3, #1
 8004364:	6862      	ldr	r2, [r4, #4]
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800436a:	3a01      	subs	r2, #1
 800436c:	3301      	adds	r3, #1
 800436e:	6062      	str	r2, [r4, #4]
 8004370:	9345      	str	r3, [sp, #276]	; 0x114
 8004372:	e752      	b.n	800421a <__svfiscanf_r+0x6a>
 8004374:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004376:	4621      	mov	r1, r4
 8004378:	4630      	mov	r0, r6
 800437a:	4798      	blx	r3
 800437c:	2800      	cmp	r0, #0
 800437e:	d0eb      	beq.n	8004358 <__svfiscanf_r+0x1a8>
 8004380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	f140 80a2 	bpl.w	80044cc <__svfiscanf_r+0x31c>
 8004388:	9844      	ldr	r0, [sp, #272]	; 0x110
 800438a:	2800      	cmp	r0, #0
 800438c:	d066      	beq.n	800445c <__svfiscanf_r+0x2ac>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004394:	bf18      	it	ne
 8004396:	f04f 30ff 	movne.w	r0, #4294967295
 800439a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80043a4:	f042 0220 	orr.w	r2, r2, #32
 80043a8:	9241      	str	r2, [sp, #260]	; 0x104
 80043aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	9241      	str	r2, [sp, #260]	; 0x104
 80043b2:	2210      	movs	r2, #16
 80043b4:	2b6f      	cmp	r3, #111	; 0x6f
 80043b6:	9242      	str	r2, [sp, #264]	; 0x108
 80043b8:	bf34      	ite	cc
 80043ba:	2303      	movcc	r3, #3
 80043bc:	2304      	movcs	r3, #4
 80043be:	9347      	str	r3, [sp, #284]	; 0x11c
 80043c0:	6863      	ldr	r3, [r4, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	dd4d      	ble.n	8004462 <__svfiscanf_r+0x2b2>
 80043c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043c8:	065b      	lsls	r3, r3, #25
 80043ca:	d404      	bmi.n	80043d6 <__svfiscanf_r+0x226>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	5cba      	ldrb	r2, [r7, r2]
 80043d2:	0710      	lsls	r0, r2, #28
 80043d4:	d44c      	bmi.n	8004470 <__svfiscanf_r+0x2c0>
 80043d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80043d8:	2b02      	cmp	r3, #2
 80043da:	dc63      	bgt.n	80044a4 <__svfiscanf_r+0x2f4>
 80043dc:	466b      	mov	r3, sp
 80043de:	4622      	mov	r2, r4
 80043e0:	a941      	add	r1, sp, #260	; 0x104
 80043e2:	4630      	mov	r0, r6
 80043e4:	f000 f8b0 	bl	8004548 <_scanf_chars>
 80043e8:	2801      	cmp	r0, #1
 80043ea:	d077      	beq.n	80044dc <__svfiscanf_r+0x32c>
 80043ec:	2802      	cmp	r0, #2
 80043ee:	f47f af14 	bne.w	800421a <__svfiscanf_r+0x6a>
 80043f2:	e7c5      	b.n	8004380 <__svfiscanf_r+0x1d0>
 80043f4:	220a      	movs	r2, #10
 80043f6:	e7dd      	b.n	80043b4 <__svfiscanf_r+0x204>
 80043f8:	2300      	movs	r3, #0
 80043fa:	9342      	str	r3, [sp, #264]	; 0x108
 80043fc:	2303      	movs	r3, #3
 80043fe:	e7de      	b.n	80043be <__svfiscanf_r+0x20e>
 8004400:	2308      	movs	r3, #8
 8004402:	9342      	str	r3, [sp, #264]	; 0x108
 8004404:	2304      	movs	r3, #4
 8004406:	e7da      	b.n	80043be <__svfiscanf_r+0x20e>
 8004408:	4629      	mov	r1, r5
 800440a:	4640      	mov	r0, r8
 800440c:	f000 fab8 	bl	8004980 <__sccl>
 8004410:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004416:	9341      	str	r3, [sp, #260]	; 0x104
 8004418:	4605      	mov	r5, r0
 800441a:	2301      	movs	r3, #1
 800441c:	e7cf      	b.n	80043be <__svfiscanf_r+0x20e>
 800441e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	9341      	str	r3, [sp, #260]	; 0x104
 8004426:	2300      	movs	r3, #0
 8004428:	e7c9      	b.n	80043be <__svfiscanf_r+0x20e>
 800442a:	2302      	movs	r3, #2
 800442c:	e7c7      	b.n	80043be <__svfiscanf_r+0x20e>
 800442e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004430:	06c3      	lsls	r3, r0, #27
 8004432:	f53f aef2 	bmi.w	800421a <__svfiscanf_r+0x6a>
 8004436:	9b00      	ldr	r3, [sp, #0]
 8004438:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800443a:	1d19      	adds	r1, r3, #4
 800443c:	9100      	str	r1, [sp, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	07c0      	lsls	r0, r0, #31
 8004442:	bf4c      	ite	mi
 8004444:	801a      	strhmi	r2, [r3, #0]
 8004446:	601a      	strpl	r2, [r3, #0]
 8004448:	e6e7      	b.n	800421a <__svfiscanf_r+0x6a>
 800444a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800444c:	07d8      	lsls	r0, r3, #31
 800444e:	d405      	bmi.n	800445c <__svfiscanf_r+0x2ac>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	0599      	lsls	r1, r3, #22
 8004454:	d402      	bmi.n	800445c <__svfiscanf_r+0x2ac>
 8004456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004458:	f7ff faa4 	bl	80039a4 <__retarget_lock_release_recursive>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e79b      	b.n	800439a <__svfiscanf_r+0x1ea>
 8004462:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004464:	4621      	mov	r1, r4
 8004466:	4630      	mov	r0, r6
 8004468:	4798      	blx	r3
 800446a:	2800      	cmp	r0, #0
 800446c:	d0ab      	beq.n	80043c6 <__svfiscanf_r+0x216>
 800446e:	e787      	b.n	8004380 <__svfiscanf_r+0x1d0>
 8004470:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004472:	3201      	adds	r2, #1
 8004474:	9245      	str	r2, [sp, #276]	; 0x114
 8004476:	6862      	ldr	r2, [r4, #4]
 8004478:	3a01      	subs	r2, #1
 800447a:	2a00      	cmp	r2, #0
 800447c:	6062      	str	r2, [r4, #4]
 800447e:	dd02      	ble.n	8004486 <__svfiscanf_r+0x2d6>
 8004480:	3301      	adds	r3, #1
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	e7a2      	b.n	80043cc <__svfiscanf_r+0x21c>
 8004486:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004488:	4621      	mov	r1, r4
 800448a:	4630      	mov	r0, r6
 800448c:	4798      	blx	r3
 800448e:	2800      	cmp	r0, #0
 8004490:	d09c      	beq.n	80043cc <__svfiscanf_r+0x21c>
 8004492:	e775      	b.n	8004380 <__svfiscanf_r+0x1d0>
 8004494:	08004cf9 	.word	0x08004cf9
 8004498:	080047f5 	.word	0x080047f5
 800449c:	080050ff 	.word	0x080050ff
 80044a0:	080050b6 	.word	0x080050b6
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	dc06      	bgt.n	80044b6 <__svfiscanf_r+0x306>
 80044a8:	466b      	mov	r3, sp
 80044aa:	4622      	mov	r2, r4
 80044ac:	a941      	add	r1, sp, #260	; 0x104
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 f8a2 	bl	80045f8 <_scanf_i>
 80044b4:	e798      	b.n	80043e8 <__svfiscanf_r+0x238>
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <__svfiscanf_r+0x344>)
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f43f aeae 	beq.w	800421a <__svfiscanf_r+0x6a>
 80044be:	466b      	mov	r3, sp
 80044c0:	4622      	mov	r2, r4
 80044c2:	a941      	add	r1, sp, #260	; 0x104
 80044c4:	4630      	mov	r0, r6
 80044c6:	f3af 8000 	nop.w
 80044ca:	e78d      	b.n	80043e8 <__svfiscanf_r+0x238>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	0599      	lsls	r1, r3, #22
 80044d0:	f53f af5a 	bmi.w	8004388 <__svfiscanf_r+0x1d8>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f7ff fa65 	bl	80039a4 <__retarget_lock_release_recursive>
 80044da:	e755      	b.n	8004388 <__svfiscanf_r+0x1d8>
 80044dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044de:	07da      	lsls	r2, r3, #31
 80044e0:	d405      	bmi.n	80044ee <__svfiscanf_r+0x33e>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	059b      	lsls	r3, r3, #22
 80044e6:	d402      	bmi.n	80044ee <__svfiscanf_r+0x33e>
 80044e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ea:	f7ff fa5b 	bl	80039a4 <__retarget_lock_release_recursive>
 80044ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80044f0:	e753      	b.n	800439a <__svfiscanf_r+0x1ea>
 80044f2:	bf00      	nop
 80044f4:	00000000 	.word	0x00000000

080044f8 <_vfiscanf_r>:
 80044f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	4605      	mov	r5, r0
 80044fe:	b138      	cbz	r0, 8004510 <_vfiscanf_r+0x18>
 8004500:	6981      	ldr	r1, [r0, #24]
 8004502:	b929      	cbnz	r1, 8004510 <_vfiscanf_r+0x18>
 8004504:	e9cd 2300 	strd	r2, r3, [sp]
 8004508:	f7ff f950 	bl	80037ac <__sinit>
 800450c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004510:	490a      	ldr	r1, [pc, #40]	; (800453c <_vfiscanf_r+0x44>)
 8004512:	428c      	cmp	r4, r1
 8004514:	d107      	bne.n	8004526 <_vfiscanf_r+0x2e>
 8004516:	686c      	ldr	r4, [r5, #4]
 8004518:	4621      	mov	r1, r4
 800451a:	4628      	mov	r0, r5
 800451c:	b003      	add	sp, #12
 800451e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004522:	f7ff be45 	b.w	80041b0 <__svfiscanf_r>
 8004526:	4906      	ldr	r1, [pc, #24]	; (8004540 <_vfiscanf_r+0x48>)
 8004528:	428c      	cmp	r4, r1
 800452a:	d101      	bne.n	8004530 <_vfiscanf_r+0x38>
 800452c:	68ac      	ldr	r4, [r5, #8]
 800452e:	e7f3      	b.n	8004518 <_vfiscanf_r+0x20>
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <_vfiscanf_r+0x4c>)
 8004532:	428c      	cmp	r4, r1
 8004534:	bf08      	it	eq
 8004536:	68ec      	ldreq	r4, [r5, #12]
 8004538:	e7ee      	b.n	8004518 <_vfiscanf_r+0x20>
 800453a:	bf00      	nop
 800453c:	08005070 	.word	0x08005070
 8004540:	08005090 	.word	0x08005090
 8004544:	08005050 	.word	0x08005050

08004548 <_scanf_chars>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4615      	mov	r5, r2
 800454e:	688a      	ldr	r2, [r1, #8]
 8004550:	4680      	mov	r8, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b932      	cbnz	r2, 8004564 <_scanf_chars+0x1c>
 8004556:	698a      	ldr	r2, [r1, #24]
 8004558:	2a00      	cmp	r2, #0
 800455a:	bf0c      	ite	eq
 800455c:	2201      	moveq	r2, #1
 800455e:	f04f 32ff 	movne.w	r2, #4294967295
 8004562:	608a      	str	r2, [r1, #8]
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80045f4 <_scanf_chars+0xac>
 800456a:	06d1      	lsls	r1, r2, #27
 800456c:	bf5f      	itttt	pl
 800456e:	681a      	ldrpl	r2, [r3, #0]
 8004570:	1d11      	addpl	r1, r2, #4
 8004572:	6019      	strpl	r1, [r3, #0]
 8004574:	6816      	ldrpl	r6, [r2, #0]
 8004576:	2700      	movs	r7, #0
 8004578:	69a0      	ldr	r0, [r4, #24]
 800457a:	b188      	cbz	r0, 80045a0 <_scanf_chars+0x58>
 800457c:	2801      	cmp	r0, #1
 800457e:	d107      	bne.n	8004590 <_scanf_chars+0x48>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	6963      	ldr	r3, [r4, #20]
 8004586:	5c9b      	ldrb	r3, [r3, r2]
 8004588:	b953      	cbnz	r3, 80045a0 <_scanf_chars+0x58>
 800458a:	bb27      	cbnz	r7, 80045d6 <_scanf_chars+0x8e>
 800458c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004590:	2802      	cmp	r0, #2
 8004592:	d120      	bne.n	80045d6 <_scanf_chars+0x8e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f813 3009 	ldrb.w	r3, [r3, r9]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	d41a      	bmi.n	80045d6 <_scanf_chars+0x8e>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	06da      	lsls	r2, r3, #27
 80045a4:	bf5e      	ittt	pl
 80045a6:	682b      	ldrpl	r3, [r5, #0]
 80045a8:	781b      	ldrbpl	r3, [r3, #0]
 80045aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80045ae:	682a      	ldr	r2, [r5, #0]
 80045b0:	686b      	ldr	r3, [r5, #4]
 80045b2:	3201      	adds	r2, #1
 80045b4:	602a      	str	r2, [r5, #0]
 80045b6:	68a2      	ldr	r2, [r4, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	3a01      	subs	r2, #1
 80045bc:	606b      	str	r3, [r5, #4]
 80045be:	3701      	adds	r7, #1
 80045c0:	60a2      	str	r2, [r4, #8]
 80045c2:	b142      	cbz	r2, 80045d6 <_scanf_chars+0x8e>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dcd7      	bgt.n	8004578 <_scanf_chars+0x30>
 80045c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045cc:	4629      	mov	r1, r5
 80045ce:	4640      	mov	r0, r8
 80045d0:	4798      	blx	r3
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d0d0      	beq.n	8004578 <_scanf_chars+0x30>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f013 0310 	ands.w	r3, r3, #16
 80045dc:	d105      	bne.n	80045ea <_scanf_chars+0xa2>
 80045de:	68e2      	ldr	r2, [r4, #12]
 80045e0:	3201      	adds	r2, #1
 80045e2:	60e2      	str	r2, [r4, #12]
 80045e4:	69a2      	ldr	r2, [r4, #24]
 80045e6:	b102      	cbz	r2, 80045ea <_scanf_chars+0xa2>
 80045e8:	7033      	strb	r3, [r6, #0]
 80045ea:	6923      	ldr	r3, [r4, #16]
 80045ec:	441f      	add	r7, r3
 80045ee:	6127      	str	r7, [r4, #16]
 80045f0:	2000      	movs	r0, #0
 80045f2:	e7cb      	b.n	800458c <_scanf_chars+0x44>
 80045f4:	080050ff 	.word	0x080050ff

080045f8 <_scanf_i>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	4698      	mov	r8, r3
 80045fe:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <_scanf_i+0x1d8>)
 8004600:	460c      	mov	r4, r1
 8004602:	4682      	mov	sl, r0
 8004604:	4616      	mov	r6, r2
 8004606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800460a:	b087      	sub	sp, #28
 800460c:	ab03      	add	r3, sp, #12
 800460e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004612:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <_scanf_i+0x1dc>)
 8004614:	69a1      	ldr	r1, [r4, #24]
 8004616:	4a70      	ldr	r2, [pc, #448]	; (80047d8 <_scanf_i+0x1e0>)
 8004618:	2903      	cmp	r1, #3
 800461a:	bf18      	it	ne
 800461c:	461a      	movne	r2, r3
 800461e:	68a3      	ldr	r3, [r4, #8]
 8004620:	9201      	str	r2, [sp, #4]
 8004622:	1e5a      	subs	r2, r3, #1
 8004624:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004628:	bf88      	it	hi
 800462a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800462e:	4627      	mov	r7, r4
 8004630:	bf82      	ittt	hi
 8004632:	eb03 0905 	addhi.w	r9, r3, r5
 8004636:	f240 135d 	movwhi	r3, #349	; 0x15d
 800463a:	60a3      	strhi	r3, [r4, #8]
 800463c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004640:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004644:	bf98      	it	ls
 8004646:	f04f 0900 	movls.w	r9, #0
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	463d      	mov	r5, r7
 800464e:	f04f 0b00 	mov.w	fp, #0
 8004652:	6831      	ldr	r1, [r6, #0]
 8004654:	ab03      	add	r3, sp, #12
 8004656:	7809      	ldrb	r1, [r1, #0]
 8004658:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800465c:	2202      	movs	r2, #2
 800465e:	f7fb fe3f 	bl	80002e0 <memchr>
 8004662:	b328      	cbz	r0, 80046b0 <_scanf_i+0xb8>
 8004664:	f1bb 0f01 	cmp.w	fp, #1
 8004668:	d159      	bne.n	800471e <_scanf_i+0x126>
 800466a:	6862      	ldr	r2, [r4, #4]
 800466c:	b92a      	cbnz	r2, 800467a <_scanf_i+0x82>
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	2308      	movs	r3, #8
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	68a2      	ldr	r2, [r4, #8]
 8004684:	1e51      	subs	r1, r2, #1
 8004686:	60a1      	str	r1, [r4, #8]
 8004688:	b192      	cbz	r2, 80046b0 <_scanf_i+0xb8>
 800468a:	6832      	ldr	r2, [r6, #0]
 800468c:	1c51      	adds	r1, r2, #1
 800468e:	6031      	str	r1, [r6, #0]
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	f805 2b01 	strb.w	r2, [r5], #1
 8004696:	6872      	ldr	r2, [r6, #4]
 8004698:	3a01      	subs	r2, #1
 800469a:	2a00      	cmp	r2, #0
 800469c:	6072      	str	r2, [r6, #4]
 800469e:	dc07      	bgt.n	80046b0 <_scanf_i+0xb8>
 80046a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80046a4:	4631      	mov	r1, r6
 80046a6:	4650      	mov	r0, sl
 80046a8:	4790      	blx	r2
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f040 8085 	bne.w	80047ba <_scanf_i+0x1c2>
 80046b0:	f10b 0b01 	add.w	fp, fp, #1
 80046b4:	f1bb 0f03 	cmp.w	fp, #3
 80046b8:	d1cb      	bne.n	8004652 <_scanf_i+0x5a>
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	b90b      	cbnz	r3, 80046c2 <_scanf_i+0xca>
 80046be:	230a      	movs	r3, #10
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	4945      	ldr	r1, [pc, #276]	; (80047dc <_scanf_i+0x1e4>)
 80046c6:	6960      	ldr	r0, [r4, #20]
 80046c8:	1ac9      	subs	r1, r1, r3
 80046ca:	f000 f959 	bl	8004980 <__sccl>
 80046ce:	f04f 0b00 	mov.w	fp, #0
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03d      	beq.n	8004756 <_scanf_i+0x15e>
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	6960      	ldr	r0, [r4, #20]
 80046de:	f891 c000 	ldrb.w	ip, [r1]
 80046e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d035      	beq.n	8004756 <_scanf_i+0x15e>
 80046ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80046ee:	d124      	bne.n	800473a <_scanf_i+0x142>
 80046f0:	0510      	lsls	r0, r2, #20
 80046f2:	d522      	bpl.n	800473a <_scanf_i+0x142>
 80046f4:	f10b 0b01 	add.w	fp, fp, #1
 80046f8:	f1b9 0f00 	cmp.w	r9, #0
 80046fc:	d003      	beq.n	8004706 <_scanf_i+0x10e>
 80046fe:	3301      	adds	r3, #1
 8004700:	f109 39ff 	add.w	r9, r9, #4294967295
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	6873      	ldr	r3, [r6, #4]
 8004708:	3b01      	subs	r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	6073      	str	r3, [r6, #4]
 800470e:	dd1b      	ble.n	8004748 <_scanf_i+0x150>
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	e7d9      	b.n	80046d2 <_scanf_i+0xda>
 800471e:	f1bb 0f02 	cmp.w	fp, #2
 8004722:	d1ae      	bne.n	8004682 <_scanf_i+0x8a>
 8004724:	6822      	ldr	r2, [r4, #0]
 8004726:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800472a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800472e:	d1bf      	bne.n	80046b0 <_scanf_i+0xb8>
 8004730:	2310      	movs	r3, #16
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	e7a2      	b.n	8004680 <_scanf_i+0x88>
 800473a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800473e:	6022      	str	r2, [r4, #0]
 8004740:	780b      	ldrb	r3, [r1, #0]
 8004742:	f805 3b01 	strb.w	r3, [r5], #1
 8004746:	e7de      	b.n	8004706 <_scanf_i+0x10e>
 8004748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800474c:	4631      	mov	r1, r6
 800474e:	4650      	mov	r0, sl
 8004750:	4798      	blx	r3
 8004752:	2800      	cmp	r0, #0
 8004754:	d0df      	beq.n	8004716 <_scanf_i+0x11e>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	05d9      	lsls	r1, r3, #23
 800475a:	d50d      	bpl.n	8004778 <_scanf_i+0x180>
 800475c:	42bd      	cmp	r5, r7
 800475e:	d909      	bls.n	8004774 <_scanf_i+0x17c>
 8004760:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004768:	4632      	mov	r2, r6
 800476a:	4650      	mov	r0, sl
 800476c:	4798      	blx	r3
 800476e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004772:	464d      	mov	r5, r9
 8004774:	42bd      	cmp	r5, r7
 8004776:	d028      	beq.n	80047ca <_scanf_i+0x1d2>
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	f012 0210 	ands.w	r2, r2, #16
 800477e:	d113      	bne.n	80047a8 <_scanf_i+0x1b0>
 8004780:	702a      	strb	r2, [r5, #0]
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	9e01      	ldr	r6, [sp, #4]
 8004786:	4639      	mov	r1, r7
 8004788:	4650      	mov	r0, sl
 800478a:	47b0      	blx	r6
 800478c:	f8d8 3000 	ldr.w	r3, [r8]
 8004790:	6821      	ldr	r1, [r4, #0]
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	f8c8 2000 	str.w	r2, [r8]
 8004798:	f011 0f20 	tst.w	r1, #32
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	d00f      	beq.n	80047c0 <_scanf_i+0x1c8>
 80047a0:	6018      	str	r0, [r3, #0]
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60e3      	str	r3, [r4, #12]
 80047a8:	1bed      	subs	r5, r5, r7
 80047aa:	44ab      	add	fp, r5
 80047ac:	6925      	ldr	r5, [r4, #16]
 80047ae:	445d      	add	r5, fp
 80047b0:	6125      	str	r5, [r4, #16]
 80047b2:	2000      	movs	r0, #0
 80047b4:	b007      	add	sp, #28
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	f04f 0b00 	mov.w	fp, #0
 80047be:	e7ca      	b.n	8004756 <_scanf_i+0x15e>
 80047c0:	07ca      	lsls	r2, r1, #31
 80047c2:	bf4c      	ite	mi
 80047c4:	8018      	strhmi	r0, [r3, #0]
 80047c6:	6018      	strpl	r0, [r3, #0]
 80047c8:	e7eb      	b.n	80047a2 <_scanf_i+0x1aa>
 80047ca:	2001      	movs	r0, #1
 80047cc:	e7f2      	b.n	80047b4 <_scanf_i+0x1bc>
 80047ce:	bf00      	nop
 80047d0:	08004ff8 	.word	0x08004ff8
 80047d4:	08004c81 	.word	0x08004c81
 80047d8:	08004b85 	.word	0x08004b85
 80047dc:	080050fc 	.word	0x080050fc

080047e0 <lflush>:
 80047e0:	8983      	ldrh	r3, [r0, #12]
 80047e2:	f003 0309 	and.w	r3, r3, #9
 80047e6:	2b09      	cmp	r3, #9
 80047e8:	d101      	bne.n	80047ee <lflush+0xe>
 80047ea:	f7fe bf75 	b.w	80036d8 <fflush>
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr
	...

080047f4 <__srefill_r>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	460c      	mov	r4, r1
 80047f8:	4605      	mov	r5, r0
 80047fa:	b118      	cbz	r0, 8004804 <__srefill_r+0x10>
 80047fc:	6983      	ldr	r3, [r0, #24]
 80047fe:	b90b      	cbnz	r3, 8004804 <__srefill_r+0x10>
 8004800:	f7fe ffd4 	bl	80037ac <__sinit>
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <__srefill_r+0x100>)
 8004806:	429c      	cmp	r4, r3
 8004808:	d10a      	bne.n	8004820 <__srefill_r+0x2c>
 800480a:	686c      	ldr	r4, [r5, #4]
 800480c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004810:	2300      	movs	r3, #0
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	069e      	lsls	r6, r3, #26
 8004818:	d50c      	bpl.n	8004834 <__srefill_r+0x40>
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	e066      	b.n	80048ee <__srefill_r+0xfa>
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <__srefill_r+0x104>)
 8004822:	429c      	cmp	r4, r3
 8004824:	d101      	bne.n	800482a <__srefill_r+0x36>
 8004826:	68ac      	ldr	r4, [r5, #8]
 8004828:	e7f0      	b.n	800480c <__srefill_r+0x18>
 800482a:	4b34      	ldr	r3, [pc, #208]	; (80048fc <__srefill_r+0x108>)
 800482c:	429c      	cmp	r4, r3
 800482e:	bf08      	it	eq
 8004830:	68ec      	ldreq	r4, [r5, #12]
 8004832:	e7eb      	b.n	800480c <__srefill_r+0x18>
 8004834:	0758      	lsls	r0, r3, #29
 8004836:	d448      	bmi.n	80048ca <__srefill_r+0xd6>
 8004838:	06d9      	lsls	r1, r3, #27
 800483a:	d405      	bmi.n	8004848 <__srefill_r+0x54>
 800483c:	2309      	movs	r3, #9
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	e7e8      	b.n	800481a <__srefill_r+0x26>
 8004848:	071a      	lsls	r2, r3, #28
 800484a:	d50b      	bpl.n	8004864 <__srefill_r+0x70>
 800484c:	4621      	mov	r1, r4
 800484e:	4628      	mov	r0, r5
 8004850:	f7fe ff06 	bl	8003660 <_fflush_r>
 8004854:	2800      	cmp	r0, #0
 8004856:	d1e0      	bne.n	800481a <__srefill_r+0x26>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	60a0      	str	r0, [r4, #8]
 800485c:	f023 0308 	bic.w	r3, r3, #8
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	61a0      	str	r0, [r4, #24]
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	81a3      	strh	r3, [r4, #12]
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	b91b      	cbnz	r3, 8004878 <__srefill_r+0x84>
 8004870:	4621      	mov	r1, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f7ff f8bc 	bl	80039f0 <__smakebuf_r>
 8004878:	89a6      	ldrh	r6, [r4, #12]
 800487a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800487e:	07b3      	lsls	r3, r6, #30
 8004880:	d00f      	beq.n	80048a2 <__srefill_r+0xae>
 8004882:	2301      	movs	r3, #1
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <__srefill_r+0x10c>)
 8004888:	491e      	ldr	r1, [pc, #120]	; (8004904 <__srefill_r+0x110>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f006 0609 	and.w	r6, r6, #9
 8004890:	f7ff f80a 	bl	80038a8 <_fwalk>
 8004894:	2e09      	cmp	r6, #9
 8004896:	81a7      	strh	r7, [r4, #12]
 8004898:	d103      	bne.n	80048a2 <__srefill_r+0xae>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f7fe fe59 	bl	8003554 <__sflush_r>
 80048a2:	6922      	ldr	r2, [r4, #16]
 80048a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048a6:	6963      	ldr	r3, [r4, #20]
 80048a8:	6a21      	ldr	r1, [r4, #32]
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b0      	blx	r6
 80048b0:	2800      	cmp	r0, #0
 80048b2:	6060      	str	r0, [r4, #4]
 80048b4:	dc1c      	bgt.n	80048f0 <__srefill_r+0xfc>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	bf17      	itett	ne
 80048bc:	2200      	movne	r2, #0
 80048be:	f043 0320 	orreq.w	r3, r3, #32
 80048c2:	6062      	strne	r2, [r4, #4]
 80048c4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80048c8:	e7bc      	b.n	8004844 <__srefill_r+0x50>
 80048ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d0cd      	beq.n	800486c <__srefill_r+0x78>
 80048d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d002      	beq.n	80048de <__srefill_r+0xea>
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff f8d1 	bl	8003a80 <_free_r>
 80048de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	2000      	movs	r0, #0
 80048e4:	6360      	str	r0, [r4, #52]	; 0x34
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0c0      	beq.n	800486c <__srefill_r+0x78>
 80048ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	2000      	movs	r0, #0
 80048f2:	e7fc      	b.n	80048ee <__srefill_r+0xfa>
 80048f4:	08005070 	.word	0x08005070
 80048f8:	08005090 	.word	0x08005090
 80048fc:	08005050 	.word	0x08005050
 8004900:	0800504c 	.word	0x0800504c
 8004904:	080047e1 	.word	0x080047e1

08004908 <__srget_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	460c      	mov	r4, r1
 800490c:	4605      	mov	r5, r0
 800490e:	b118      	cbz	r0, 8004918 <__srget_r+0x10>
 8004910:	6983      	ldr	r3, [r0, #24]
 8004912:	b90b      	cbnz	r3, 8004918 <__srget_r+0x10>
 8004914:	f7fe ff4a 	bl	80037ac <__sinit>
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <__srget_r+0x4c>)
 800491a:	429c      	cmp	r4, r3
 800491c:	d10d      	bne.n	800493a <__srget_r+0x32>
 800491e:	686c      	ldr	r4, [r5, #4]
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f7ff ff66 	bl	80047f4 <__srefill_r>
 8004928:	b988      	cbnz	r0, 800494e <__srget_r+0x46>
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	3b01      	subs	r3, #1
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	6022      	str	r2, [r4, #0]
 8004936:	7818      	ldrb	r0, [r3, #0]
 8004938:	bd38      	pop	{r3, r4, r5, pc}
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <__srget_r+0x50>)
 800493c:	429c      	cmp	r4, r3
 800493e:	d101      	bne.n	8004944 <__srget_r+0x3c>
 8004940:	68ac      	ldr	r4, [r5, #8]
 8004942:	e7ed      	b.n	8004920 <__srget_r+0x18>
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <__srget_r+0x54>)
 8004946:	429c      	cmp	r4, r3
 8004948:	bf08      	it	eq
 800494a:	68ec      	ldreq	r4, [r5, #12]
 800494c:	e7e8      	b.n	8004920 <__srget_r+0x18>
 800494e:	f04f 30ff 	mov.w	r0, #4294967295
 8004952:	e7f1      	b.n	8004938 <__srget_r+0x30>
 8004954:	08005070 	.word	0x08005070
 8004958:	08005090 	.word	0x08005090
 800495c:	08005050 	.word	0x08005050

08004960 <_sbrk_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4d06      	ldr	r5, [pc, #24]	; (800497c <_sbrk_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4604      	mov	r4, r0
 8004968:	4608      	mov	r0, r1
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fc f938 	bl	8000be0 <_sbrk>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_sbrk_r+0x1a>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_sbrk_r+0x1a>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20000238 	.word	0x20000238

08004980 <__sccl>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	780b      	ldrb	r3, [r1, #0]
 8004984:	4604      	mov	r4, r0
 8004986:	2b5e      	cmp	r3, #94	; 0x5e
 8004988:	bf0b      	itete	eq
 800498a:	784b      	ldrbeq	r3, [r1, #1]
 800498c:	1c48      	addne	r0, r1, #1
 800498e:	1c88      	addeq	r0, r1, #2
 8004990:	2200      	movne	r2, #0
 8004992:	bf08      	it	eq
 8004994:	2201      	moveq	r2, #1
 8004996:	1e61      	subs	r1, r4, #1
 8004998:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800499c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80049a0:	42a9      	cmp	r1, r5
 80049a2:	d1fb      	bne.n	800499c <__sccl+0x1c>
 80049a4:	b90b      	cbnz	r3, 80049aa <__sccl+0x2a>
 80049a6:	3801      	subs	r0, #1
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	f082 0101 	eor.w	r1, r2, #1
 80049ae:	54e1      	strb	r1, [r4, r3]
 80049b0:	1c42      	adds	r2, r0, #1
 80049b2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80049b6:	2d2d      	cmp	r5, #45	; 0x2d
 80049b8:	f102 36ff 	add.w	r6, r2, #4294967295
 80049bc:	4610      	mov	r0, r2
 80049be:	d006      	beq.n	80049ce <__sccl+0x4e>
 80049c0:	2d5d      	cmp	r5, #93	; 0x5d
 80049c2:	d0f1      	beq.n	80049a8 <__sccl+0x28>
 80049c4:	b90d      	cbnz	r5, 80049ca <__sccl+0x4a>
 80049c6:	4630      	mov	r0, r6
 80049c8:	e7ee      	b.n	80049a8 <__sccl+0x28>
 80049ca:	462b      	mov	r3, r5
 80049cc:	e7ef      	b.n	80049ae <__sccl+0x2e>
 80049ce:	7816      	ldrb	r6, [r2, #0]
 80049d0:	2e5d      	cmp	r6, #93	; 0x5d
 80049d2:	d0fa      	beq.n	80049ca <__sccl+0x4a>
 80049d4:	42b3      	cmp	r3, r6
 80049d6:	dcf8      	bgt.n	80049ca <__sccl+0x4a>
 80049d8:	4618      	mov	r0, r3
 80049da:	3001      	adds	r0, #1
 80049dc:	4286      	cmp	r6, r0
 80049de:	5421      	strb	r1, [r4, r0]
 80049e0:	dcfb      	bgt.n	80049da <__sccl+0x5a>
 80049e2:	43d8      	mvns	r0, r3
 80049e4:	4430      	add	r0, r6
 80049e6:	1c5d      	adds	r5, r3, #1
 80049e8:	42b3      	cmp	r3, r6
 80049ea:	bfa8      	it	ge
 80049ec:	2000      	movge	r0, #0
 80049ee:	182b      	adds	r3, r5, r0
 80049f0:	3202      	adds	r2, #2
 80049f2:	e7de      	b.n	80049b2 <__sccl+0x32>

080049f4 <__sread>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	460c      	mov	r4, r1
 80049f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fc:	f000 faaa 	bl	8004f54 <_read_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	bfab      	itete	ge
 8004a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a06:	89a3      	ldrhlt	r3, [r4, #12]
 8004a08:	181b      	addge	r3, r3, r0
 8004a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a0e:	bfac      	ite	ge
 8004a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a12:	81a3      	strhlt	r3, [r4, #12]
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <__swrite>:
 8004a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	898b      	ldrh	r3, [r1, #12]
 8004a1e:	05db      	lsls	r3, r3, #23
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4616      	mov	r6, r2
 8004a26:	d505      	bpl.n	8004a34 <__swrite+0x1e>
 8004a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f000 fa3e 	bl	8004eb0 <_lseek_r>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	4628      	mov	r0, r5
 8004a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	f000 b9ed 	b.w	8004e28 <_write_r>

08004a4e <__sseek>:
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	460c      	mov	r4, r1
 8004a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a56:	f000 fa2b 	bl	8004eb0 <_lseek_r>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	bf15      	itete	ne
 8004a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a6a:	81a3      	strheq	r3, [r4, #12]
 8004a6c:	bf18      	it	ne
 8004a6e:	81a3      	strhne	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__sclose>:
 8004a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a76:	f000 b9e9 	b.w	8004e4c <_close_r>
	...

08004a7c <_strtol_l.isra.0>:
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a82:	d001      	beq.n	8004a88 <_strtol_l.isra.0+0xc>
 8004a84:	2b24      	cmp	r3, #36	; 0x24
 8004a86:	d906      	bls.n	8004a96 <_strtol_l.isra.0+0x1a>
 8004a88:	f7fe faf4 	bl	8003074 <__errno>
 8004a8c:	2316      	movs	r3, #22
 8004a8e:	6003      	str	r3, [r0, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	4f3a      	ldr	r7, [pc, #232]	; (8004b80 <_strtol_l.isra.0+0x104>)
 8004a98:	468e      	mov	lr, r1
 8004a9a:	4676      	mov	r6, lr
 8004a9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004aa0:	5de5      	ldrb	r5, [r4, r7]
 8004aa2:	f015 0508 	ands.w	r5, r5, #8
 8004aa6:	d1f8      	bne.n	8004a9a <_strtol_l.isra.0+0x1e>
 8004aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8004aaa:	d134      	bne.n	8004b16 <_strtol_l.isra.0+0x9a>
 8004aac:	f89e 4000 	ldrb.w	r4, [lr]
 8004ab0:	f04f 0801 	mov.w	r8, #1
 8004ab4:	f106 0e02 	add.w	lr, r6, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05c      	beq.n	8004b76 <_strtol_l.isra.0+0xfa>
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d10c      	bne.n	8004ada <_strtol_l.isra.0+0x5e>
 8004ac0:	2c30      	cmp	r4, #48	; 0x30
 8004ac2:	d10a      	bne.n	8004ada <_strtol_l.isra.0+0x5e>
 8004ac4:	f89e 4000 	ldrb.w	r4, [lr]
 8004ac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004acc:	2c58      	cmp	r4, #88	; 0x58
 8004ace:	d14d      	bne.n	8004b6c <_strtol_l.isra.0+0xf0>
 8004ad0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f10e 0e02 	add.w	lr, lr, #2
 8004ada:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004ade:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	fbbc f9f3 	udiv	r9, ip, r3
 8004ae8:	4635      	mov	r5, r6
 8004aea:	fb03 ca19 	mls	sl, r3, r9, ip
 8004aee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004af2:	2f09      	cmp	r7, #9
 8004af4:	d818      	bhi.n	8004b28 <_strtol_l.isra.0+0xac>
 8004af6:	463c      	mov	r4, r7
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	dd24      	ble.n	8004b46 <_strtol_l.isra.0+0xca>
 8004afc:	2e00      	cmp	r6, #0
 8004afe:	db1f      	blt.n	8004b40 <_strtol_l.isra.0+0xc4>
 8004b00:	45a9      	cmp	r9, r5
 8004b02:	d31d      	bcc.n	8004b40 <_strtol_l.isra.0+0xc4>
 8004b04:	d101      	bne.n	8004b0a <_strtol_l.isra.0+0x8e>
 8004b06:	45a2      	cmp	sl, r4
 8004b08:	db1a      	blt.n	8004b40 <_strtol_l.isra.0+0xc4>
 8004b0a:	fb05 4503 	mla	r5, r5, r3, r4
 8004b0e:	2601      	movs	r6, #1
 8004b10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004b14:	e7eb      	b.n	8004aee <_strtol_l.isra.0+0x72>
 8004b16:	2c2b      	cmp	r4, #43	; 0x2b
 8004b18:	bf08      	it	eq
 8004b1a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004b1e:	46a8      	mov	r8, r5
 8004b20:	bf08      	it	eq
 8004b22:	f106 0e02 	addeq.w	lr, r6, #2
 8004b26:	e7c7      	b.n	8004ab8 <_strtol_l.isra.0+0x3c>
 8004b28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004b2c:	2f19      	cmp	r7, #25
 8004b2e:	d801      	bhi.n	8004b34 <_strtol_l.isra.0+0xb8>
 8004b30:	3c37      	subs	r4, #55	; 0x37
 8004b32:	e7e1      	b.n	8004af8 <_strtol_l.isra.0+0x7c>
 8004b34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004b38:	2f19      	cmp	r7, #25
 8004b3a:	d804      	bhi.n	8004b46 <_strtol_l.isra.0+0xca>
 8004b3c:	3c57      	subs	r4, #87	; 0x57
 8004b3e:	e7db      	b.n	8004af8 <_strtol_l.isra.0+0x7c>
 8004b40:	f04f 36ff 	mov.w	r6, #4294967295
 8004b44:	e7e4      	b.n	8004b10 <_strtol_l.isra.0+0x94>
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	da05      	bge.n	8004b56 <_strtol_l.isra.0+0xda>
 8004b4a:	2322      	movs	r3, #34	; 0x22
 8004b4c:	6003      	str	r3, [r0, #0]
 8004b4e:	4665      	mov	r5, ip
 8004b50:	b942      	cbnz	r2, 8004b64 <_strtol_l.isra.0+0xe8>
 8004b52:	4628      	mov	r0, r5
 8004b54:	e79d      	b.n	8004a92 <_strtol_l.isra.0+0x16>
 8004b56:	f1b8 0f00 	cmp.w	r8, #0
 8004b5a:	d000      	beq.n	8004b5e <_strtol_l.isra.0+0xe2>
 8004b5c:	426d      	negs	r5, r5
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d0f7      	beq.n	8004b52 <_strtol_l.isra.0+0xd6>
 8004b62:	b10e      	cbz	r6, 8004b68 <_strtol_l.isra.0+0xec>
 8004b64:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004b68:	6011      	str	r1, [r2, #0]
 8004b6a:	e7f2      	b.n	8004b52 <_strtol_l.isra.0+0xd6>
 8004b6c:	2430      	movs	r4, #48	; 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1b3      	bne.n	8004ada <_strtol_l.isra.0+0x5e>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e7b1      	b.n	8004ada <_strtol_l.isra.0+0x5e>
 8004b76:	2c30      	cmp	r4, #48	; 0x30
 8004b78:	d0a4      	beq.n	8004ac4 <_strtol_l.isra.0+0x48>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	e7ad      	b.n	8004ada <_strtol_l.isra.0+0x5e>
 8004b7e:	bf00      	nop
 8004b80:	080050ff 	.word	0x080050ff

08004b84 <_strtol_r>:
 8004b84:	f7ff bf7a 	b.w	8004a7c <_strtol_l.isra.0>

08004b88 <_strtoul_l.isra.0>:
 8004b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b8c:	4e3b      	ldr	r6, [pc, #236]	; (8004c7c <_strtoul_l.isra.0+0xf4>)
 8004b8e:	4686      	mov	lr, r0
 8004b90:	468c      	mov	ip, r1
 8004b92:	4660      	mov	r0, ip
 8004b94:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004b98:	5da5      	ldrb	r5, [r4, r6]
 8004b9a:	f015 0508 	ands.w	r5, r5, #8
 8004b9e:	d1f8      	bne.n	8004b92 <_strtoul_l.isra.0+0xa>
 8004ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ba2:	d134      	bne.n	8004c0e <_strtoul_l.isra.0+0x86>
 8004ba4:	f89c 4000 	ldrb.w	r4, [ip]
 8004ba8:	f04f 0801 	mov.w	r8, #1
 8004bac:	f100 0c02 	add.w	ip, r0, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05e      	beq.n	8004c72 <_strtoul_l.isra.0+0xea>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d10c      	bne.n	8004bd2 <_strtoul_l.isra.0+0x4a>
 8004bb8:	2c30      	cmp	r4, #48	; 0x30
 8004bba:	d10a      	bne.n	8004bd2 <_strtoul_l.isra.0+0x4a>
 8004bbc:	f89c 0000 	ldrb.w	r0, [ip]
 8004bc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004bc4:	2858      	cmp	r0, #88	; 0x58
 8004bc6:	d14f      	bne.n	8004c68 <_strtoul_l.isra.0+0xe0>
 8004bc8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004bcc:	2310      	movs	r3, #16
 8004bce:	f10c 0c02 	add.w	ip, ip, #2
 8004bd2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	fbb7 f7f3 	udiv	r7, r7, r3
 8004bdc:	fb03 f907 	mul.w	r9, r3, r7
 8004be0:	ea6f 0909 	mvn.w	r9, r9
 8004be4:	4628      	mov	r0, r5
 8004be6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004bea:	2e09      	cmp	r6, #9
 8004bec:	d818      	bhi.n	8004c20 <_strtoul_l.isra.0+0x98>
 8004bee:	4634      	mov	r4, r6
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	dd24      	ble.n	8004c3e <_strtoul_l.isra.0+0xb6>
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	db1f      	blt.n	8004c38 <_strtoul_l.isra.0+0xb0>
 8004bf8:	4287      	cmp	r7, r0
 8004bfa:	d31d      	bcc.n	8004c38 <_strtoul_l.isra.0+0xb0>
 8004bfc:	d101      	bne.n	8004c02 <_strtoul_l.isra.0+0x7a>
 8004bfe:	45a1      	cmp	r9, r4
 8004c00:	db1a      	blt.n	8004c38 <_strtoul_l.isra.0+0xb0>
 8004c02:	fb00 4003 	mla	r0, r0, r3, r4
 8004c06:	2501      	movs	r5, #1
 8004c08:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c0c:	e7eb      	b.n	8004be6 <_strtoul_l.isra.0+0x5e>
 8004c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c10:	bf08      	it	eq
 8004c12:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004c16:	46a8      	mov	r8, r5
 8004c18:	bf08      	it	eq
 8004c1a:	f100 0c02 	addeq.w	ip, r0, #2
 8004c1e:	e7c7      	b.n	8004bb0 <_strtoul_l.isra.0+0x28>
 8004c20:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004c24:	2e19      	cmp	r6, #25
 8004c26:	d801      	bhi.n	8004c2c <_strtoul_l.isra.0+0xa4>
 8004c28:	3c37      	subs	r4, #55	; 0x37
 8004c2a:	e7e1      	b.n	8004bf0 <_strtoul_l.isra.0+0x68>
 8004c2c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004c30:	2e19      	cmp	r6, #25
 8004c32:	d804      	bhi.n	8004c3e <_strtoul_l.isra.0+0xb6>
 8004c34:	3c57      	subs	r4, #87	; 0x57
 8004c36:	e7db      	b.n	8004bf0 <_strtoul_l.isra.0+0x68>
 8004c38:	f04f 35ff 	mov.w	r5, #4294967295
 8004c3c:	e7e4      	b.n	8004c08 <_strtoul_l.isra.0+0x80>
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	da07      	bge.n	8004c52 <_strtoul_l.isra.0+0xca>
 8004c42:	2322      	movs	r3, #34	; 0x22
 8004c44:	f8ce 3000 	str.w	r3, [lr]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	b942      	cbnz	r2, 8004c60 <_strtoul_l.isra.0+0xd8>
 8004c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c52:	f1b8 0f00 	cmp.w	r8, #0
 8004c56:	d000      	beq.n	8004c5a <_strtoul_l.isra.0+0xd2>
 8004c58:	4240      	negs	r0, r0
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d0f7      	beq.n	8004c4e <_strtoul_l.isra.0+0xc6>
 8004c5e:	b10d      	cbz	r5, 8004c64 <_strtoul_l.isra.0+0xdc>
 8004c60:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	e7f2      	b.n	8004c4e <_strtoul_l.isra.0+0xc6>
 8004c68:	2430      	movs	r4, #48	; 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1b1      	bne.n	8004bd2 <_strtoul_l.isra.0+0x4a>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	e7af      	b.n	8004bd2 <_strtoul_l.isra.0+0x4a>
 8004c72:	2c30      	cmp	r4, #48	; 0x30
 8004c74:	d0a2      	beq.n	8004bbc <_strtoul_l.isra.0+0x34>
 8004c76:	230a      	movs	r3, #10
 8004c78:	e7ab      	b.n	8004bd2 <_strtoul_l.isra.0+0x4a>
 8004c7a:	bf00      	nop
 8004c7c:	080050ff 	.word	0x080050ff

08004c80 <_strtoul_r>:
 8004c80:	f7ff bf82 	b.w	8004b88 <_strtoul_l.isra.0>

08004c84 <__submore>:
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	460c      	mov	r4, r1
 8004c8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c90:	4299      	cmp	r1, r3
 8004c92:	d11d      	bne.n	8004cd0 <__submore+0x4c>
 8004c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c98:	f7fe ff42 	bl	8003b20 <_malloc_r>
 8004c9c:	b918      	cbnz	r0, 8004ca6 <__submore+0x22>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004caa:	63a3      	str	r3, [r4, #56]	; 0x38
 8004cac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004cb2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004cb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004cba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004cbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004cc2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004cc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004cca:	6020      	str	r0, [r4, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7e8      	b.n	8004ca2 <__submore+0x1e>
 8004cd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004cd2:	0077      	lsls	r7, r6, #1
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	f000 f917 	bl	8004f08 <_realloc_r>
 8004cda:	4605      	mov	r5, r0
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d0de      	beq.n	8004c9e <__submore+0x1a>
 8004ce0:	eb00 0806 	add.w	r8, r0, r6
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f000 f8f3 	bl	8004ed4 <memcpy>
 8004cee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004cf2:	f8c4 8000 	str.w	r8, [r4]
 8004cf6:	e7e9      	b.n	8004ccc <__submore+0x48>

08004cf8 <_ungetc_r>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	1c4a      	adds	r2, r1, #1
 8004cfe:	4606      	mov	r6, r0
 8004d00:	460d      	mov	r5, r1
 8004d02:	d103      	bne.n	8004d0c <_ungetc_r+0x14>
 8004d04:	f04f 35ff 	mov.w	r5, #4294967295
 8004d08:	4628      	mov	r0, r5
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	b118      	cbz	r0, 8004d16 <_ungetc_r+0x1e>
 8004d0e:	6983      	ldr	r3, [r0, #24]
 8004d10:	b90b      	cbnz	r3, 8004d16 <_ungetc_r+0x1e>
 8004d12:	f7fe fd4b 	bl	80037ac <__sinit>
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <_ungetc_r+0x124>)
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	d11d      	bne.n	8004d58 <_ungetc_r+0x60>
 8004d1c:	6874      	ldr	r4, [r6, #4]
 8004d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d405      	bmi.n	8004d30 <_ungetc_r+0x38>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	0598      	lsls	r0, r3, #22
 8004d28:	d402      	bmi.n	8004d30 <_ungetc_r+0x38>
 8004d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2c:	f7fe fe39 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8004d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d34:	f023 0320 	bic.w	r3, r3, #32
 8004d38:	0759      	lsls	r1, r3, #29
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	d42d      	bmi.n	8004d9c <_ungetc_r+0xa4>
 8004d40:	06d3      	lsls	r3, r2, #27
 8004d42:	d413      	bmi.n	8004d6c <_ungetc_r+0x74>
 8004d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d46:	07dd      	lsls	r5, r3, #31
 8004d48:	d4dc      	bmi.n	8004d04 <_ungetc_r+0xc>
 8004d4a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d4e:	d1d9      	bne.n	8004d04 <_ungetc_r+0xc>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f7fe fe27 	bl	80039a4 <__retarget_lock_release_recursive>
 8004d56:	e7d5      	b.n	8004d04 <_ungetc_r+0xc>
 8004d58:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <_ungetc_r+0x128>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d101      	bne.n	8004d62 <_ungetc_r+0x6a>
 8004d5e:	68b4      	ldr	r4, [r6, #8]
 8004d60:	e7dd      	b.n	8004d1e <_ungetc_r+0x26>
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <_ungetc_r+0x12c>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	bf08      	it	eq
 8004d68:	68f4      	ldreq	r4, [r6, #12]
 8004d6a:	e7d8      	b.n	8004d1e <_ungetc_r+0x26>
 8004d6c:	0710      	lsls	r0, r2, #28
 8004d6e:	d511      	bpl.n	8004d94 <_ungetc_r+0x9c>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4630      	mov	r0, r6
 8004d74:	f7fe fc74 	bl	8003660 <_fflush_r>
 8004d78:	b130      	cbz	r0, 8004d88 <_ungetc_r+0x90>
 8004d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7c:	07d9      	lsls	r1, r3, #31
 8004d7e:	d4c1      	bmi.n	8004d04 <_ungetc_r+0xc>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d86:	e7e2      	b.n	8004d4e <_ungetc_r+0x56>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	60a0      	str	r0, [r4, #8]
 8004d8c:	f023 0308 	bic.w	r3, r3, #8
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	61a0      	str	r0, [r4, #24]
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	81a3      	strh	r3, [r4, #12]
 8004d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	b2ed      	uxtb	r5, r5
 8004da2:	b1d3      	cbz	r3, 8004dda <_ungetc_r+0xe2>
 8004da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004da6:	4293      	cmp	r3, r2
 8004da8:	dc05      	bgt.n	8004db6 <_ungetc_r+0xbe>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7ff ff69 	bl	8004c84 <__submore>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1e1      	bne.n	8004d7a <_ungetc_r+0x82>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	1e5a      	subs	r2, r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dc8:	07da      	lsls	r2, r3, #31
 8004dca:	d49d      	bmi.n	8004d08 <_ungetc_r+0x10>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	059b      	lsls	r3, r3, #22
 8004dd0:	d49a      	bmi.n	8004d08 <_ungetc_r+0x10>
 8004dd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd4:	f7fe fde6 	bl	80039a4 <__retarget_lock_release_recursive>
 8004dd8:	e796      	b.n	8004d08 <_ungetc_r+0x10>
 8004dda:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004ddc:	6920      	ldr	r0, [r4, #16]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f001 0101 	and.w	r1, r1, #1
 8004de4:	b160      	cbz	r0, 8004e00 <_ungetc_r+0x108>
 8004de6:	4298      	cmp	r0, r3
 8004de8:	d20a      	bcs.n	8004e00 <_ungetc_r+0x108>
 8004dea:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004dee:	42a8      	cmp	r0, r5
 8004df0:	d106      	bne.n	8004e00 <_ungetc_r+0x108>
 8004df2:	3b01      	subs	r3, #1
 8004df4:	3201      	adds	r2, #1
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	6062      	str	r2, [r4, #4]
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	d184      	bne.n	8004d08 <_ungetc_r+0x10>
 8004dfe:	e7e5      	b.n	8004dcc <_ungetc_r+0xd4>
 8004e00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e08:	6363      	str	r3, [r4, #52]	; 0x34
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e0e:	4623      	mov	r3, r4
 8004e10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	2301      	movs	r3, #1
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	e7ee      	b.n	8004dfa <_ungetc_r+0x102>
 8004e1c:	08005070 	.word	0x08005070
 8004e20:	08005090 	.word	0x08005090
 8004e24:	08005050 	.word	0x08005050

08004e28 <_write_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d07      	ldr	r5, [pc, #28]	; (8004e48 <_write_r+0x20>)
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fb fd98 	bl	800096c <_write>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_write_r+0x1e>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_write_r+0x1e>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000238 	.word	0x20000238

08004e4c <_close_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	; (8004e68 <_close_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fb fdb4 	bl	80009c4 <_close>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_close_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_close_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000238 	.word	0x20000238

08004e6c <_fstat_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d07      	ldr	r5, [pc, #28]	; (8004e8c <_fstat_r+0x20>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	f7fb fdf3 	bl	8000a64 <_fstat>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d102      	bne.n	8004e88 <_fstat_r+0x1c>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	b103      	cbz	r3, 8004e88 <_fstat_r+0x1c>
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000238 	.word	0x20000238

08004e90 <_isatty_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d06      	ldr	r5, [pc, #24]	; (8004eac <_isatty_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fb fd50 	bl	8000940 <_isatty>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_isatty_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_isatty_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20000238 	.word	0x20000238

08004eb0 <_lseek_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	; (8004ed0 <_lseek_r+0x20>)
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fb fd97 	bl	80009f2 <_lseek>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_lseek_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_lseek_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000238 	.word	0x20000238

08004ed4 <memcpy>:
 8004ed4:	440a      	add	r2, r1
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004edc:	d100      	bne.n	8004ee0 <memcpy+0xc>
 8004ede:	4770      	bx	lr
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eea:	4291      	cmp	r1, r2
 8004eec:	d1f9      	bne.n	8004ee2 <memcpy+0xe>
 8004eee:	bd10      	pop	{r4, pc}

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7fe bd56 	b.w	80039a2 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000230 	.word	0x20000230

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7fe bd51 	b.w	80039a4 <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	20000230 	.word	0x20000230

08004f08 <_realloc_r>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	460e      	mov	r6, r1
 8004f10:	b921      	cbnz	r1, 8004f1c <_realloc_r+0x14>
 8004f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f16:	4611      	mov	r1, r2
 8004f18:	f7fe be02 	b.w	8003b20 <_malloc_r>
 8004f1c:	b922      	cbnz	r2, 8004f28 <_realloc_r+0x20>
 8004f1e:	f7fe fdaf 	bl	8003a80 <_free_r>
 8004f22:	4625      	mov	r5, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f28:	f000 f826 	bl	8004f78 <_malloc_usable_size_r>
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d20f      	bcs.n	8004f50 <_realloc_r+0x48>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7fe fdf4 	bl	8003b20 <_malloc_r>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d0f2      	beq.n	8004f24 <_realloc_r+0x1c>
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4622      	mov	r2, r4
 8004f42:	f7ff ffc7 	bl	8004ed4 <memcpy>
 8004f46:	4631      	mov	r1, r6
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f7fe fd99 	bl	8003a80 <_free_r>
 8004f4e:	e7e9      	b.n	8004f24 <_realloc_r+0x1c>
 8004f50:	4635      	mov	r5, r6
 8004f52:	e7e7      	b.n	8004f24 <_realloc_r+0x1c>

08004f54 <_read_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d07      	ldr	r5, [pc, #28]	; (8004f74 <_read_r+0x20>)
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	602a      	str	r2, [r5, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f7fb fd56 	bl	8000a14 <_read>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_read_r+0x1e>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_read_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000238 	.word	0x20000238

08004f78 <_malloc_usable_size_r>:
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f18      	subs	r0, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbc      	itt	lt
 8004f82:	580b      	ldrlt	r3, [r1, r0]
 8004f84:	18c0      	addlt	r0, r0, r3
 8004f86:	4770      	bx	lr

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
