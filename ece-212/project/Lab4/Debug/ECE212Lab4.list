
ECE212Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b80  08004b80  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08004b88  00020000  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000220  08004da8  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004da8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000bfb2  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000c76f  00000000  00000000  0002c202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dad  00000000  00000000  00038971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c257d  00000000  00000000  0003b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000900  00000000  00000000  000fd6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021147  00000000  00000000  000fdff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f13f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  0011f194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049f0 	.word	0x080049f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	080049f0 	.word	0x080049f0

080001d0 <convert1>:
.global convert1
.text

convert1:
PUSH {lr}
 80001d0:	b500      	push	{lr}
/*-------------Numbers---------------------*/
ldr r0,[sp,#4]
 80001d2:	9801      	ldr	r0, [sp, #4]
cmp r0,#0x30
 80001d4:	2830      	cmp	r0, #48	; 0x30
beq Num0
 80001d6:	d02e      	beq.n	8000236 <Num0>

cmp r0,#0x31
 80001d8:	2831      	cmp	r0, #49	; 0x31
beq Num1
 80001da:	d030      	beq.n	800023e <Num1>

cmp r0,#0x32
 80001dc:	2832      	cmp	r0, #50	; 0x32
beq Num2
 80001de:	d032      	beq.n	8000246 <Num2>

cmp r0,#0x33
 80001e0:	2833      	cmp	r0, #51	; 0x33
beq Num3
 80001e2:	d034      	beq.n	800024e <Num3>

cmp r0,#0x34
 80001e4:	2834      	cmp	r0, #52	; 0x34
beq Num4
 80001e6:	d036      	beq.n	8000256 <Num4>

cmp r0,#0x35
 80001e8:	2835      	cmp	r0, #53	; 0x35
beq Num5
 80001ea:	d038      	beq.n	800025e <Num5>

cmp r0,#0x36
 80001ec:	2836      	cmp	r0, #54	; 0x36
beq Num6
 80001ee:	d03a      	beq.n	8000266 <Num6>

cmp r0,#0x37
 80001f0:	2837      	cmp	r0, #55	; 0x37
beq Num7
 80001f2:	d03c      	beq.n	800026e <Num7>

cmp r0,#0x38
 80001f4:	2838      	cmp	r0, #56	; 0x38
beq Num8
 80001f6:	d03e      	beq.n	8000276 <Num8>

cmp r0,#0x39
 80001f8:	2839      	cmp	r0, #57	; 0x39
beq Num9
 80001fa:	d040      	beq.n	800027e <Num9>

/*-------------------------------*/

/*---------LETTERS----------------*/
cmp r0,#0x41
 80001fc:	2841      	cmp	r0, #65	; 0x41
beq LetA
 80001fe:	d042      	beq.n	8000286 <LetA>

cmp r0,#0x42
 8000200:	2842      	cmp	r0, #66	; 0x42
beq LetB
 8000202:	d044      	beq.n	800028e <LetB>

cmp r0,#0x43
 8000204:	2843      	cmp	r0, #67	; 0x43
beq LetC
 8000206:	d046      	beq.n	8000296 <LetC>

cmp r0,#0x44
 8000208:	2844      	cmp	r0, #68	; 0x44
beq LetD
 800020a:	d048      	beq.n	800029e <LetD>

cmp r0,#0x45
 800020c:	2845      	cmp	r0, #69	; 0x45
beq LetE
 800020e:	d04a      	beq.n	80002a6 <LetE>

cmp r0,#0x46
 8000210:	2846      	cmp	r0, #70	; 0x46
beq LetF
 8000212:	d04c      	beq.n	80002ae <LetF>

cmp r0,#0x47
 8000214:	2847      	cmp	r0, #71	; 0x47
beq LetG
 8000216:	d04e      	beq.n	80002b6 <LetG>

cmp r0,#0x48
 8000218:	2848      	cmp	r0, #72	; 0x48
beq LetH
 800021a:	d050      	beq.n	80002be <LetH>

cmp r0,#0x49
 800021c:	2849      	cmp	r0, #73	; 0x49
beq LetI
 800021e:	d052      	beq.n	80002c6 <LetI>

cmp r0,#0x4A
 8000220:	284a      	cmp	r0, #74	; 0x4a
beq LetJ
 8000222:	d054      	beq.n	80002ce <LetJ>

cmp r0,#0x4B
 8000224:	284b      	cmp	r0, #75	; 0x4b
beq LetK
 8000226:	d056      	beq.n	80002d6 <LetK>

cmp r0,#0x4C
 8000228:	284c      	cmp	r0, #76	; 0x4c
beq LetL
 800022a:	d058      	beq.n	80002de <LetL>

cmp r0,#0x4D
 800022c:	284d      	cmp	r0, #77	; 0x4d
beq LetM
 800022e:	d05a      	beq.n	80002e6 <LetM>

cmp r0,#0x4E
 8000230:	284e      	cmp	r0, #78	; 0x4e
beq LetN
 8000232:	d05c      	beq.n	80002ee <LetN>

bal Next
 8000234:	e05f      	b.n	80002f6 <Next>

08000236 <Num0>:
/*-------------------------------*/
Num0:
ldr r0,=Number_0
 8000236:	4854      	ldr	r0, [pc, #336]	; (8000388 <Done+0x2>)
str r0,[sp,#4]
 8000238:	9001      	str	r0, [sp, #4]
bl Done
 800023a:	f000 f8a4 	bl	8000386 <Done>

0800023e <Num1>:

Num1:
ldr r0,=Number_1
 800023e:	4853      	ldr	r0, [pc, #332]	; (800038c <Done+0x6>)
str r0,[sp,#4]
 8000240:	9001      	str	r0, [sp, #4]
bl Done
 8000242:	f000 f8a0 	bl	8000386 <Done>

08000246 <Num2>:

Num2:
ldr r0,=Number_2
 8000246:	4852      	ldr	r0, [pc, #328]	; (8000390 <Done+0xa>)
str r0,[sp,#4]
 8000248:	9001      	str	r0, [sp, #4]
bl Done
 800024a:	f000 f89c 	bl	8000386 <Done>

0800024e <Num3>:

Num3:
ldr r0,=Number_3
 800024e:	4851      	ldr	r0, [pc, #324]	; (8000394 <Done+0xe>)
str r0,[sp,#4]
 8000250:	9001      	str	r0, [sp, #4]
bl Done
 8000252:	f000 f898 	bl	8000386 <Done>

08000256 <Num4>:

Num4:
ldr r0,=Number_4
 8000256:	4850      	ldr	r0, [pc, #320]	; (8000398 <Done+0x12>)
str r0,[sp,#4]
 8000258:	9001      	str	r0, [sp, #4]
bl Done
 800025a:	f000 f894 	bl	8000386 <Done>

0800025e <Num5>:

Num5:
ldr r0,=Number_5
 800025e:	484f      	ldr	r0, [pc, #316]	; (800039c <Done+0x16>)
str r0,[sp,#4]
 8000260:	9001      	str	r0, [sp, #4]
bl Done
 8000262:	f000 f890 	bl	8000386 <Done>

08000266 <Num6>:

Num6:
ldr r0,=Number_6
 8000266:	484e      	ldr	r0, [pc, #312]	; (80003a0 <Done+0x1a>)
str r0,[sp,#4]
 8000268:	9001      	str	r0, [sp, #4]
bl Done
 800026a:	f000 f88c 	bl	8000386 <Done>

0800026e <Num7>:

Num7:
ldr r0,=Number_7
 800026e:	484d      	ldr	r0, [pc, #308]	; (80003a4 <Done+0x1e>)
str r0,[sp,#4]
 8000270:	9001      	str	r0, [sp, #4]
bl Done
 8000272:	f000 f888 	bl	8000386 <Done>

08000276 <Num8>:

Num8:
ldr r0,=Number_8
 8000276:	484c      	ldr	r0, [pc, #304]	; (80003a8 <Done+0x22>)
str r0,[sp,#4]
 8000278:	9001      	str	r0, [sp, #4]
bl Done
 800027a:	f000 f884 	bl	8000386 <Done>

0800027e <Num9>:

Num9:
ldr r0,=Number_9
 800027e:	484b      	ldr	r0, [pc, #300]	; (80003ac <Done+0x26>)
str r0,[sp,#4]
 8000280:	9001      	str	r0, [sp, #4]
bl Done
 8000282:	f000 f880 	bl	8000386 <Done>

08000286 <LetA>:

LetA:
ldr r0,=Letter_A
 8000286:	484a      	ldr	r0, [pc, #296]	; (80003b0 <Done+0x2a>)
str r0,[sp,#4]
 8000288:	9001      	str	r0, [sp, #4]
bl Done
 800028a:	f000 f87c 	bl	8000386 <Done>

0800028e <LetB>:

LetB:
ldr r0,=Letter_B
 800028e:	4849      	ldr	r0, [pc, #292]	; (80003b4 <Done+0x2e>)
str r0,[sp,#4]
 8000290:	9001      	str	r0, [sp, #4]
bl Done
 8000292:	f000 f878 	bl	8000386 <Done>

08000296 <LetC>:

LetC:
ldr r0,=Letter_C
 8000296:	4848      	ldr	r0, [pc, #288]	; (80003b8 <Done+0x32>)
str r0,[sp,#4]
 8000298:	9001      	str	r0, [sp, #4]
bl Done
 800029a:	f000 f874 	bl	8000386 <Done>

0800029e <LetD>:

LetD:
ldr r0,=Letter_D
 800029e:	4847      	ldr	r0, [pc, #284]	; (80003bc <Done+0x36>)
str r0,[sp,#4]
 80002a0:	9001      	str	r0, [sp, #4]
bl Done
 80002a2:	f000 f870 	bl	8000386 <Done>

080002a6 <LetE>:

LetE:
ldr r0,=Letter_E
 80002a6:	4846      	ldr	r0, [pc, #280]	; (80003c0 <Done+0x3a>)
str r0,[sp,#4]
 80002a8:	9001      	str	r0, [sp, #4]
bl Done
 80002aa:	f000 f86c 	bl	8000386 <Done>

080002ae <LetF>:

LetF:
ldr r0,=Letter_F
 80002ae:	4845      	ldr	r0, [pc, #276]	; (80003c4 <Done+0x3e>)
str r0,[sp,#4]
 80002b0:	9001      	str	r0, [sp, #4]
bl Done
 80002b2:	f000 f868 	bl	8000386 <Done>

080002b6 <LetG>:

LetG:
ldr r0,=Letter_G
 80002b6:	4844      	ldr	r0, [pc, #272]	; (80003c8 <Done+0x42>)
str r0,[sp,#4]
 80002b8:	9001      	str	r0, [sp, #4]
bl Done
 80002ba:	f000 f864 	bl	8000386 <Done>

080002be <LetH>:

LetH:
ldr r0,=Letter_H
 80002be:	4843      	ldr	r0, [pc, #268]	; (80003cc <Done+0x46>)
str r0,[sp,#4]
 80002c0:	9001      	str	r0, [sp, #4]
bl Done
 80002c2:	f000 f860 	bl	8000386 <Done>

080002c6 <LetI>:

LetI:
ldr r0,=Letter_I
 80002c6:	4842      	ldr	r0, [pc, #264]	; (80003d0 <Done+0x4a>)
str r0,[sp,#4]
 80002c8:	9001      	str	r0, [sp, #4]
bl Done
 80002ca:	f000 f85c 	bl	8000386 <Done>

080002ce <LetJ>:

LetJ:
ldr r0,=Letter_J
 80002ce:	4841      	ldr	r0, [pc, #260]	; (80003d4 <Done+0x4e>)
str r0,[sp,#4]
 80002d0:	9001      	str	r0, [sp, #4]
bl Done
 80002d2:	f000 f858 	bl	8000386 <Done>

080002d6 <LetK>:

LetK:
ldr r0,=Letter_K
 80002d6:	4840      	ldr	r0, [pc, #256]	; (80003d8 <Done+0x52>)
str r0,[sp,#4]
 80002d8:	9001      	str	r0, [sp, #4]
bl Done
 80002da:	f000 f854 	bl	8000386 <Done>

080002de <LetL>:

LetL:
ldr r0,=Letter_L
 80002de:	483f      	ldr	r0, [pc, #252]	; (80003dc <Done+0x56>)
str r0,[sp,#4]
 80002e0:	9001      	str	r0, [sp, #4]
bl Done
 80002e2:	f000 f850 	bl	8000386 <Done>

080002e6 <LetM>:

LetM:
ldr r0,=Letter_M
 80002e6:	483e      	ldr	r0, [pc, #248]	; (80003e0 <Done+0x5a>)
str r0,[sp,#4]
 80002e8:	9001      	str	r0, [sp, #4]
bl Done
 80002ea:	f000 f84c 	bl	8000386 <Done>

080002ee <LetN>:

LetN:
ldr r0,=Letter_N
 80002ee:	483d      	ldr	r0, [pc, #244]	; (80003e4 <Done+0x5e>)
str r0,[sp,#4]
 80002f0:	9001      	str	r0, [sp, #4]
bl Done
 80002f2:	f000 f848 	bl	8000386 <Done>

080002f6 <Next>:


Next:
cmp r0,#0x4F
 80002f6:	284f      	cmp	r0, #79	; 0x4f
beq LetO
 80002f8:	d015      	beq.n	8000326 <LetO>

cmp r0,#0x50
 80002fa:	2850      	cmp	r0, #80	; 0x50
beq LetP
 80002fc:	d017      	beq.n	800032e <LetP>

cmp r0,#0x51
 80002fe:	2851      	cmp	r0, #81	; 0x51
beq LetQ
 8000300:	d019      	beq.n	8000336 <LetQ>

cmp r0,#0x52
 8000302:	2852      	cmp	r0, #82	; 0x52
beq LetR
 8000304:	d01b      	beq.n	800033e <LetR>

cmp r0,#0x53
 8000306:	2853      	cmp	r0, #83	; 0x53
beq LetS
 8000308:	d01d      	beq.n	8000346 <LetS>

cmp r0,#0x54
 800030a:	2854      	cmp	r0, #84	; 0x54
beq LetT
 800030c:	d01f      	beq.n	800034e <LetT>

cmp r0,#0x55
 800030e:	2855      	cmp	r0, #85	; 0x55
beq LetU
 8000310:	d021      	beq.n	8000356 <LetU>

cmp r0,#0x56
 8000312:	2856      	cmp	r0, #86	; 0x56
beq LetV
 8000314:	d023      	beq.n	800035e <LetV>

cmp r0,#0x57
 8000316:	2857      	cmp	r0, #87	; 0x57
beq LetW
 8000318:	d025      	beq.n	8000366 <LetW>

cmp r0,#0x58
 800031a:	2858      	cmp	r0, #88	; 0x58
beq LetX
 800031c:	d027      	beq.n	800036e <LetX>

cmp r0,#0x59
 800031e:	2859      	cmp	r0, #89	; 0x59
beq LetY
 8000320:	d029      	beq.n	8000376 <LetY>

cmp r0,#0x5A
 8000322:	285a      	cmp	r0, #90	; 0x5a
beq LetZ
 8000324:	d02b      	beq.n	800037e <LetZ>

08000326 <LetO>:


LetO:
ldr r0,=Letter_O
 8000326:	4830      	ldr	r0, [pc, #192]	; (80003e8 <Done+0x62>)
str r0,[sp,#4]
 8000328:	9001      	str	r0, [sp, #4]
bl Done
 800032a:	f000 f82c 	bl	8000386 <Done>

0800032e <LetP>:

LetP:
ldr r0,=Letter_P
 800032e:	482f      	ldr	r0, [pc, #188]	; (80003ec <Done+0x66>)
str r0,[sp,#4]
 8000330:	9001      	str	r0, [sp, #4]
bl Done
 8000332:	f000 f828 	bl	8000386 <Done>

08000336 <LetQ>:

LetQ:
ldr r0,=Letter_Q
 8000336:	482e      	ldr	r0, [pc, #184]	; (80003f0 <Done+0x6a>)
str r0,[sp,#4]
 8000338:	9001      	str	r0, [sp, #4]
bl Done
 800033a:	f000 f824 	bl	8000386 <Done>

0800033e <LetR>:

LetR:
ldr r0,=Letter_R
 800033e:	482d      	ldr	r0, [pc, #180]	; (80003f4 <Done+0x6e>)
str r0,[sp,#4]
 8000340:	9001      	str	r0, [sp, #4]
bl Done
 8000342:	f000 f820 	bl	8000386 <Done>

08000346 <LetS>:

LetS:
ldr r0,=Letter_S
 8000346:	482c      	ldr	r0, [pc, #176]	; (80003f8 <Done+0x72>)
str r0,[sp,#4]
 8000348:	9001      	str	r0, [sp, #4]
bl Done
 800034a:	f000 f81c 	bl	8000386 <Done>

0800034e <LetT>:

LetT:
ldr r0,=Letter_T
 800034e:	482b      	ldr	r0, [pc, #172]	; (80003fc <Done+0x76>)
str r0,[sp,#4]
 8000350:	9001      	str	r0, [sp, #4]
bl Done
 8000352:	f000 f818 	bl	8000386 <Done>

08000356 <LetU>:

LetU:
ldr r0,=Letter_U
 8000356:	482a      	ldr	r0, [pc, #168]	; (8000400 <Done+0x7a>)
str r0,[sp,#4]
 8000358:	9001      	str	r0, [sp, #4]
bl Done
 800035a:	f000 f814 	bl	8000386 <Done>

0800035e <LetV>:

LetV:
ldr r0,=Letter_V
 800035e:	4829      	ldr	r0, [pc, #164]	; (8000404 <Done+0x7e>)
str r0,[sp,#4]
 8000360:	9001      	str	r0, [sp, #4]
bl Done
 8000362:	f000 f810 	bl	8000386 <Done>

08000366 <LetW>:

LetW:
ldr r0,=Letter_W
 8000366:	4828      	ldr	r0, [pc, #160]	; (8000408 <Done+0x82>)
str r0,[sp,#4]
 8000368:	9001      	str	r0, [sp, #4]
bl Done
 800036a:	f000 f80c 	bl	8000386 <Done>

0800036e <LetX>:

LetX:
ldr r0,=Letter_X
 800036e:	4827      	ldr	r0, [pc, #156]	; (800040c <Done+0x86>)
str r0,[sp,#4]
 8000370:	9001      	str	r0, [sp, #4]
bl Done
 8000372:	f000 f808 	bl	8000386 <Done>

08000376 <LetY>:

LetY:
ldr r0,=Letter_Y
 8000376:	4826      	ldr	r0, [pc, #152]	; (8000410 <Done+0x8a>)
str r0,[sp,#4]
 8000378:	9001      	str	r0, [sp, #4]
bl Done
 800037a:	f000 f804 	bl	8000386 <Done>

0800037e <LetZ>:

LetZ:
ldr r0,=Letter_Z
 800037e:	4825      	ldr	r0, [pc, #148]	; (8000414 <Done+0x8e>)
str r0,[sp,#4]
 8000380:	9001      	str	r0, [sp, #4]
bl Done
 8000382:	f000 f800 	bl	8000386 <Done>

08000386 <Done>:

Done:
POP {PC}
 8000386:	bd00      	pop	{pc}
ldr r0,=Number_0
 8000388:	200001a8 	.word	0x200001a8
ldr r0,=Number_1
 800038c:	20000160 	.word	0x20000160
ldr r0,=Number_2
 8000390:	20000168 	.word	0x20000168
ldr r0,=Number_3
 8000394:	20000170 	.word	0x20000170
ldr r0,=Number_4
 8000398:	20000178 	.word	0x20000178
ldr r0,=Number_5
 800039c:	20000180 	.word	0x20000180
ldr r0,=Number_6
 80003a0:	20000188 	.word	0x20000188
ldr r0,=Number_7
 80003a4:	20000190 	.word	0x20000190
ldr r0,=Number_8
 80003a8:	20000198 	.word	0x20000198
ldr r0,=Number_9
 80003ac:	200001a0 	.word	0x200001a0
ldr r0,=Letter_A
 80003b0:	20000090 	.word	0x20000090
ldr r0,=Letter_B
 80003b4:	20000098 	.word	0x20000098
ldr r0,=Letter_C
 80003b8:	200000a0 	.word	0x200000a0
ldr r0,=Letter_D
 80003bc:	200000a8 	.word	0x200000a8
ldr r0,=Letter_E
 80003c0:	200000b0 	.word	0x200000b0
ldr r0,=Letter_F
 80003c4:	200000b8 	.word	0x200000b8
ldr r0,=Letter_G
 80003c8:	200000c0 	.word	0x200000c0
ldr r0,=Letter_H
 80003cc:	200000c8 	.word	0x200000c8
ldr r0,=Letter_I
 80003d0:	200000d0 	.word	0x200000d0
ldr r0,=Letter_J
 80003d4:	200000d8 	.word	0x200000d8
ldr r0,=Letter_K
 80003d8:	200000e0 	.word	0x200000e0
ldr r0,=Letter_L
 80003dc:	200000e8 	.word	0x200000e8
ldr r0,=Letter_M
 80003e0:	200000f0 	.word	0x200000f0
ldr r0,=Letter_N
 80003e4:	200000f8 	.word	0x200000f8
ldr r0,=Letter_O
 80003e8:	20000100 	.word	0x20000100
ldr r0,=Letter_P
 80003ec:	20000108 	.word	0x20000108
ldr r0,=Letter_Q
 80003f0:	20000110 	.word	0x20000110
ldr r0,=Letter_R
 80003f4:	20000118 	.word	0x20000118
ldr r0,=Letter_S
 80003f8:	20000120 	.word	0x20000120
ldr r0,=Letter_T
 80003fc:	20000128 	.word	0x20000128
ldr r0,=Letter_U
 8000400:	20000130 	.word	0x20000130
ldr r0,=Letter_V
 8000404:	20000138 	.word	0x20000138
ldr r0,=Letter_W
 8000408:	20000140 	.word	0x20000140
ldr r0,=Letter_X
 800040c:	20000148 	.word	0x20000148
ldr r0,=Letter_Y
 8000410:	20000150 	.word	0x20000150
ldr r0,=Letter_Z
 8000414:	20000158 	.word	0x20000158

08000418 <TestAsmCall>:
.extern value
.extern getstring

.text
TestAsmCall:
PUSH {lr}
 8000418:	b500      	push	{lr}
/*--------------------------------------*/
ldr r4,=0xFFFFFFFF
 800041a:	f04f 34ff 	mov.w	r4, #4294967295
PUSH {r4}
 800041e:	b410      	push	{r4}
bl Welcomeprompt
 8000420:	f000 f80a 	bl	8000438 <Welcomeprompt>
POP {r4}
 8000424:	bc10      	pop	{r4}

PUSH {r4}
 8000426:	b410      	push	{r4}
bl Convert
 8000428:	f000 f830 	bl	800048c <Convert>
POP {r4}
 800042c:	bc10      	pop	{r4}

PUSH {r4}
 800042e:	b410      	push	{r4}
bl Display
 8000430:	f000 f835 	bl	800049e <Display>
POP {r4}
 8000434:	bc10      	pop	{r4}



/*-----------------DO NOT MODIFY--------*/
POP {PC}
 8000436:	bd00      	pop	{pc}

08000438 <Welcomeprompt>:
Welcomeprompt:
/*--------------------------------------*/

/*-------Students write their code here ------------*/

POP {r0}
 8000438:	bc01      	pop	{r0}
PUSH {LR}
 800043a:	b500      	push	{lr}

bl cr
 800043c:	f000 fa34 	bl	80008a8 <cr>
ldr r0, =welcome
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <return+0x8>)
bl printf
 8000442:	f003 f90b 	bl	800365c <iprintf>
bl cr
 8000446:	f000 fa2f 	bl	80008a8 <cr>

0800044a <input>:

input:
ldr r0, =inputPrompt
 800044a:	480e      	ldr	r0, [pc, #56]	; (8000484 <return+0xc>)
bl printf
 800044c:	f003 f906 	bl	800365c <iprintf>
bl cr
 8000450:	f000 fa2a 	bl	80008a8 <cr>
bl getchar
 8000454:	f003 f8c4 	bl	80035e0 <getchar>
b checkRange
 8000458:	e7ff      	b.n	800045a <checkRange>

0800045a <checkRange>:

checkRange:
cmp r0, #48
 800045a:	2830      	cmp	r0, #48	; 0x30
blt invalidInput
 800045c:	db06      	blt.n	800046c <invalidInput>
cmp r0, #90
 800045e:	285a      	cmp	r0, #90	; 0x5a
bgt invalidInput
 8000460:	dc04      	bgt.n	800046c <invalidInput>
cmp r0, #57
 8000462:	2839      	cmp	r0, #57	; 0x39
ble return
 8000464:	dd08      	ble.n	8000478 <return>
cmp r0, #65
 8000466:	2841      	cmp	r0, #65	; 0x41
bge return
 8000468:	da06      	bge.n	8000478 <return>
b invalidInput
 800046a:	e7ff      	b.n	800046c <invalidInput>

0800046c <invalidInput>:

invalidInput:
ldr r0, =invalidPrompt
 800046c:	4806      	ldr	r0, [pc, #24]	; (8000488 <return+0x10>)
bl printf
 800046e:	f003 f8f5 	bl	800365c <iprintf>
bl cr
 8000472:	f000 fa19 	bl	80008a8 <cr>
b input
 8000476:	e7e8      	b.n	800044a <input>

08000478 <return>:

return:
POP {r6}
 8000478:	bc40      	pop	{r6}
PUSH {r0}
 800047a:	b401      	push	{r0}
bx r6
 800047c:	4730      	bx	r6
 800047e:	0000      	.short	0x0000
ldr r0, =welcome
 8000480:	20000000 	.word	0x20000000
ldr r0, =inputPrompt
 8000484:	20000017 	.word	0x20000017
ldr r0, =invalidPrompt
 8000488:	20000054 	.word	0x20000054

0800048c <Convert>:
Convert:
/*--------------------------------------*/

/*-------Students write their code here ------------*/

POP {r0}  // Pop the ASCII character out the stack
 800048c:	bc01      	pop	{r0}
PUSH {LR}  // Push the return address into the stack
 800048e:	b500      	push	{lr}

PUSH {r0}  // Push the ASCII character into the stack
 8000490:	b401      	push	{r0}
bl convert1
 8000492:	f7ff fe9d 	bl	80001d0 <convert1>
POP {r0}  // Pop the pattern address out the stack
 8000496:	bc01      	pop	{r0}

POP {r6}  // Pop the return address out the stack
 8000498:	bc40      	pop	{r6}
PUSH {r0}  // Push the pattern address into the stack
 800049a:	b401      	push	{r0}
bx r6
 800049c:	4730      	bx	r6

0800049e <Display>:
Display:
/*--------------------------------------*/

/*-------Students write their code here ------------*/

POP {r1}  // Pop the pattern address out the stack
 800049e:	bc02      	pop	{r1}
PUSH {LR}  // Push the return address into the stack
 80004a0:	b500      	push	{lr}
PUSH {r2-r3}  // Reserve the value for R2 to R3, R5 to R6
 80004a2:	b40c      	push	{r2, r3}
PUSH {r5-r7}
 80004a4:	b4e0      	push	{r5, r6, r7}
mov r7, #0  // Display times
 80004a6:	2700      	movs	r7, #0

080004a8 <Reset>:


Reset:
mov r2, #0  // Row Counter
 80004a8:	2200      	movs	r2, #0
mov r3, #7  // Column Counter
 80004aa:	2307      	movs	r3, #7
mov r6, #0 // Pattern of one row
 80004ac:	2600      	movs	r6, #0
mov r5, r1  // Copy the pattern address
 80004ae:	1c0d      	adds	r5, r1, #0

080004b0 <rowLed>:

rowLed:
ldrb r6, [r5]
 80004b0:	782e      	ldrb	r6, [r5, #0]
add r5, r5, #1
 80004b2:	3501      	adds	r5, #1
b columnLed
 80004b4:	e7ff      	b.n	80004b6 <columnLed>

080004b6 <columnLed>:

columnLed:
lsr r6, r6, #1
 80004b6:	0876      	lsrs	r6, r6, #1
bcc checkColumnCounter
 80004b8:	d317      	bcc.n	80004ea <checkColumnCounter>
mov r0, r3
 80004ba:	1c18      	adds	r0, r3, #0
PUSH {r1-r7}
 80004bc:	b4fe      	push	{r1, r2, r3, r4, r5, r6, r7}
bl Column
 80004be:	f000 fa21 	bl	8000904 <Column>
POP {r1-r7}
 80004c2:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
mov r0, r2
 80004c4:	1c10      	adds	r0, r2, #0
PUSH {r1-r7}
 80004c6:	b4fe      	push	{r1, r2, r3, r4, r5, r6, r7}
bl Row
 80004c8:	f000 faf2 	bl	8000ab0 <Row>
POP {r1-r7}
 80004cc:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
PUSH {r1-r7}
 80004ce:	b4fe      	push	{r1, r2, r3, r4, r5, r6, r7}
bl onled
 80004d0:	f000 f9f4 	bl	80008bc <onled>
POP {r1-r7}
 80004d4:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
mov r0, #0
 80004d6:	2000      	movs	r0, #0
PUSH {r1-r7}
 80004d8:	b4fe      	push	{r1, r2, r3, r4, r5, r6, r7}
bl HAL_Delay
 80004da:	f000 ff37 	bl	800134c <HAL_Delay>
POP {r1-r7}
 80004de:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
PUSH {r1-r7}
 80004e0:	b4fe      	push	{r1, r2, r3, r4, r5, r6, r7}
bl offled
 80004e2:	f000 f9fd 	bl	80008e0 <offled>
POP {r1-r7}
 80004e6:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
b checkColumnCounter
 80004e8:	e7ff      	b.n	80004ea <checkColumnCounter>

080004ea <checkColumnCounter>:

checkColumnCounter:
sub r3, r3, #1
 80004ea:	3b01      	subs	r3, #1
cmp r3, #0
 80004ec:	2b00      	cmp	r3, #0
bge columnLed
 80004ee:	dae2      	bge.n	80004b6 <columnLed>
mov r3, #7
 80004f0:	2307      	movs	r3, #7
add r2, r2, #1
 80004f2:	3201      	adds	r2, #1
cmp r2, #7
 80004f4:	2a07      	cmp	r2, #7
ble rowLed
 80004f6:	dddb      	ble.n	80004b0 <rowLed>
add r7, r7, #1
 80004f8:	3701      	adds	r7, #1
cmp r7, #100
 80004fa:	2f64      	cmp	r7, #100	; 0x64
ble Reset
 80004fc:	ddd4      	ble.n	80004a8 <Reset>
b return
 80004fe:	e7ff      	b.n	8000500 <return>

08000500 <return>:

return:
POP {r5-r7}
 8000500:	bce0      	pop	{r5, r6, r7}
POP {r2-r3}
 8000502:	bc0c      	pop	{r2, r3}
POP {r6}
 8000504:	bc40      	pop	{r6}
PUSH {r1}
 8000506:	b402      	push	{r1}
bx r6
 8000508:	4730      	bx	r6
 800050a:	0000      	movs	r0, r0
 800050c:	0000      	movs	r0, r0
	...

08000510 <memchr>:
 8000510:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000514:	2a10      	cmp	r2, #16
 8000516:	db2b      	blt.n	8000570 <memchr+0x60>
 8000518:	f010 0f07 	tst.w	r0, #7
 800051c:	d008      	beq.n	8000530 <memchr+0x20>
 800051e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000522:	3a01      	subs	r2, #1
 8000524:	428b      	cmp	r3, r1
 8000526:	d02d      	beq.n	8000584 <memchr+0x74>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	b342      	cbz	r2, 8000580 <memchr+0x70>
 800052e:	d1f6      	bne.n	800051e <memchr+0xe>
 8000530:	b4f0      	push	{r4, r5, r6, r7}
 8000532:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000536:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800053a:	f022 0407 	bic.w	r4, r2, #7
 800053e:	f07f 0700 	mvns.w	r7, #0
 8000542:	2300      	movs	r3, #0
 8000544:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000548:	3c08      	subs	r4, #8
 800054a:	ea85 0501 	eor.w	r5, r5, r1
 800054e:	ea86 0601 	eor.w	r6, r6, r1
 8000552:	fa85 f547 	uadd8	r5, r5, r7
 8000556:	faa3 f587 	sel	r5, r3, r7
 800055a:	fa86 f647 	uadd8	r6, r6, r7
 800055e:	faa5 f687 	sel	r6, r5, r7
 8000562:	b98e      	cbnz	r6, 8000588 <memchr+0x78>
 8000564:	d1ee      	bne.n	8000544 <memchr+0x34>
 8000566:	bcf0      	pop	{r4, r5, r6, r7}
 8000568:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800056c:	f002 0207 	and.w	r2, r2, #7
 8000570:	b132      	cbz	r2, 8000580 <memchr+0x70>
 8000572:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000576:	3a01      	subs	r2, #1
 8000578:	ea83 0301 	eor.w	r3, r3, r1
 800057c:	b113      	cbz	r3, 8000584 <memchr+0x74>
 800057e:	d1f8      	bne.n	8000572 <memchr+0x62>
 8000580:	2000      	movs	r0, #0
 8000582:	4770      	bx	lr
 8000584:	3801      	subs	r0, #1
 8000586:	4770      	bx	lr
 8000588:	2d00      	cmp	r5, #0
 800058a:	bf06      	itte	eq
 800058c:	4635      	moveq	r5, r6
 800058e:	3803      	subeq	r0, #3
 8000590:	3807      	subne	r0, #7
 8000592:	f015 0f01 	tst.w	r5, #1
 8000596:	d107      	bne.n	80005a8 <memchr+0x98>
 8000598:	3001      	adds	r0, #1
 800059a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800059e:	bf02      	ittt	eq
 80005a0:	3001      	addeq	r0, #1
 80005a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005a6:	3001      	addeq	r0, #1
 80005a8:	bcf0      	pop	{r4, r5, r6, r7}
 80005aa:	3801      	subs	r0, #1
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96e 	b.w	80008a4 <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	4604      	mov	r4, r0
 80005e8:	468c      	mov	ip, r1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f040 8083 	bne.w	80006f6 <__udivmoddi4+0x116>
 80005f0:	428a      	cmp	r2, r1
 80005f2:	4617      	mov	r7, r2
 80005f4:	d947      	bls.n	8000686 <__udivmoddi4+0xa6>
 80005f6:	fab2 f282 	clz	r2, r2
 80005fa:	b142      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fc:	f1c2 0020 	rsb	r0, r2, #32
 8000600:	fa24 f000 	lsr.w	r0, r4, r0
 8000604:	4091      	lsls	r1, r2
 8000606:	4097      	lsls	r7, r2
 8000608:	ea40 0c01 	orr.w	ip, r0, r1
 800060c:	4094      	lsls	r4, r2
 800060e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000612:	0c23      	lsrs	r3, r4, #16
 8000614:	fbbc f6f8 	udiv	r6, ip, r8
 8000618:	fa1f fe87 	uxth.w	lr, r7
 800061c:	fb08 c116 	mls	r1, r8, r6, ip
 8000620:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000624:	fb06 f10e 	mul.w	r1, r6, lr
 8000628:	4299      	cmp	r1, r3
 800062a:	d909      	bls.n	8000640 <__udivmoddi4+0x60>
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000632:	f080 8119 	bcs.w	8000868 <__udivmoddi4+0x288>
 8000636:	4299      	cmp	r1, r3
 8000638:	f240 8116 	bls.w	8000868 <__udivmoddi4+0x288>
 800063c:	3e02      	subs	r6, #2
 800063e:	443b      	add	r3, r7
 8000640:	1a5b      	subs	r3, r3, r1
 8000642:	b2a4      	uxth	r4, r4
 8000644:	fbb3 f0f8 	udiv	r0, r3, r8
 8000648:	fb08 3310 	mls	r3, r8, r0, r3
 800064c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000650:	fb00 fe0e 	mul.w	lr, r0, lr
 8000654:	45a6      	cmp	lr, r4
 8000656:	d909      	bls.n	800066c <__udivmoddi4+0x8c>
 8000658:	193c      	adds	r4, r7, r4
 800065a:	f100 33ff 	add.w	r3, r0, #4294967295
 800065e:	f080 8105 	bcs.w	800086c <__udivmoddi4+0x28c>
 8000662:	45a6      	cmp	lr, r4
 8000664:	f240 8102 	bls.w	800086c <__udivmoddi4+0x28c>
 8000668:	3802      	subs	r0, #2
 800066a:	443c      	add	r4, r7
 800066c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000670:	eba4 040e 	sub.w	r4, r4, lr
 8000674:	2600      	movs	r6, #0
 8000676:	b11d      	cbz	r5, 8000680 <__udivmoddi4+0xa0>
 8000678:	40d4      	lsrs	r4, r2
 800067a:	2300      	movs	r3, #0
 800067c:	e9c5 4300 	strd	r4, r3, [r5]
 8000680:	4631      	mov	r1, r6
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	b902      	cbnz	r2, 800068a <__udivmoddi4+0xaa>
 8000688:	deff      	udf	#255	; 0xff
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	2a00      	cmp	r2, #0
 8000690:	d150      	bne.n	8000734 <__udivmoddi4+0x154>
 8000692:	1bcb      	subs	r3, r1, r7
 8000694:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000698:	fa1f f887 	uxth.w	r8, r7
 800069c:	2601      	movs	r6, #1
 800069e:	fbb3 fcfe 	udiv	ip, r3, lr
 80006a2:	0c21      	lsrs	r1, r4, #16
 80006a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80006a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ac:	fb08 f30c 	mul.w	r3, r8, ip
 80006b0:	428b      	cmp	r3, r1
 80006b2:	d907      	bls.n	80006c4 <__udivmoddi4+0xe4>
 80006b4:	1879      	adds	r1, r7, r1
 80006b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006ba:	d202      	bcs.n	80006c2 <__udivmoddi4+0xe2>
 80006bc:	428b      	cmp	r3, r1
 80006be:	f200 80e9 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006c2:	4684      	mov	ip, r0
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	b2a3      	uxth	r3, r4
 80006c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80006cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80006d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80006d4:	fb08 f800 	mul.w	r8, r8, r0
 80006d8:	45a0      	cmp	r8, r4
 80006da:	d907      	bls.n	80006ec <__udivmoddi4+0x10c>
 80006dc:	193c      	adds	r4, r7, r4
 80006de:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x10a>
 80006e4:	45a0      	cmp	r8, r4
 80006e6:	f200 80d9 	bhi.w	800089c <__udivmoddi4+0x2bc>
 80006ea:	4618      	mov	r0, r3
 80006ec:	eba4 0408 	sub.w	r4, r4, r8
 80006f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006f4:	e7bf      	b.n	8000676 <__udivmoddi4+0x96>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0x12e>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	f000 80b1 	beq.w	8000862 <__udivmoddi4+0x282>
 8000700:	2600      	movs	r6, #0
 8000702:	e9c5 0100 	strd	r0, r1, [r5]
 8000706:	4630      	mov	r0, r6
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	fab3 f683 	clz	r6, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d14a      	bne.n	80007ac <__udivmoddi4+0x1cc>
 8000716:	428b      	cmp	r3, r1
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0x140>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 80b8 	bhi.w	8000890 <__udivmoddi4+0x2b0>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb61 0103 	sbc.w	r1, r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	468c      	mov	ip, r1
 800072a:	2d00      	cmp	r5, #0
 800072c:	d0a8      	beq.n	8000680 <__udivmoddi4+0xa0>
 800072e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000732:	e7a5      	b.n	8000680 <__udivmoddi4+0xa0>
 8000734:	f1c2 0320 	rsb	r3, r2, #32
 8000738:	fa20 f603 	lsr.w	r6, r0, r3
 800073c:	4097      	lsls	r7, r2
 800073e:	fa01 f002 	lsl.w	r0, r1, r2
 8000742:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000746:	40d9      	lsrs	r1, r3
 8000748:	4330      	orrs	r0, r6
 800074a:	0c03      	lsrs	r3, r0, #16
 800074c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000750:	fa1f f887 	uxth.w	r8, r7
 8000754:	fb0e 1116 	mls	r1, lr, r6, r1
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb06 f108 	mul.w	r1, r6, r8
 8000760:	4299      	cmp	r1, r3
 8000762:	fa04 f402 	lsl.w	r4, r4, r2
 8000766:	d909      	bls.n	800077c <__udivmoddi4+0x19c>
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	f106 3cff 	add.w	ip, r6, #4294967295
 800076e:	f080 808d 	bcs.w	800088c <__udivmoddi4+0x2ac>
 8000772:	4299      	cmp	r1, r3
 8000774:	f240 808a 	bls.w	800088c <__udivmoddi4+0x2ac>
 8000778:	3e02      	subs	r6, #2
 800077a:	443b      	add	r3, r7
 800077c:	1a5b      	subs	r3, r3, r1
 800077e:	b281      	uxth	r1, r0
 8000780:	fbb3 f0fe 	udiv	r0, r3, lr
 8000784:	fb0e 3310 	mls	r3, lr, r0, r3
 8000788:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800078c:	fb00 f308 	mul.w	r3, r0, r8
 8000790:	428b      	cmp	r3, r1
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x1c4>
 8000794:	1879      	adds	r1, r7, r1
 8000796:	f100 3cff 	add.w	ip, r0, #4294967295
 800079a:	d273      	bcs.n	8000884 <__udivmoddi4+0x2a4>
 800079c:	428b      	cmp	r3, r1
 800079e:	d971      	bls.n	8000884 <__udivmoddi4+0x2a4>
 80007a0:	3802      	subs	r0, #2
 80007a2:	4439      	add	r1, r7
 80007a4:	1acb      	subs	r3, r1, r3
 80007a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007aa:	e778      	b.n	800069e <__udivmoddi4+0xbe>
 80007ac:	f1c6 0c20 	rsb	ip, r6, #32
 80007b0:	fa03 f406 	lsl.w	r4, r3, r6
 80007b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80007b8:	431c      	orrs	r4, r3
 80007ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80007be:	fa01 f306 	lsl.w	r3, r1, r6
 80007c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80007c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80007ca:	431f      	orrs	r7, r3
 80007cc:	0c3b      	lsrs	r3, r7, #16
 80007ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80007d2:	fa1f f884 	uxth.w	r8, r4
 80007d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80007da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007de:	fb09 fa08 	mul.w	sl, r9, r8
 80007e2:	458a      	cmp	sl, r1
 80007e4:	fa02 f206 	lsl.w	r2, r2, r6
 80007e8:	fa00 f306 	lsl.w	r3, r0, r6
 80007ec:	d908      	bls.n	8000800 <__udivmoddi4+0x220>
 80007ee:	1861      	adds	r1, r4, r1
 80007f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80007f4:	d248      	bcs.n	8000888 <__udivmoddi4+0x2a8>
 80007f6:	458a      	cmp	sl, r1
 80007f8:	d946      	bls.n	8000888 <__udivmoddi4+0x2a8>
 80007fa:	f1a9 0902 	sub.w	r9, r9, #2
 80007fe:	4421      	add	r1, r4
 8000800:	eba1 010a 	sub.w	r1, r1, sl
 8000804:	b2bf      	uxth	r7, r7
 8000806:	fbb1 f0fe 	udiv	r0, r1, lr
 800080a:	fb0e 1110 	mls	r1, lr, r0, r1
 800080e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000812:	fb00 f808 	mul.w	r8, r0, r8
 8000816:	45b8      	cmp	r8, r7
 8000818:	d907      	bls.n	800082a <__udivmoddi4+0x24a>
 800081a:	19e7      	adds	r7, r4, r7
 800081c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000820:	d22e      	bcs.n	8000880 <__udivmoddi4+0x2a0>
 8000822:	45b8      	cmp	r8, r7
 8000824:	d92c      	bls.n	8000880 <__udivmoddi4+0x2a0>
 8000826:	3802      	subs	r0, #2
 8000828:	4427      	add	r7, r4
 800082a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800082e:	eba7 0708 	sub.w	r7, r7, r8
 8000832:	fba0 8902 	umull	r8, r9, r0, r2
 8000836:	454f      	cmp	r7, r9
 8000838:	46c6      	mov	lr, r8
 800083a:	4649      	mov	r1, r9
 800083c:	d31a      	bcc.n	8000874 <__udivmoddi4+0x294>
 800083e:	d017      	beq.n	8000870 <__udivmoddi4+0x290>
 8000840:	b15d      	cbz	r5, 800085a <__udivmoddi4+0x27a>
 8000842:	ebb3 020e 	subs.w	r2, r3, lr
 8000846:	eb67 0701 	sbc.w	r7, r7, r1
 800084a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800084e:	40f2      	lsrs	r2, r6
 8000850:	ea4c 0202 	orr.w	r2, ip, r2
 8000854:	40f7      	lsrs	r7, r6
 8000856:	e9c5 2700 	strd	r2, r7, [r5]
 800085a:	2600      	movs	r6, #0
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	462e      	mov	r6, r5
 8000864:	4628      	mov	r0, r5
 8000866:	e70b      	b.n	8000680 <__udivmoddi4+0xa0>
 8000868:	4606      	mov	r6, r0
 800086a:	e6e9      	b.n	8000640 <__udivmoddi4+0x60>
 800086c:	4618      	mov	r0, r3
 800086e:	e6fd      	b.n	800066c <__udivmoddi4+0x8c>
 8000870:	4543      	cmp	r3, r8
 8000872:	d2e5      	bcs.n	8000840 <__udivmoddi4+0x260>
 8000874:	ebb8 0e02 	subs.w	lr, r8, r2
 8000878:	eb69 0104 	sbc.w	r1, r9, r4
 800087c:	3801      	subs	r0, #1
 800087e:	e7df      	b.n	8000840 <__udivmoddi4+0x260>
 8000880:	4608      	mov	r0, r1
 8000882:	e7d2      	b.n	800082a <__udivmoddi4+0x24a>
 8000884:	4660      	mov	r0, ip
 8000886:	e78d      	b.n	80007a4 <__udivmoddi4+0x1c4>
 8000888:	4681      	mov	r9, r0
 800088a:	e7b9      	b.n	8000800 <__udivmoddi4+0x220>
 800088c:	4666      	mov	r6, ip
 800088e:	e775      	b.n	800077c <__udivmoddi4+0x19c>
 8000890:	4630      	mov	r0, r6
 8000892:	e74a      	b.n	800072a <__udivmoddi4+0x14a>
 8000894:	f1ac 0c02 	sub.w	ip, ip, #2
 8000898:	4439      	add	r1, r7
 800089a:	e713      	b.n	80006c4 <__udivmoddi4+0xe4>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	e724      	b.n	80006ec <__udivmoddi4+0x10c>
 80008a2:	bf00      	nop

080008a4 <__aeabi_idiv0>:
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop

080008a8 <cr>:
void TestAsmCall();
/*---------------------------------------*/

/*---------Added by Wing------------------*/
void cr()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
		printf( "\r\n");
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <cr+0x10>)
 80008ae:	f002 ff5b 	bl	8003768 <puts>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08004a08 	.word	0x08004a08

080008bc <onled>:

			return number;
}

void onled()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f000 ffb3 	bl	8001834 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	4802      	ldr	r0, [pc, #8]	; (80008dc <onled+0x20>)
 80008d4:	f000 ffae 	bl	8001834 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000400 	.word	0x48000400

080008e0 <offled>:

void offled()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 ffa1 	bl	8001834 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <offled+0x20>)
 80008f8:	f000 ff9c 	bl	8001834 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	48000400 	.word	0x48000400

08000904 <Column>:
	printf(" Column Good\n");

}

void Column(int C)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b07      	cmp	r3, #7
 8000910:	f200 80c4 	bhi.w	8000a9c <Column+0x198>
 8000914:	a201      	add	r2, pc, #4	; (adr r2, 800091c <Column+0x18>)
 8000916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091a:	bf00      	nop
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000969 	.word	0x08000969
 8000924:	08000995 	.word	0x08000995
 8000928:	080009c1 	.word	0x080009c1
 800092c:	080009ed 	.word	0x080009ed
 8000930:	08000a19 	.word	0x08000a19
 8000934:	08000a45 	.word	0x08000a45
 8000938:	08000a71 	.word	0x08000a71
switch(C)
{
	case 0:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 ff75 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 ff6e 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f000 ff67 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000966:	e09d      	b.n	8000aa4 <Column+0x1a0>

	case 1:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 ff5f 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 ff58 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 ff51 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000992:	e087      	b.n	8000aa4 <Column+0x1a0>

	case 2:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 ff49 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 ff42 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f000 ff3b 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 80009be:	e071      	b.n	8000aa4 <Column+0x1a0>

	case 3:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 ff33 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f000 ff2c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 ff25 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 80009ea:	e05b      	b.n	8000aa4 <Column+0x1a0>

	case 4:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 ff1d 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 ff16 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f000 ff0f 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000a16:	e045      	b.n	8000aa4 <Column+0x1a0>

	case 5:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 ff07 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 ff00 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 fef9 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000a42:	e02f      	b.n	8000aa4 <Column+0x1a0>

	case 6:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fef1 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 feea 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fee3 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000a6e:	e019      	b.n	8000aa4 <Column+0x1a0>

	case 7:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fedb 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fed4 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fecd 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000a9a:	e003      	b.n	8000aa4 <Column+0x1a0>

	default:
	printf("Column Error\n");
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <Column+0x1a8>)
 8000a9e:	f002 fe63 	bl	8003768 <puts>
}
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	08004a50 	.word	0x08004a50

08000ab0 <Row>:
	printf("Row good\n");
}


void Row(int B)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	f200 8094 	bhi.w	8000be8 <Row+0x138>
 8000ac0:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <Row+0x18>)
 8000ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac6:	bf00      	nop
 8000ac8:	08000ae9 	.word	0x08000ae9
 8000acc:	08000b09 	.word	0x08000b09
 8000ad0:	08000b29 	.word	0x08000b29
 8000ad4:	08000b49 	.word	0x08000b49
 8000ad8:	08000b69 	.word	0x08000b69
 8000adc:	08000b89 	.word	0x08000b89
 8000ae0:	08000ba9 	.word	0x08000ba9
 8000ae4:	08000bc9 	.word	0x08000bc9
switch(B)
{
	case 0:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	4842      	ldr	r0, [pc, #264]	; (8000bf8 <Row+0x148>)
 8000aee:	f000 fea1 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	4840      	ldr	r0, [pc, #256]	; (8000bf8 <Row+0x148>)
 8000af8:	f000 fe9c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2110      	movs	r1, #16
 8000b00:	483d      	ldr	r0, [pc, #244]	; (8000bf8 <Row+0x148>)
 8000b02:	f000 fe97 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000b06:	e073      	b.n	8000bf0 <Row+0x140>

	case 1:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	483a      	ldr	r0, [pc, #232]	; (8000bf8 <Row+0x148>)
 8000b0e:	f000 fe91 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2102      	movs	r1, #2
 8000b16:	4838      	ldr	r0, [pc, #224]	; (8000bf8 <Row+0x148>)
 8000b18:	f000 fe8c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4835      	ldr	r0, [pc, #212]	; (8000bf8 <Row+0x148>)
 8000b22:	f000 fe87 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000b26:	e063      	b.n	8000bf0 <Row+0x140>

	case 2:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <Row+0x148>)
 8000b2e:	f000 fe81 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4830      	ldr	r0, [pc, #192]	; (8000bf8 <Row+0x148>)
 8000b38:	f000 fe7c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <Row+0x148>)
 8000b42:	f000 fe77 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000b46:	e053      	b.n	8000bf0 <Row+0x140>

	case 3:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	482a      	ldr	r0, [pc, #168]	; (8000bf8 <Row+0x148>)
 8000b4e:	f000 fe71 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2102      	movs	r1, #2
 8000b56:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <Row+0x148>)
 8000b58:	f000 fe6c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <Row+0x148>)
 8000b62:	f000 fe67 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000b66:	e043      	b.n	8000bf0 <Row+0x140>

	case 4:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <Row+0x148>)
 8000b6e:	f000 fe61 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4820      	ldr	r0, [pc, #128]	; (8000bf8 <Row+0x148>)
 8000b78:	f000 fe5c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	481d      	ldr	r0, [pc, #116]	; (8000bf8 <Row+0x148>)
 8000b82:	f000 fe57 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000b86:	e033      	b.n	8000bf0 <Row+0x140>

	case 5:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <Row+0x148>)
 8000b8e:	f000 fe51 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <Row+0x148>)
 8000b98:	f000 fe4c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <Row+0x148>)
 8000ba2:	f000 fe47 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000ba6:	e023      	b.n	8000bf0 <Row+0x140>

	case 6:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <Row+0x148>)
 8000bae:	f000 fe41 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <Row+0x148>)
 8000bb8:	f000 fe3c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <Row+0x148>)
 8000bc2:	f000 fe37 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000bc6:	e013      	b.n	8000bf0 <Row+0x140>

	case 7:
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <Row+0x148>)
 8000bce:	f000 fe31 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <Row+0x148>)
 8000bd8:	f000 fe2c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <Row+0x148>)
 8000be2:	f000 fe27 	bl	8001834 <HAL_GPIO_WritePin>
	break;
 8000be6:	e003      	b.n	8000bf0 <Row+0x140>

	default:
	printf("Row Error\n");
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <Row+0x14c>)
 8000bea:	f002 fdbd 	bl	8003768 <puts>
}
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	08004a70 	.word	0x08004a70

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fb2d 	bl	8001262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f816 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f8c6 	bl	8000d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c10:	f000 f894 	bl	8000d3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /*---------Added by Wing-------------------*/
    RetargetInit(&huart2);
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <main+0x30>)
 8000c16:	f000 f92b 	bl	8000e70 <RetargetInit>
    printf("\r\nECE212 Lab4");
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <main+0x34>)
 8000c1c:	f002 fd1e 	bl	800365c <iprintf>
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
*/
TestAsmCall();
 8000c20:	f7ff fbfa 	bl	8000418 <TestAsmCall>
HAL_Delay(1000);
 8000c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c28:	f000 fb90 	bl	800134c <HAL_Delay>
TestAsmCall();
 8000c2c:	e7f8      	b.n	8000c20 <main+0x20>
 8000c2e:	bf00      	nop
 8000c30:	2000024c 	.word	0x2000024c
 8000c34:	08004a88 	.word	0x08004a88

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ac      	sub	sp, #176	; 0xb0
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c42:	2244      	movs	r2, #68	; 0x44
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fd00 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2254      	movs	r2, #84	; 0x54
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fcf2 	bl	800364c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c68:	f000 fdfc 	bl	8001864 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <SystemClock_Config+0x100>)
 8000c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <SystemClock_Config+0x100>)
 8000c74:	f023 0318 	bic.w	r3, r3, #24
 8000c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c7c:	2314      	movs	r3, #20
 8000c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fe41 	bl	800194c <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 f8c6 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cec:	2101      	movs	r1, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa4c 	bl	800218c <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cfa:	f000 f8b1 	bl	8000e60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fc45 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000d14:	f000 f8a4 	bl	8000e60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d1c:	f000 fdc0 	bl	80018a0 <HAL_PWREx_ControlVoltageScaling>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d26:	f000 f89b 	bl	8000e60 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d2a:	f001 fe29 	bl	8002980 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d2e:	bf00      	nop
 8000d30:	37b0      	adds	r7, #176	; 0xb0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f001 ff00 	bl	8002b84 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 f869 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000024c 	.word	0x2000024c
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_GPIO_Init+0xbc>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f641 71fa 	movw	r1, #8186	; 0x1ffa
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 fd16 	bl	8001834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	21fb      	movs	r1, #251	; 0xfb
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_GPIO_Init+0xc0>)
 8000e0e:	f000 fd11 	bl	8001834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e12:	f641 73fa 	movw	r3, #8186	; 0x1ffa
 8000e16:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f000 fb97 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000e32:	23fb      	movs	r3, #251	; 0xfb
 8000e34:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_GPIO_Init+0xc0>)
 8000e4a:	f000 fb89 	bl	8001560 <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	48000400 	.word	0x48000400

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <RetargetInit+0x28>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <RetargetInit+0x2c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2202      	movs	r2, #2
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f002 fc75 	bl	8003778 <setvbuf>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002d0 	.word	0x200002d0
 8000e9c:	200001bc 	.word	0x200001bc

08000ea0 <_isatty>:

int _isatty(int fd) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db04      	blt.n	8000eb8 <_isatty+0x18>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	dc01      	bgt.n	8000eb8 <_isatty+0x18>
    return 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e005      	b.n	8000ec4 <_isatty+0x24>

  errno = EBADF;
 8000eb8:	f002 fb8c 	bl	80035d4 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2209      	movs	r2, #9
 8000ec0:	601a      	str	r2, [r3, #0]
  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_write>:

int _write(int fd, char* ptr, int len) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d002      	beq.n	8000ee4 <_write+0x18>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d111      	bne.n	8000f08 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_write+0x54>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	f001 fe95 	bl	8002c20 <HAL_UART_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <_write+0x38>
      return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e008      	b.n	8000f16 <_write+0x4a>
    else
      return EIO;
 8000f04:	2305      	movs	r3, #5
 8000f06:	e006      	b.n	8000f16 <_write+0x4a>
  }
  errno = EBADF;
 8000f08:	f002 fb64 	bl	80035d4 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2209      	movs	r2, #9
 8000f10:	601a      	str	r2, [r3, #0]
  return -1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002d0 	.word	0x200002d0

08000f24 <_close>:

int _close(int fd) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db04      	blt.n	8000f3c <_close+0x18>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	dc01      	bgt.n	8000f3c <_close+0x18>
    return 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e006      	b.n	8000f4a <_close+0x26>

  errno = EBADF;
 8000f3c:	f002 fb4a 	bl	80035d4 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2209      	movs	r2, #9
 8000f44:	601a      	str	r2, [r3, #0]
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000f5e:	f002 fb39 	bl	80035d4 <__errno>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2209      	movs	r2, #9
 8000f66:	601a      	str	r2, [r3, #0]
  return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:

int _read(int fd, char* ptr, int len) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d110      	bne.n	8000fa8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_read+0x4c>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	f001 fed9 	bl	8002d48 <HAL_UART_Receive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <_read+0x30>
      return 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e008      	b.n	8000fb6 <_read+0x42>
    else
      return EIO;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	e006      	b.n	8000fb6 <_read+0x42>
  }
  errno = EBADF;
 8000fa8:	f002 fb14 	bl	80035d4 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2209      	movs	r2, #9
 8000fb0:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002d0 	.word	0x200002d0

08000fc4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db08      	blt.n	8000fe6 <_fstat+0x22>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	dc05      	bgt.n	8000fe6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe0:	605a      	str	r2, [r3, #4]
    return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e005      	b.n	8000ff2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000fe6:	f002 faf5 	bl	80035d4 <__errno>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2209      	movs	r2, #9
 8000fee:	601a      	str	r2, [r3, #0]
  return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_MspInit+0x44>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x44>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x44>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <HAL_UART_MspInit+0xa0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d13a      	bne.n	80010dc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0xa4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001096:	2304      	movs	r3, #4
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f000 fa54 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010ca:	2303      	movs	r3, #3
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f000 fa42 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8e8 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f002 fa30 	bl	80035d4 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20010000 	.word	0x20010000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	2000023c 	.word	0x2000023c
 80011a8:	200002e8 	.word	0x200002e8

080011ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <SystemInit+0x5c>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <SystemInit+0x5c>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <SystemInit+0x60>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <SystemInit+0x60>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <SystemInit+0x60>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <SystemInit+0x60>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <SystemInit+0x60>)
 80011d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <SystemInit+0x60>)
 80011e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <SystemInit+0x60>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <SystemInit+0x60>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <SystemInit+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	40021000 	.word	0x40021000

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffca 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001218:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800122a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
	ldr	r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001232:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <LoopForever+0x16>)
	cmp	r2, r3
 800123a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 f9e1 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff fcdd 	bl	8000c00 <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800124c:	08004b88 	.word	0x08004b88
	ldr	r0, =_sdata
 8001250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001254:	20000220 	.word	0x20000220
	ldr	r2, =_sbss
 8001258:	20000220 	.word	0x20000220
	ldr	r3, = _ebss
 800125c:	200002e8 	.word	0x200002e8

08001260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f943 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f80e 	bl	8001294 <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e001      	b.n	8001288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001284:	f7ff feba 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001288:	79fb      	ldrb	r3, [r7, #7]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_InitTick+0x6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d023      	beq.n	80012f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_InitTick+0x70>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_InitTick+0x6c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f941 	bl	8001546 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d809      	bhi.n	80012e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f919 	bl	800150e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_InitTick+0x74>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e007      	b.n	80012f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e004      	b.n	80012f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e001      	b.n	80012f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001b8 	.word	0x200001b8
 8001304:	200001b0 	.word	0x200001b0
 8001308:	200001b4 	.word	0x200001b4

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200001b8 	.word	0x200001b8
 8001330:	200002d4 	.word	0x200002d4

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200002d4 	.word	0x200002d4

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001b8 	.word	0x200001b8

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff47 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5c 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e148      	b.n	8001802 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 813a 	beq.w	80017fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d00b      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159c:	2b11      	cmp	r3, #17
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0xea>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b12      	cmp	r3, #18
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8094 	beq.w	80017fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <HAL_GPIO_Init+0x2c0>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	4a51      	ldr	r2, [pc, #324]	; (8001820 <HAL_GPIO_Init+0x2c0>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6613      	str	r3, [r2, #96]	; 0x60
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x2c0>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1d4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a43      	ldr	r2, [pc, #268]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1d0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_GPIO_Init+0x2cc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1cc>
 8001728:	2302      	movs	r3, #2
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x1d6>
 800172c:	2307      	movs	r3, #7
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x1d6>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x1d6>
 8001734:	2300      	movs	r3, #0
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001746:	4937      	ldr	r1, [pc, #220]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f aeaf 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001850:	e002      	b.n	8001858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40007000 	.word	0x40007000

08001884 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_PWREx_GetVoltageRange+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ae:	d130      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018bc:	d038      	beq.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2232      	movs	r2, #50	; 0x32
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e4:	e002      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f8:	d102      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f2      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190c:	d110      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e00f      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191e:	d007      	beq.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40007000 	.word	0x40007000
 8001944:	200001b0 	.word	0x200001b0
 8001948:	431bde83 	.word	0x431bde83

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	f000 bc11 	b.w	8002182 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001960:	4ba0      	ldr	r3, [pc, #640]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800196a:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80e4 	beq.w	8001b4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_RCC_OscConfig+0x4c>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	f040 808b 	bne.w	8001aa6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 8087 	bne.w	8001aa6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x64>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e3e8      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_RCC_OscConfig+0x7e>
 80019c0:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c8:	e005      	b.n	80019d6 <HAL_RCC_OscConfig+0x8a>
 80019ca:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d223      	bcs.n	8001a22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fd7a 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3c9      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7c      	ldr	r2, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4977      	ldr	r1, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0c:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	4972      	ldr	r1, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e025      	b.n	8001a6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a22:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6f      	ldr	r2, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	496a      	ldr	r1, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fd3a 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e389      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a6e:	f000 fc6f 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	495a      	ldr	r1, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x29c>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_OscConfig+0x2a0>)
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a8e:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_RCC_OscConfig+0x2a4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fbfe 	bl	8001294 <HAL_InitTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d052      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	e36d      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d032      	beq.n	8001b14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fc3b 	bl	8001334 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc37 	bl	8001334 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e356      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	493a      	ldr	r1, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4935      	ldr	r1, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
 8001b12:	e01a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc08 	bl	8001334 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc04 	bl	8001334 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e323      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1dc>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d073      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x21c>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d10e      	bne.n	8001b80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d063      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d15f      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e300      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x24c>
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x270>
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x298>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fbaa 	bl	8001334 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	e010      	b.n	8001c06 <HAL_RCC_OscConfig+0x2ba>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08004a98 	.word	0x08004a98
 8001bec:	200001b0 	.word	0x200001b0
 8001bf0:	200001b4 	.word	0x200001b4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fb9e 	bl	8001334 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e2bd      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2a8>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb8e 	bl	8001334 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fb8a 	bl	8001334 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e2a9      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	4ba5      	ldr	r3, [pc, #660]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2d0>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d060      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_OscConfig+0x310>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d116      	bne.n	8001c8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	4b99      	ldr	r3, [pc, #612]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x328>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e286      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	4990      	ldr	r1, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c88:	e040      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a8b      	ldr	r2, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb49 	bl	8001334 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb45 	bl	8001334 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e264      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	497c      	ldr	r1, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a79      	ldr	r2, [pc, #484]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb25 	bl	8001334 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fb21 	bl	8001334 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e240      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fb00 	bl	8001334 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fafc 	bl	8001334 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e21b      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
 8001d58:	e01b      	b.n	8001d92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fae3 	bl	8001334 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff fadf 	bl	8001334 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1fe      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a6 	beq.w	8001eec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a43      	ldr	r2, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d118      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de4:	f7ff faa6 	bl	8001334 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7ff faa2 	bl	8001334 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1c1      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4d8>
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e22:	e024      	b.n	8001e6e <HAL_RCC_OscConfig+0x522>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d110      	bne.n	8001e4e <HAL_RCC_OscConfig+0x502>
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	e00f      	b.n	8001e6e <HAL_RCC_OscConfig+0x522>
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff fa5d 	bl	8001334 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fa59 	bl	8001334 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e176      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ed      	beq.n	8001e7e <HAL_RCC_OscConfig+0x532>
 8001ea2:	e01a      	b.n	8001eda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa46 	bl	8001334 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eaa:	e00f      	b.n	8001ecc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff fa42 	bl	8001334 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d906      	bls.n	8001ecc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e15f      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ecc:	4baa      	ldr	r3, [pc, #680]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e8      	bne.n	8001eac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4ba5      	ldr	r3, [pc, #660]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	4aa4      	ldr	r2, [pc, #656]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f00:	4b9d      	ldr	r3, [pc, #628]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f06:	4a9c      	ldr	r2, [pc, #624]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fa10 	bl	8001334 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f18:	f7ff fa0c 	bl	8001334 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e12b      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f2a:	4b93      	ldr	r3, [pc, #588]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCC_OscConfig+0x5cc>
 8001f38:	e01b      	b.n	8001f72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f3a:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f40:	4a8d      	ldr	r2, [pc, #564]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f9f3 	bl	8001334 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f52:	f7ff f9ef 	bl	8001334 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10e      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f64:	4b84      	ldr	r3, [pc, #528]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8102 	beq.w	8002180 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	f040 80c5 	bne.w	8002110 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f86:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d12c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d123      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d11b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d113      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d109      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	3b01      	subs	r3, #1
 8001fee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d067      	beq.n	80020c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d062      	beq.n	80020c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0bb      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002014:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002016:	f7ff f98d 	bl	8001334 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff f989 	bl	8001334 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0a8      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203c:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_OscConfig+0x830>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204c:	3a01      	subs	r2, #1
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002056:	0212      	lsls	r2, r2, #8
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800205e:	0852      	lsrs	r2, r2, #1
 8002060:	3a01      	subs	r2, #1
 8002062:	0552      	lsls	r2, r2, #21
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	3a01      	subs	r2, #1
 800206e:	0652      	lsls	r2, r2, #25
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002076:	06d2      	lsls	r2, r2, #27
 8002078:	430a      	orrs	r2, r1
 800207a:	493f      	ldr	r1, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a39      	ldr	r2, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002098:	f7ff f94c 	bl	8001334 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f948 	bl	8001334 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e067      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020be:	e05f      	b.n	8002180 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e05e      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d157      	bne.n	8002180 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e8:	f7ff f924 	bl	8001334 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f920 	bl	8001334 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e03f      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x7a4>
 800210e:	e037      	b.n	8002180 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d02d      	beq.n	8002172 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002140:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f8f3 	bl	8001334 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff f8ef 	bl	8001334 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e00e      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <HAL_RCC_OscConfig+0x82c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x806>
 8002170:	e006      	b.n	8002180 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e005      	b.n	8002182 <HAL_RCC_OscConfig+0x836>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0c8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4961      	ldr	r1, [pc, #388]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d04c      	beq.n	8002276 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e09e      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d107      	bne.n	800220c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e092      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e086      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e07e      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	493f      	ldr	r1, [pc, #252]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002246:	f7ff f875 	bl	8001334 <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224c:	e00a      	b.n	8002264 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224e:	f7ff f871 	bl	8001334 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e066      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 020c 	and.w	r2, r3, #12
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	429a      	cmp	r2, r3
 8002274:	d1eb      	bne.n	800224e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492c      	ldr	r1, [pc, #176]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4924      	ldr	r1, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e036      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4918      	ldr	r1, [pc, #96]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4910      	ldr	r1, [pc, #64]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002302:	f000 f825 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490c      	ldr	r1, [pc, #48]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe ffb4 	bl	8001294 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002330:	7afb      	ldrb	r3, [r7, #11]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	08004a98 	.word	0x08004a98
 8002348:	200001b0 	.word	0x200001b0
 800234c:	200001b4 	.word	0x200001b4

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d11e      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002384:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e004      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d134      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xac>
 80023f4:	e005      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f8:	617b      	str	r3, [r7, #20]
      break;
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023fe:	617b      	str	r3, [r7, #20]
      break;
 8002400:	e002      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	617b      	str	r3, [r7, #20]
      break;
 8002406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	3301      	adds	r3, #1
 8002414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	fb02 f203 	mul.w	r2, r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0e5b      	lsrs	r3, r3, #25
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002448:	69bb      	ldr	r3, [r7, #24]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	08004ab0 	.word	0x08004ab0
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200001b0 	.word	0x200001b0

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08004aa8 	.word	0x08004aa8

080024ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b0:	f7ff ffda 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0adb      	lsrs	r3, r3, #11
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4904      	ldr	r1, [pc, #16]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08004aa8 	.word	0x08004aa8

080024d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024f0:	f7ff f9c8 	bl	8001884 <HAL_PWREx_GetVoltageRange>
 80024f4:	6178      	str	r0, [r7, #20]
 80024f6:	e014      	b.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	; 0x58
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f9b8 	bl	8001884 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002528:	d10b      	bne.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d919      	bls.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2ba0      	cmp	r3, #160	; 0xa0
 8002534:	d902      	bls.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e013      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e010      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d902      	bls.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002548:	2303      	movs	r3, #3
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e00a      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d102      	bne.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002554:	2302      	movs	r3, #2
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e004      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b70      	cmp	r3, #112	; 0x70
 800255e:	d101      	bne.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002560:	2301      	movs	r3, #1
 8002562:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 0207 	bic.w	r2, r3, #7
 800256c:	4909      	ldr	r1, [pc, #36]	; (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	40022000 	.word	0x40022000

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a0:	2300      	movs	r3, #0
 80025a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d031      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025bc:	d01a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025c2:	d814      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025cc:	d10f      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025ce:	4bac      	ldr	r3, [pc, #688]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4aab      	ldr	r2, [pc, #684]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025da:	e00c      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f9dc 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ec:	e003      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	74fb      	strb	r3, [r7, #19]
      break;
 80025f2:	e000      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025fc:	4ba0      	ldr	r3, [pc, #640]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	499d      	ldr	r1, [pc, #628]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002612:	e001      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8099 	beq.w	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262a:	4b95      	ldr	r3, [pc, #596]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a8e      	ldr	r2, [pc, #568]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265c:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a88      	ldr	r2, [pc, #544]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002668:	f7fe fe64 	bl	8001334 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800266e:	e009      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fe60 	bl	8001334 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	74fb      	strb	r3, [r7, #19]
        break;
 8002682:	e005      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002684:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d155      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002696:	4b7a      	ldr	r3, [pc, #488]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01e      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d019      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ce:	4b6c      	ldr	r3, [pc, #432]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026de:	4a68      	ldr	r2, [pc, #416]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe20 	bl	8001334 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	e00b      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe fe1c 	bl	8001334 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d902      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	74fb      	strb	r3, [r7, #19]
            break;
 800270e:	e006      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002710:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0ec      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002724:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	4953      	ldr	r1, [pc, #332]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
 8002740:	e001      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002746:	7c7b      	ldrb	r3, [r7, #17]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a4b      	ldr	r2, [pc, #300]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4943      	ldr	r1, [pc, #268]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f023 020c 	bic.w	r2, r3, #12
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	493a      	ldr	r1, [pc, #232]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	4932      	ldr	r1, [pc, #200]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	4929      	ldr	r1, [pc, #164]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4921      	ldr	r1, [pc, #132]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4918      	ldr	r1, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4910      	ldr	r1, [pc, #64]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02c      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002870:	d10a      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4a02      	ldr	r2, [pc, #8]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287c:	60d3      	str	r3, [r2, #12]
 800287e:	e015      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f881 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d028      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	492d      	ldr	r1, [pc, #180]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e011      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ee:	d10c      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f852 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01c      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002924:	4915      	ldr	r1, [pc, #84]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f82f 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002972:	7cbb      	ldrb	r3, [r7, #18]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ae:	4b74      	ldr	r3, [pc, #464]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d018      	beq.n	80029ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ba:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
       ||
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029d2:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
       ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d047      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e044      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d018      	beq.n	8002a26 <RCCEx_PLLSAI1_Config+0x86>
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d825      	bhi.n	8002a44 <RCCEx_PLLSAI1_Config+0xa4>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x62>
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d009      	beq.n	8002a14 <RCCEx_PLLSAI1_Config+0x74>
 8002a00:	e020      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a12:	e01a      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e013      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a26:	4b56      	ldr	r3, [pc, #344]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a42:	e006      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e004      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a5a:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	4943      	ldr	r1, [pc, #268]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d17c      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a7c:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3f      	ldr	r2, [pc, #252]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fe fc54 	bl	8001334 <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a8e:	e009      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a90:	f7fe fc50 	bl	8001334 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d902      	bls.n	8002aa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa2:	e005      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ef      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d15f      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d110      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ac4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	0211      	lsls	r1, r2, #8
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	06d2      	lsls	r2, r2, #27
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	492a      	ldr	r1, [pc, #168]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
 8002adc:	e027      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d112      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae4:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6892      	ldr	r2, [r2, #8]
 8002af4:	0211      	lsls	r1, r2, #8
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6912      	ldr	r2, [r2, #16]
 8002afa:	0852      	lsrs	r2, r2, #1
 8002afc:	3a01      	subs	r2, #1
 8002afe:	0552      	lsls	r2, r2, #21
 8002b00:	430a      	orrs	r2, r1
 8002b02:	491f      	ldr	r1, [pc, #124]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	610b      	str	r3, [r1, #16]
 8002b08:	e011      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6892      	ldr	r2, [r2, #8]
 8002b1a:	0211      	lsls	r1, r2, #8
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6952      	ldr	r2, [r2, #20]
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0652      	lsls	r2, r2, #25
 8002b26:	430a      	orrs	r2, r1
 8002b28:	4915      	ldr	r1, [pc, #84]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fbfb 	bl	8001334 <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b40:	e009      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b42:	f7fe fbf7 	bl	8001334 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d902      	bls.n	8002b56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	73fb      	strb	r3, [r7, #15]
          break;
 8002b54:	e005      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ef      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e040      	b.n	8002c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fa4c 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f992 	bl	8002eec <UART_SetConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fb92 	bl	8003304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fc19 	bl	8003448 <UART_CheckIdleState>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 8082 	bne.w	8002d3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_UART_Transmit+0x26>
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07a      	b.n	8002d40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Transmit+0x38>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e073      	b.n	8002d40 <HAL_UART_Transmit+0x120>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2221      	movs	r2, #33	; 0x21
 8002c6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fb61 	bl	8001334 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_UART_Transmit+0x80>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cb0:	e02d      	b.n	8002d0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fc0c 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e039      	b.n	8002d40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	881a      	ldrh	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e008      	b.n	8002cfc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1cb      	bne.n	8002cb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fbd8 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e005      	b.n	8002d40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	f040 80bf 	bne.w	8002ee0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_UART_Receive+0x26>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0b7      	b.n	8002ee2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Receive+0x38>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0b0      	b.n	8002ee2 <HAL_UART_Receive+0x19a>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2222      	movs	r2, #34	; 0x22
 8002d94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe faca 	bl	8001334 <HAL_GetTick>
 8002da0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d10e      	bne.n	8002dda <HAL_UART_Receive+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_UART_Receive+0x88>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dce:	e02d      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	22ff      	movs	r2, #255	; 0xff
 8002dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dd8:	e028      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_UART_Receive+0xb6>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Receive+0xac>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002df2:	e01b      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	227f      	movs	r2, #127	; 0x7f
 8002df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dfc:	e016      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e06:	d10d      	bne.n	8002e24 <HAL_UART_Receive+0xdc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <HAL_UART_Receive+0xd2>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	227f      	movs	r2, #127	; 0x7f
 8002e14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e18:	e008      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e22:	e003      	b.n	8002e2c <HAL_UART_Receive+0xe4>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e32:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d108      	bne.n	8002e50 <HAL_UART_Receive+0x108>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e003      	b.n	8002e58 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e60:	e033      	b.n	8002eca <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb34 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e032      	b.n	8002ee2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	8a7b      	ldrh	r3, [r7, #18]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	3302      	adds	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e00d      	b.n	8002eb8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	8a7b      	ldrh	r3, [r7, #18]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1c5      	bne.n	8002e62 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4baf      	ldr	r3, [pc, #700]	; (80031d4 <UART_SetConfig+0x2e8>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	69f9      	ldr	r1, [r7, #28]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4aa4      	ldr	r2, [pc, #656]	; (80031d8 <UART_SetConfig+0x2ec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a9b      	ldr	r2, [pc, #620]	; (80031dc <UART_SetConfig+0x2f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d121      	bne.n	8002fb6 <UART_SetConfig+0xca>
 8002f72:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <UART_SetConfig+0x2f4>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d817      	bhi.n	8002fb0 <UART_SetConfig+0xc4>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <UART_SetConfig+0x9c>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002f9f 	.word	0x08002f9f
 8002f94:	08002fab 	.word	0x08002fab
 8002f98:	2301      	movs	r3, #1
 8002f9a:	76fb      	strb	r3, [r7, #27]
 8002f9c:	e070      	b.n	8003080 <UART_SetConfig+0x194>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	76fb      	strb	r3, [r7, #27]
 8002fa2:	e06d      	b.n	8003080 <UART_SetConfig+0x194>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e06a      	b.n	8003080 <UART_SetConfig+0x194>
 8002faa:	2308      	movs	r3, #8
 8002fac:	76fb      	strb	r3, [r7, #27]
 8002fae:	e067      	b.n	8003080 <UART_SetConfig+0x194>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	e064      	b.n	8003080 <UART_SetConfig+0x194>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <UART_SetConfig+0x2f8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d132      	bne.n	8003026 <UART_SetConfig+0x13a>
 8002fc0:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <UART_SetConfig+0x2f4>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d828      	bhi.n	8003020 <UART_SetConfig+0x134>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <UART_SetConfig+0xe8>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08003009 	.word	0x08003009
 8002fd8:	08003021 	.word	0x08003021
 8002fdc:	08003021 	.word	0x08003021
 8002fe0:	08003021 	.word	0x08003021
 8002fe4:	08003015 	.word	0x08003015
 8002fe8:	08003021 	.word	0x08003021
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	08003021 	.word	0x08003021
 8002ff4:	0800300f 	.word	0x0800300f
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003021 	.word	0x08003021
 8003004:	0800301b 	.word	0x0800301b
 8003008:	2300      	movs	r3, #0
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e038      	b.n	8003080 <UART_SetConfig+0x194>
 800300e:	2302      	movs	r3, #2
 8003010:	76fb      	strb	r3, [r7, #27]
 8003012:	e035      	b.n	8003080 <UART_SetConfig+0x194>
 8003014:	2304      	movs	r3, #4
 8003016:	76fb      	strb	r3, [r7, #27]
 8003018:	e032      	b.n	8003080 <UART_SetConfig+0x194>
 800301a:	2308      	movs	r3, #8
 800301c:	76fb      	strb	r3, [r7, #27]
 800301e:	e02f      	b.n	8003080 <UART_SetConfig+0x194>
 8003020:	2310      	movs	r3, #16
 8003022:	76fb      	strb	r3, [r7, #27]
 8003024:	e02c      	b.n	8003080 <UART_SetConfig+0x194>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6b      	ldr	r2, [pc, #428]	; (80031d8 <UART_SetConfig+0x2ec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d125      	bne.n	800307c <UART_SetConfig+0x190>
 8003030:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <UART_SetConfig+0x2f4>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800303e:	d017      	beq.n	8003070 <UART_SetConfig+0x184>
 8003040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003044:	d817      	bhi.n	8003076 <UART_SetConfig+0x18a>
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d00b      	beq.n	8003064 <UART_SetConfig+0x178>
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003050:	d811      	bhi.n	8003076 <UART_SetConfig+0x18a>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <UART_SetConfig+0x172>
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d006      	beq.n	800306a <UART_SetConfig+0x17e>
 800305c:	e00b      	b.n	8003076 <UART_SetConfig+0x18a>
 800305e:	2300      	movs	r3, #0
 8003060:	76fb      	strb	r3, [r7, #27]
 8003062:	e00d      	b.n	8003080 <UART_SetConfig+0x194>
 8003064:	2302      	movs	r3, #2
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	e00a      	b.n	8003080 <UART_SetConfig+0x194>
 800306a:	2304      	movs	r3, #4
 800306c:	76fb      	strb	r3, [r7, #27]
 800306e:	e007      	b.n	8003080 <UART_SetConfig+0x194>
 8003070:	2308      	movs	r3, #8
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e004      	b.n	8003080 <UART_SetConfig+0x194>
 8003076:	2310      	movs	r3, #16
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e001      	b.n	8003080 <UART_SetConfig+0x194>
 800307c:	2310      	movs	r3, #16
 800307e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <UART_SetConfig+0x2ec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d173      	bne.n	8003172 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800308a:	7efb      	ldrb	r3, [r7, #27]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d824      	bhi.n	80030da <UART_SetConfig+0x1ee>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x1ac>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030db 	.word	0x080030db
 80030a0:	080030c5 	.word	0x080030c5
 80030a4:	080030db 	.word	0x080030db
 80030a8:	080030cb 	.word	0x080030cb
 80030ac:	080030db 	.word	0x080030db
 80030b0:	080030db 	.word	0x080030db
 80030b4:	080030db 	.word	0x080030db
 80030b8:	080030d3 	.word	0x080030d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7ff f9e0 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 80030c0:	6178      	str	r0, [r7, #20]
        break;
 80030c2:	e00f      	b.n	80030e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c4:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <UART_SetConfig+0x2fc>)
 80030c6:	617b      	str	r3, [r7, #20]
        break;
 80030c8:	e00c      	b.n	80030e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ca:	f7ff f941 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 80030ce:	6178      	str	r0, [r7, #20]
        break;
 80030d0:	e008      	b.n	80030e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	617b      	str	r3, [r7, #20]
        break;
 80030d8:	e004      	b.n	80030e4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	76bb      	strb	r3, [r7, #26]
        break;
 80030e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80fe 	beq.w	80032e8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d305      	bcc.n	8003108 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	76bb      	strb	r3, [r7, #26]
 800310c:	e0ec      	b.n	80032e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4618      	mov	r0, r3
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	020b      	lsls	r3, r1, #8
 8003120:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003124:	0202      	lsls	r2, r0, #8
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6849      	ldr	r1, [r1, #4]
 800312a:	0849      	lsrs	r1, r1, #1
 800312c:	4608      	mov	r0, r1
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	1814      	adds	r4, r2, r0
 8003134:	eb43 0501 	adc.w	r5, r3, r1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	461a      	mov	r2, r3
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd fa33 	bl	80005b0 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4613      	mov	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003158:	d308      	bcc.n	800316c <UART_SetConfig+0x280>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003160:	d204      	bcs.n	800316c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e0bd      	b.n	80032e8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	76bb      	strb	r3, [r7, #26]
 8003170:	e0ba      	b.n	80032e8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d168      	bne.n	800324e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800317c:	7efb      	ldrb	r3, [r7, #27]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d834      	bhi.n	80031ec <UART_SetConfig+0x300>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x29c>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031ed 	.word	0x080031ed
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031ed 	.word	0x080031ed
 80031a4:	080031ed 	.word	0x080031ed
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7ff f968 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 80031b0:	6178      	str	r0, [r7, #20]
        break;
 80031b2:	e020      	b.n	80031f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7ff f97a 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e01c      	b.n	80031f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <UART_SetConfig+0x2fc>)
 80031be:	617b      	str	r3, [r7, #20]
        break;
 80031c0:	e019      	b.n	80031f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7ff f8c5 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 80031c6:	6178      	str	r0, [r7, #20]
        break;
 80031c8:	e015      	b.n	80031f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	617b      	str	r3, [r7, #20]
        break;
 80031d0:	e011      	b.n	80031f6 <UART_SetConfig+0x30a>
 80031d2:	bf00      	nop
 80031d4:	efff69f3 	.word	0xefff69f3
 80031d8:	40008000 	.word	0x40008000
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40004400 	.word	0x40004400
 80031e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	76bb      	strb	r3, [r7, #26]
        break;
 80031f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d075      	beq.n	80032e8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x35c>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e04f      	b.n	80032e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e04c      	b.n	80032e8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x3ba>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x370>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f8fe 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f910 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <UART_SetConfig+0x414>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7ff f85b 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d018      	beq.n	80032e8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	085a      	lsrs	r2, r3, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	441a      	add	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d908      	bls.n	80032e4 <UART_SetConfig+0x3f8>
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d204      	bcs.n	80032e4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e001      	b.n	80032e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}
 80032fe:	bf00      	nop
 8003300:	00f42400 	.word	0x00f42400

08003304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01a      	beq.n	800341a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d10a      	bne.n	800341a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003458:	f7fd ff6c 	bl	8001334 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d10e      	bne.n	800348a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f82d 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e023      	b.n	80034d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d10e      	bne.n	80034b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f817 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00d      	b.n	80034d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ea:	e05e      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d05a      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f4:	f7fd ff1e 	bl	8001334 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <UART_WaitOnFlagUntilTimeout+0x30>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11b      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003518:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e043      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02c      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355e:	d124      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003568:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003578:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00f      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d091      	beq.n	80034ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <__errno>:
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <__errno+0x8>)
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	200001bc 	.word	0x200001bc

080035e0 <getchar>:
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <getchar+0x20>)
 80035e2:	b510      	push	{r4, lr}
 80035e4:	681c      	ldr	r4, [r3, #0]
 80035e6:	b124      	cbz	r4, 80035f2 <getchar+0x12>
 80035e8:	69a3      	ldr	r3, [r4, #24]
 80035ea:	b913      	cbnz	r3, 80035f2 <getchar+0x12>
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 fb75 	bl	8003cdc <__sinit>
 80035f2:	6861      	ldr	r1, [r4, #4]
 80035f4:	4620      	mov	r0, r4
 80035f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fa:	f000 bc29 	b.w	8003e50 <_getc_r>
 80035fe:	bf00      	nop
 8003600:	200001bc 	.word	0x200001bc

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4d0d      	ldr	r5, [pc, #52]	; (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2600      	movs	r6, #0
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4d0b      	ldr	r5, [pc, #44]	; (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <__libc_init_array+0x44>)
 8003618:	f001 f9ea 	bl	80049f0 <_init>
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2600      	movs	r6, #0
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08004b80 	.word	0x08004b80
 8003640:	08004b80 	.word	0x08004b80
 8003644:	08004b80 	.word	0x08004b80
 8003648:	08004b84 	.word	0x08004b84

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <iprintf>:
 800365c:	b40f      	push	{r0, r1, r2, r3}
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <iprintf+0x2c>)
 8003660:	b513      	push	{r0, r1, r4, lr}
 8003662:	681c      	ldr	r4, [r3, #0]
 8003664:	b124      	cbz	r4, 8003670 <iprintf+0x14>
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	b913      	cbnz	r3, 8003670 <iprintf+0x14>
 800366a:	4620      	mov	r0, r4
 800366c:	f000 fb36 	bl	8003cdc <__sinit>
 8003670:	ab05      	add	r3, sp, #20
 8003672:	9a04      	ldr	r2, [sp, #16]
 8003674:	68a1      	ldr	r1, [r4, #8]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	4620      	mov	r0, r4
 800367a:	f000 fd6d 	bl	8004158 <_vfiprintf_r>
 800367e:	b002      	add	sp, #8
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	b004      	add	sp, #16
 8003686:	4770      	bx	lr
 8003688:	200001bc 	.word	0x200001bc

0800368c <_puts_r>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	460e      	mov	r6, r1
 8003690:	4605      	mov	r5, r0
 8003692:	b118      	cbz	r0, 800369c <_puts_r+0x10>
 8003694:	6983      	ldr	r3, [r0, #24]
 8003696:	b90b      	cbnz	r3, 800369c <_puts_r+0x10>
 8003698:	f000 fb20 	bl	8003cdc <__sinit>
 800369c:	69ab      	ldr	r3, [r5, #24]
 800369e:	68ac      	ldr	r4, [r5, #8]
 80036a0:	b913      	cbnz	r3, 80036a8 <_puts_r+0x1c>
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 fb1a 	bl	8003cdc <__sinit>
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <_puts_r+0xd0>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d120      	bne.n	80036f0 <_puts_r+0x64>
 80036ae:	686c      	ldr	r4, [r5, #4]
 80036b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b2:	07db      	lsls	r3, r3, #31
 80036b4:	d405      	bmi.n	80036c2 <_puts_r+0x36>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0598      	lsls	r0, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_puts_r+0x36>
 80036bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036be:	f000 fc08 	bl	8003ed2 <__retarget_lock_acquire_recursive>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	0719      	lsls	r1, r3, #28
 80036c6:	d51d      	bpl.n	8003704 <_puts_r+0x78>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	b1db      	cbz	r3, 8003704 <_puts_r+0x78>
 80036cc:	3e01      	subs	r6, #1
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60a3      	str	r3, [r4, #8]
 80036d8:	bb39      	cbnz	r1, 800372a <_puts_r+0x9e>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da38      	bge.n	8003750 <_puts_r+0xc4>
 80036de:	4622      	mov	r2, r4
 80036e0:	210a      	movs	r1, #10
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 f90e 	bl	8003904 <__swbuf_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d011      	beq.n	8003710 <_puts_r+0x84>
 80036ec:	250a      	movs	r5, #10
 80036ee:	e011      	b.n	8003714 <_puts_r+0x88>
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <_puts_r+0xd4>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <_puts_r+0x6e>
 80036f6:	68ac      	ldr	r4, [r5, #8]
 80036f8:	e7da      	b.n	80036b0 <_puts_r+0x24>
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <_puts_r+0xd8>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68ec      	ldreq	r4, [r5, #12]
 8003702:	e7d5      	b.n	80036b0 <_puts_r+0x24>
 8003704:	4621      	mov	r1, r4
 8003706:	4628      	mov	r0, r5
 8003708:	f000 f94e 	bl	80039a8 <__swsetup_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	d0dd      	beq.n	80036cc <_puts_r+0x40>
 8003710:	f04f 35ff 	mov.w	r5, #4294967295
 8003714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003716:	07da      	lsls	r2, r3, #31
 8003718:	d405      	bmi.n	8003726 <_puts_r+0x9a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	059b      	lsls	r3, r3, #22
 800371e:	d402      	bmi.n	8003726 <_puts_r+0x9a>
 8003720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003722:	f000 fbd7 	bl	8003ed4 <__retarget_lock_release_recursive>
 8003726:	4628      	mov	r0, r5
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	2b00      	cmp	r3, #0
 800372c:	da04      	bge.n	8003738 <_puts_r+0xac>
 800372e:	69a2      	ldr	r2, [r4, #24]
 8003730:	429a      	cmp	r2, r3
 8003732:	dc06      	bgt.n	8003742 <_puts_r+0xb6>
 8003734:	290a      	cmp	r1, #10
 8003736:	d004      	beq.n	8003742 <_puts_r+0xb6>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	7019      	strb	r1, [r3, #0]
 8003740:	e7c5      	b.n	80036ce <_puts_r+0x42>
 8003742:	4622      	mov	r2, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f8dd 	bl	8003904 <__swbuf_r>
 800374a:	3001      	adds	r0, #1
 800374c:	d1bf      	bne.n	80036ce <_puts_r+0x42>
 800374e:	e7df      	b.n	8003710 <_puts_r+0x84>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	250a      	movs	r5, #10
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	6022      	str	r2, [r4, #0]
 8003758:	701d      	strb	r5, [r3, #0]
 800375a:	e7db      	b.n	8003714 <_puts_r+0x88>
 800375c:	08004b04 	.word	0x08004b04
 8003760:	08004b24 	.word	0x08004b24
 8003764:	08004ae4 	.word	0x08004ae4

08003768 <puts>:
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <puts+0xc>)
 800376a:	4601      	mov	r1, r0
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7ff bf8d 	b.w	800368c <_puts_r>
 8003772:	bf00      	nop
 8003774:	200001bc 	.word	0x200001bc

08003778 <setvbuf>:
 8003778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800377c:	461d      	mov	r5, r3
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <setvbuf+0x17c>)
 8003780:	681f      	ldr	r7, [r3, #0]
 8003782:	4604      	mov	r4, r0
 8003784:	460e      	mov	r6, r1
 8003786:	4690      	mov	r8, r2
 8003788:	b127      	cbz	r7, 8003794 <setvbuf+0x1c>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	b913      	cbnz	r3, 8003794 <setvbuf+0x1c>
 800378e:	4638      	mov	r0, r7
 8003790:	f000 faa4 	bl	8003cdc <__sinit>
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <setvbuf+0x180>)
 8003796:	429c      	cmp	r4, r3
 8003798:	d167      	bne.n	800386a <setvbuf+0xf2>
 800379a:	687c      	ldr	r4, [r7, #4]
 800379c:	f1b8 0f02 	cmp.w	r8, #2
 80037a0:	d006      	beq.n	80037b0 <setvbuf+0x38>
 80037a2:	f1b8 0f01 	cmp.w	r8, #1
 80037a6:	f200 809f 	bhi.w	80038e8 <setvbuf+0x170>
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	f2c0 809c 	blt.w	80038e8 <setvbuf+0x170>
 80037b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037b2:	07db      	lsls	r3, r3, #31
 80037b4:	d405      	bmi.n	80037c2 <setvbuf+0x4a>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	0598      	lsls	r0, r3, #22
 80037ba:	d402      	bmi.n	80037c2 <setvbuf+0x4a>
 80037bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037be:	f000 fb88 	bl	8003ed2 <__retarget_lock_acquire_recursive>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4638      	mov	r0, r7
 80037c6:	f000 f9e3 	bl	8003b90 <_fflush_r>
 80037ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037cc:	b141      	cbz	r1, 80037e0 <setvbuf+0x68>
 80037ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d002      	beq.n	80037dc <setvbuf+0x64>
 80037d6:	4638      	mov	r0, r7
 80037d8:	f000 fbea 	bl	8003fb0 <_free_r>
 80037dc:	2300      	movs	r3, #0
 80037de:	6363      	str	r3, [r4, #52]	; 0x34
 80037e0:	2300      	movs	r3, #0
 80037e2:	61a3      	str	r3, [r4, #24]
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	0619      	lsls	r1, r3, #24
 80037ea:	d503      	bpl.n	80037f4 <setvbuf+0x7c>
 80037ec:	6921      	ldr	r1, [r4, #16]
 80037ee:	4638      	mov	r0, r7
 80037f0:	f000 fbde 	bl	8003fb0 <_free_r>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f1b8 0f02 	cmp.w	r8, #2
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	d06c      	beq.n	80038e0 <setvbuf+0x168>
 8003806:	ab01      	add	r3, sp, #4
 8003808:	466a      	mov	r2, sp
 800380a:	4621      	mov	r1, r4
 800380c:	4638      	mov	r0, r7
 800380e:	f000 fb62 	bl	8003ed6 <__swhatbuf_r>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	4318      	orrs	r0, r3
 8003816:	81a0      	strh	r0, [r4, #12]
 8003818:	2d00      	cmp	r5, #0
 800381a:	d130      	bne.n	800387e <setvbuf+0x106>
 800381c:	9d00      	ldr	r5, [sp, #0]
 800381e:	4628      	mov	r0, r5
 8003820:	f000 fbbe 	bl	8003fa0 <malloc>
 8003824:	4606      	mov	r6, r0
 8003826:	2800      	cmp	r0, #0
 8003828:	d155      	bne.n	80038d6 <setvbuf+0x15e>
 800382a:	f8dd 9000 	ldr.w	r9, [sp]
 800382e:	45a9      	cmp	r9, r5
 8003830:	d14a      	bne.n	80038c8 <setvbuf+0x150>
 8003832:	f04f 35ff 	mov.w	r5, #4294967295
 8003836:	2200      	movs	r2, #0
 8003838:	60a2      	str	r2, [r4, #8]
 800383a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800383e:	6022      	str	r2, [r4, #0]
 8003840:	6122      	str	r2, [r4, #16]
 8003842:	2201      	movs	r2, #1
 8003844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003848:	6162      	str	r2, [r4, #20]
 800384a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	07d2      	lsls	r2, r2, #31
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	d405      	bmi.n	8003862 <setvbuf+0xea>
 8003856:	f413 7f00 	tst.w	r3, #512	; 0x200
 800385a:	d102      	bne.n	8003862 <setvbuf+0xea>
 800385c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385e:	f000 fb39 	bl	8003ed4 <__retarget_lock_release_recursive>
 8003862:	4628      	mov	r0, r5
 8003864:	b003      	add	sp, #12
 8003866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <setvbuf+0x184>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d101      	bne.n	8003874 <setvbuf+0xfc>
 8003870:	68bc      	ldr	r4, [r7, #8]
 8003872:	e793      	b.n	800379c <setvbuf+0x24>
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <setvbuf+0x188>)
 8003876:	429c      	cmp	r4, r3
 8003878:	bf08      	it	eq
 800387a:	68fc      	ldreq	r4, [r7, #12]
 800387c:	e78e      	b.n	800379c <setvbuf+0x24>
 800387e:	2e00      	cmp	r6, #0
 8003880:	d0cd      	beq.n	800381e <setvbuf+0xa6>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	b913      	cbnz	r3, 800388c <setvbuf+0x114>
 8003886:	4638      	mov	r0, r7
 8003888:	f000 fa28 	bl	8003cdc <__sinit>
 800388c:	f1b8 0f01 	cmp.w	r8, #1
 8003890:	bf08      	it	eq
 8003892:	89a3      	ldrheq	r3, [r4, #12]
 8003894:	6026      	str	r6, [r4, #0]
 8003896:	bf04      	itt	eq
 8003898:	f043 0301 	orreq.w	r3, r3, #1
 800389c:	81a3      	strheq	r3, [r4, #12]
 800389e:	89a2      	ldrh	r2, [r4, #12]
 80038a0:	f012 0308 	ands.w	r3, r2, #8
 80038a4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80038a8:	d01c      	beq.n	80038e4 <setvbuf+0x16c>
 80038aa:	07d3      	lsls	r3, r2, #31
 80038ac:	bf41      	itttt	mi
 80038ae:	2300      	movmi	r3, #0
 80038b0:	426d      	negmi	r5, r5
 80038b2:	60a3      	strmi	r3, [r4, #8]
 80038b4:	61a5      	strmi	r5, [r4, #24]
 80038b6:	bf58      	it	pl
 80038b8:	60a5      	strpl	r5, [r4, #8]
 80038ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80038bc:	f015 0501 	ands.w	r5, r5, #1
 80038c0:	d115      	bne.n	80038ee <setvbuf+0x176>
 80038c2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80038c6:	e7c8      	b.n	800385a <setvbuf+0xe2>
 80038c8:	4648      	mov	r0, r9
 80038ca:	f000 fb69 	bl	8003fa0 <malloc>
 80038ce:	4606      	mov	r6, r0
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d0ae      	beq.n	8003832 <setvbuf+0xba>
 80038d4:	464d      	mov	r5, r9
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	e7d0      	b.n	8003882 <setvbuf+0x10a>
 80038e0:	2500      	movs	r5, #0
 80038e2:	e7a8      	b.n	8003836 <setvbuf+0xbe>
 80038e4:	60a3      	str	r3, [r4, #8]
 80038e6:	e7e8      	b.n	80038ba <setvbuf+0x142>
 80038e8:	f04f 35ff 	mov.w	r5, #4294967295
 80038ec:	e7b9      	b.n	8003862 <setvbuf+0xea>
 80038ee:	2500      	movs	r5, #0
 80038f0:	e7b7      	b.n	8003862 <setvbuf+0xea>
 80038f2:	bf00      	nop
 80038f4:	200001bc 	.word	0x200001bc
 80038f8:	08004b04 	.word	0x08004b04
 80038fc:	08004b24 	.word	0x08004b24
 8003900:	08004ae4 	.word	0x08004ae4

08003904 <__swbuf_r>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	460e      	mov	r6, r1
 8003908:	4614      	mov	r4, r2
 800390a:	4605      	mov	r5, r0
 800390c:	b118      	cbz	r0, 8003916 <__swbuf_r+0x12>
 800390e:	6983      	ldr	r3, [r0, #24]
 8003910:	b90b      	cbnz	r3, 8003916 <__swbuf_r+0x12>
 8003912:	f000 f9e3 	bl	8003cdc <__sinit>
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <__swbuf_r+0x98>)
 8003918:	429c      	cmp	r4, r3
 800391a:	d12b      	bne.n	8003974 <__swbuf_r+0x70>
 800391c:	686c      	ldr	r4, [r5, #4]
 800391e:	69a3      	ldr	r3, [r4, #24]
 8003920:	60a3      	str	r3, [r4, #8]
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	071a      	lsls	r2, r3, #28
 8003926:	d52f      	bpl.n	8003988 <__swbuf_r+0x84>
 8003928:	6923      	ldr	r3, [r4, #16]
 800392a:	b36b      	cbz	r3, 8003988 <__swbuf_r+0x84>
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	1ac0      	subs	r0, r0, r3
 8003932:	6963      	ldr	r3, [r4, #20]
 8003934:	b2f6      	uxtb	r6, r6
 8003936:	4283      	cmp	r3, r0
 8003938:	4637      	mov	r7, r6
 800393a:	dc04      	bgt.n	8003946 <__swbuf_r+0x42>
 800393c:	4621      	mov	r1, r4
 800393e:	4628      	mov	r0, r5
 8003940:	f000 f926 	bl	8003b90 <_fflush_r>
 8003944:	bb30      	cbnz	r0, 8003994 <__swbuf_r+0x90>
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	3b01      	subs	r3, #1
 800394a:	60a3      	str	r3, [r4, #8]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	6022      	str	r2, [r4, #0]
 8003952:	701e      	strb	r6, [r3, #0]
 8003954:	6963      	ldr	r3, [r4, #20]
 8003956:	3001      	adds	r0, #1
 8003958:	4283      	cmp	r3, r0
 800395a:	d004      	beq.n	8003966 <__swbuf_r+0x62>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	07db      	lsls	r3, r3, #31
 8003960:	d506      	bpl.n	8003970 <__swbuf_r+0x6c>
 8003962:	2e0a      	cmp	r6, #10
 8003964:	d104      	bne.n	8003970 <__swbuf_r+0x6c>
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f911 	bl	8003b90 <_fflush_r>
 800396e:	b988      	cbnz	r0, 8003994 <__swbuf_r+0x90>
 8003970:	4638      	mov	r0, r7
 8003972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <__swbuf_r+0x9c>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <__swbuf_r+0x7a>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7cf      	b.n	800391e <__swbuf_r+0x1a>
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <__swbuf_r+0xa0>)
 8003980:	429c      	cmp	r4, r3
 8003982:	bf08      	it	eq
 8003984:	68ec      	ldreq	r4, [r5, #12]
 8003986:	e7ca      	b.n	800391e <__swbuf_r+0x1a>
 8003988:	4621      	mov	r1, r4
 800398a:	4628      	mov	r0, r5
 800398c:	f000 f80c 	bl	80039a8 <__swsetup_r>
 8003990:	2800      	cmp	r0, #0
 8003992:	d0cb      	beq.n	800392c <__swbuf_r+0x28>
 8003994:	f04f 37ff 	mov.w	r7, #4294967295
 8003998:	e7ea      	b.n	8003970 <__swbuf_r+0x6c>
 800399a:	bf00      	nop
 800399c:	08004b04 	.word	0x08004b04
 80039a0:	08004b24 	.word	0x08004b24
 80039a4:	08004ae4 	.word	0x08004ae4

080039a8 <__swsetup_r>:
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <__swsetup_r+0xcc>)
 80039aa:	b570      	push	{r4, r5, r6, lr}
 80039ac:	681d      	ldr	r5, [r3, #0]
 80039ae:	4606      	mov	r6, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	b125      	cbz	r5, 80039be <__swsetup_r+0x16>
 80039b4:	69ab      	ldr	r3, [r5, #24]
 80039b6:	b913      	cbnz	r3, 80039be <__swsetup_r+0x16>
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f98f 	bl	8003cdc <__sinit>
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <__swsetup_r+0xd0>)
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d10f      	bne.n	80039e4 <__swsetup_r+0x3c>
 80039c4:	686c      	ldr	r4, [r5, #4]
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039cc:	0719      	lsls	r1, r3, #28
 80039ce:	d42c      	bmi.n	8003a2a <__swsetup_r+0x82>
 80039d0:	06dd      	lsls	r5, r3, #27
 80039d2:	d411      	bmi.n	80039f8 <__swsetup_r+0x50>
 80039d4:	2309      	movs	r3, #9
 80039d6:	6033      	str	r3, [r6, #0]
 80039d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039dc:	81a3      	strh	r3, [r4, #12]
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	e03e      	b.n	8003a62 <__swsetup_r+0xba>
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <__swsetup_r+0xd4>)
 80039e6:	429c      	cmp	r4, r3
 80039e8:	d101      	bne.n	80039ee <__swsetup_r+0x46>
 80039ea:	68ac      	ldr	r4, [r5, #8]
 80039ec:	e7eb      	b.n	80039c6 <__swsetup_r+0x1e>
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <__swsetup_r+0xd8>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	bf08      	it	eq
 80039f4:	68ec      	ldreq	r4, [r5, #12]
 80039f6:	e7e6      	b.n	80039c6 <__swsetup_r+0x1e>
 80039f8:	0758      	lsls	r0, r3, #29
 80039fa:	d512      	bpl.n	8003a22 <__swsetup_r+0x7a>
 80039fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039fe:	b141      	cbz	r1, 8003a12 <__swsetup_r+0x6a>
 8003a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a04:	4299      	cmp	r1, r3
 8003a06:	d002      	beq.n	8003a0e <__swsetup_r+0x66>
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f000 fad1 	bl	8003fb0 <_free_r>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6363      	str	r3, [r4, #52]	; 0x34
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6063      	str	r3, [r4, #4]
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	b94b      	cbnz	r3, 8003a42 <__swsetup_r+0x9a>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a38:	d003      	beq.n	8003a42 <__swsetup_r+0x9a>
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f000 fa6f 	bl	8003f20 <__smakebuf_r>
 8003a42:	89a0      	ldrh	r0, [r4, #12]
 8003a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a48:	f010 0301 	ands.w	r3, r0, #1
 8003a4c:	d00a      	beq.n	8003a64 <__swsetup_r+0xbc>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60a3      	str	r3, [r4, #8]
 8003a52:	6963      	ldr	r3, [r4, #20]
 8003a54:	425b      	negs	r3, r3
 8003a56:	61a3      	str	r3, [r4, #24]
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	b943      	cbnz	r3, 8003a6e <__swsetup_r+0xc6>
 8003a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a60:	d1ba      	bne.n	80039d8 <__swsetup_r+0x30>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	0781      	lsls	r1, r0, #30
 8003a66:	bf58      	it	pl
 8003a68:	6963      	ldrpl	r3, [r4, #20]
 8003a6a:	60a3      	str	r3, [r4, #8]
 8003a6c:	e7f4      	b.n	8003a58 <__swsetup_r+0xb0>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e7f7      	b.n	8003a62 <__swsetup_r+0xba>
 8003a72:	bf00      	nop
 8003a74:	200001bc 	.word	0x200001bc
 8003a78:	08004b04 	.word	0x08004b04
 8003a7c:	08004b24 	.word	0x08004b24
 8003a80:	08004ae4 	.word	0x08004ae4

08003a84 <__sflush_r>:
 8003a84:	898a      	ldrh	r2, [r1, #12]
 8003a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	0710      	lsls	r0, r2, #28
 8003a8e:	460c      	mov	r4, r1
 8003a90:	d458      	bmi.n	8003b44 <__sflush_r+0xc0>
 8003a92:	684b      	ldr	r3, [r1, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dc05      	bgt.n	8003aa4 <__sflush_r+0x20>
 8003a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dc02      	bgt.n	8003aa4 <__sflush_r+0x20>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d0f9      	beq.n	8003a9e <__sflush_r+0x1a>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ab0:	682f      	ldr	r7, [r5, #0]
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	d032      	beq.n	8003b1c <__sflush_r+0x98>
 8003ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	075a      	lsls	r2, r3, #29
 8003abc:	d505      	bpl.n	8003aca <__sflush_r+0x46>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	1ac0      	subs	r0, r0, r3
 8003ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ac4:	b10b      	cbz	r3, 8003aca <__sflush_r+0x46>
 8003ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ac8:	1ac0      	subs	r0, r0, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	4602      	mov	r2, r0
 8003ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad0:	6a21      	ldr	r1, [r4, #32]
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	47b0      	blx	r6
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	d106      	bne.n	8003aea <__sflush_r+0x66>
 8003adc:	6829      	ldr	r1, [r5, #0]
 8003ade:	291d      	cmp	r1, #29
 8003ae0:	d82c      	bhi.n	8003b3c <__sflush_r+0xb8>
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <__sflush_r+0x108>)
 8003ae4:	40ca      	lsrs	r2, r1
 8003ae6:	07d6      	lsls	r6, r2, #31
 8003ae8:	d528      	bpl.n	8003b3c <__sflush_r+0xb8>
 8003aea:	2200      	movs	r2, #0
 8003aec:	6062      	str	r2, [r4, #4]
 8003aee:	04d9      	lsls	r1, r3, #19
 8003af0:	6922      	ldr	r2, [r4, #16]
 8003af2:	6022      	str	r2, [r4, #0]
 8003af4:	d504      	bpl.n	8003b00 <__sflush_r+0x7c>
 8003af6:	1c42      	adds	r2, r0, #1
 8003af8:	d101      	bne.n	8003afe <__sflush_r+0x7a>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	b903      	cbnz	r3, 8003b00 <__sflush_r+0x7c>
 8003afe:	6560      	str	r0, [r4, #84]	; 0x54
 8003b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b02:	602f      	str	r7, [r5, #0]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d0ca      	beq.n	8003a9e <__sflush_r+0x1a>
 8003b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	d002      	beq.n	8003b16 <__sflush_r+0x92>
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 fa4d 	bl	8003fb0 <_free_r>
 8003b16:	2000      	movs	r0, #0
 8003b18:	6360      	str	r0, [r4, #52]	; 0x34
 8003b1a:	e7c1      	b.n	8003aa0 <__sflush_r+0x1c>
 8003b1c:	6a21      	ldr	r1, [r4, #32]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b0      	blx	r6
 8003b24:	1c41      	adds	r1, r0, #1
 8003b26:	d1c7      	bne.n	8003ab8 <__sflush_r+0x34>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0c4      	beq.n	8003ab8 <__sflush_r+0x34>
 8003b2e:	2b1d      	cmp	r3, #29
 8003b30:	d001      	beq.n	8003b36 <__sflush_r+0xb2>
 8003b32:	2b16      	cmp	r3, #22
 8003b34:	d101      	bne.n	8003b3a <__sflush_r+0xb6>
 8003b36:	602f      	str	r7, [r5, #0]
 8003b38:	e7b1      	b.n	8003a9e <__sflush_r+0x1a>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	e7ad      	b.n	8003aa0 <__sflush_r+0x1c>
 8003b44:	690f      	ldr	r7, [r1, #16]
 8003b46:	2f00      	cmp	r7, #0
 8003b48:	d0a9      	beq.n	8003a9e <__sflush_r+0x1a>
 8003b4a:	0793      	lsls	r3, r2, #30
 8003b4c:	680e      	ldr	r6, [r1, #0]
 8003b4e:	bf08      	it	eq
 8003b50:	694b      	ldreq	r3, [r1, #20]
 8003b52:	600f      	str	r7, [r1, #0]
 8003b54:	bf18      	it	ne
 8003b56:	2300      	movne	r3, #0
 8003b58:	eba6 0807 	sub.w	r8, r6, r7
 8003b5c:	608b      	str	r3, [r1, #8]
 8003b5e:	f1b8 0f00 	cmp.w	r8, #0
 8003b62:	dd9c      	ble.n	8003a9e <__sflush_r+0x1a>
 8003b64:	6a21      	ldr	r1, [r4, #32]
 8003b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b68:	4643      	mov	r3, r8
 8003b6a:	463a      	mov	r2, r7
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	47b0      	blx	r6
 8003b70:	2800      	cmp	r0, #0
 8003b72:	dc06      	bgt.n	8003b82 <__sflush_r+0xfe>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	e78e      	b.n	8003aa0 <__sflush_r+0x1c>
 8003b82:	4407      	add	r7, r0
 8003b84:	eba8 0800 	sub.w	r8, r8, r0
 8003b88:	e7e9      	b.n	8003b5e <__sflush_r+0xda>
 8003b8a:	bf00      	nop
 8003b8c:	20400001 	.word	0x20400001

08003b90 <_fflush_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	690b      	ldr	r3, [r1, #16]
 8003b94:	4605      	mov	r5, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	b913      	cbnz	r3, 8003ba0 <_fflush_r+0x10>
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	b118      	cbz	r0, 8003baa <_fflush_r+0x1a>
 8003ba2:	6983      	ldr	r3, [r0, #24]
 8003ba4:	b90b      	cbnz	r3, 8003baa <_fflush_r+0x1a>
 8003ba6:	f000 f899 	bl	8003cdc <__sinit>
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <_fflush_r+0x6c>)
 8003bac:	429c      	cmp	r4, r3
 8003bae:	d11b      	bne.n	8003be8 <_fflush_r+0x58>
 8003bb0:	686c      	ldr	r4, [r5, #4]
 8003bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <_fflush_r+0xa>
 8003bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bbc:	07d0      	lsls	r0, r2, #31
 8003bbe:	d404      	bmi.n	8003bca <_fflush_r+0x3a>
 8003bc0:	0599      	lsls	r1, r3, #22
 8003bc2:	d402      	bmi.n	8003bca <_fflush_r+0x3a>
 8003bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc6:	f000 f984 	bl	8003ed2 <__retarget_lock_acquire_recursive>
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4621      	mov	r1, r4
 8003bce:	f7ff ff59 	bl	8003a84 <__sflush_r>
 8003bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bd4:	07da      	lsls	r2, r3, #31
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	d4e0      	bmi.n	8003b9c <_fflush_r+0xc>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	059b      	lsls	r3, r3, #22
 8003bde:	d4dd      	bmi.n	8003b9c <_fflush_r+0xc>
 8003be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003be2:	f000 f977 	bl	8003ed4 <__retarget_lock_release_recursive>
 8003be6:	e7d9      	b.n	8003b9c <_fflush_r+0xc>
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <_fflush_r+0x70>)
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d101      	bne.n	8003bf2 <_fflush_r+0x62>
 8003bee:	68ac      	ldr	r4, [r5, #8]
 8003bf0:	e7df      	b.n	8003bb2 <_fflush_r+0x22>
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <_fflush_r+0x74>)
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	bf08      	it	eq
 8003bf8:	68ec      	ldreq	r4, [r5, #12]
 8003bfa:	e7da      	b.n	8003bb2 <_fflush_r+0x22>
 8003bfc:	08004b04 	.word	0x08004b04
 8003c00:	08004b24 	.word	0x08004b24
 8003c04:	08004ae4 	.word	0x08004ae4

08003c08 <fflush>:
 8003c08:	4601      	mov	r1, r0
 8003c0a:	b920      	cbnz	r0, 8003c16 <fflush+0xe>
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <fflush+0x18>)
 8003c0e:	4905      	ldr	r1, [pc, #20]	; (8003c24 <fflush+0x1c>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f000 b8fe 	b.w	8003e12 <_fwalk_reent>
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <fflush+0x20>)
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f7ff bfb9 	b.w	8003b90 <_fflush_r>
 8003c1e:	bf00      	nop
 8003c20:	08004ae0 	.word	0x08004ae0
 8003c24:	08003b91 	.word	0x08003b91
 8003c28:	200001bc 	.word	0x200001bc

08003c2c <std>:
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	e9c0 3300 	strd	r3, r3, [r0]
 8003c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c3a:	6083      	str	r3, [r0, #8]
 8003c3c:	8181      	strh	r1, [r0, #12]
 8003c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c40:	81c2      	strh	r2, [r0, #14]
 8003c42:	6183      	str	r3, [r0, #24]
 8003c44:	4619      	mov	r1, r3
 8003c46:	2208      	movs	r2, #8
 8003c48:	305c      	adds	r0, #92	; 0x5c
 8003c4a:	f7ff fcff 	bl	800364c <memset>
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <std+0x38>)
 8003c50:	6263      	str	r3, [r4, #36]	; 0x24
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <std+0x3c>)
 8003c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <std+0x40>)
 8003c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <std+0x44>)
 8003c5c:	6224      	str	r4, [r4, #32]
 8003c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	bf00      	nop
 8003c64:	08004881 	.word	0x08004881
 8003c68:	080048a3 	.word	0x080048a3
 8003c6c:	080048db 	.word	0x080048db
 8003c70:	080048ff 	.word	0x080048ff

08003c74 <_cleanup_r>:
 8003c74:	4901      	ldr	r1, [pc, #4]	; (8003c7c <_cleanup_r+0x8>)
 8003c76:	f000 b8cc 	b.w	8003e12 <_fwalk_reent>
 8003c7a:	bf00      	nop
 8003c7c:	08003b91 	.word	0x08003b91

08003c80 <__sfmoreglue>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	1e4a      	subs	r2, r1, #1
 8003c84:	2568      	movs	r5, #104	; 0x68
 8003c86:	4355      	muls	r5, r2
 8003c88:	460e      	mov	r6, r1
 8003c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c8e:	f000 f9df 	bl	8004050 <_malloc_r>
 8003c92:	4604      	mov	r4, r0
 8003c94:	b140      	cbz	r0, 8003ca8 <__sfmoreglue+0x28>
 8003c96:	2100      	movs	r1, #0
 8003c98:	e9c0 1600 	strd	r1, r6, [r0]
 8003c9c:	300c      	adds	r0, #12
 8003c9e:	60a0      	str	r0, [r4, #8]
 8003ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ca4:	f7ff fcd2 	bl	800364c <memset>
 8003ca8:	4620      	mov	r0, r4
 8003caa:	bd70      	pop	{r4, r5, r6, pc}

08003cac <__sfp_lock_acquire>:
 8003cac:	4801      	ldr	r0, [pc, #4]	; (8003cb4 <__sfp_lock_acquire+0x8>)
 8003cae:	f000 b910 	b.w	8003ed2 <__retarget_lock_acquire_recursive>
 8003cb2:	bf00      	nop
 8003cb4:	200002e0 	.word	0x200002e0

08003cb8 <__sfp_lock_release>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <__sfp_lock_release+0x8>)
 8003cba:	f000 b90b 	b.w	8003ed4 <__retarget_lock_release_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	200002e0 	.word	0x200002e0

08003cc4 <__sinit_lock_acquire>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <__sinit_lock_acquire+0x8>)
 8003cc6:	f000 b904 	b.w	8003ed2 <__retarget_lock_acquire_recursive>
 8003cca:	bf00      	nop
 8003ccc:	200002db 	.word	0x200002db

08003cd0 <__sinit_lock_release>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__sinit_lock_release+0x8>)
 8003cd2:	f000 b8ff 	b.w	8003ed4 <__retarget_lock_release_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	200002db 	.word	0x200002db

08003cdc <__sinit>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4604      	mov	r4, r0
 8003ce0:	f7ff fff0 	bl	8003cc4 <__sinit_lock_acquire>
 8003ce4:	69a3      	ldr	r3, [r4, #24]
 8003ce6:	b11b      	cbz	r3, 8003cf0 <__sinit+0x14>
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f7ff bff0 	b.w	8003cd0 <__sinit_lock_release>
 8003cf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cf4:	6523      	str	r3, [r4, #80]	; 0x50
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <__sinit+0x68>)
 8003cf8:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <__sinit+0x6c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	bf04      	itt	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	61a3      	streq	r3, [r4, #24]
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f820 	bl	8003d4c <__sfp>
 8003d0c:	6060      	str	r0, [r4, #4]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f81c 	bl	8003d4c <__sfp>
 8003d14:	60a0      	str	r0, [r4, #8]
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 f818 	bl	8003d4c <__sfp>
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60e0      	str	r0, [r4, #12]
 8003d20:	2104      	movs	r1, #4
 8003d22:	6860      	ldr	r0, [r4, #4]
 8003d24:	f7ff ff82 	bl	8003c2c <std>
 8003d28:	68a0      	ldr	r0, [r4, #8]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2109      	movs	r1, #9
 8003d2e:	f7ff ff7d 	bl	8003c2c <std>
 8003d32:	68e0      	ldr	r0, [r4, #12]
 8003d34:	2202      	movs	r2, #2
 8003d36:	2112      	movs	r1, #18
 8003d38:	f7ff ff78 	bl	8003c2c <std>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61a3      	str	r3, [r4, #24]
 8003d40:	e7d2      	b.n	8003ce8 <__sinit+0xc>
 8003d42:	bf00      	nop
 8003d44:	08004ae0 	.word	0x08004ae0
 8003d48:	08003c75 	.word	0x08003c75

08003d4c <__sfp>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	4607      	mov	r7, r0
 8003d50:	f7ff ffac 	bl	8003cac <__sfp_lock_acquire>
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <__sfp+0x84>)
 8003d56:	681e      	ldr	r6, [r3, #0]
 8003d58:	69b3      	ldr	r3, [r6, #24]
 8003d5a:	b913      	cbnz	r3, 8003d62 <__sfp+0x16>
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f7ff ffbd 	bl	8003cdc <__sinit>
 8003d62:	3648      	adds	r6, #72	; 0x48
 8003d64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	d503      	bpl.n	8003d74 <__sfp+0x28>
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	b30b      	cbz	r3, 8003db4 <__sfp+0x68>
 8003d70:	6836      	ldr	r6, [r6, #0]
 8003d72:	e7f7      	b.n	8003d64 <__sfp+0x18>
 8003d74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d78:	b9d5      	cbnz	r5, 8003db0 <__sfp+0x64>
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <__sfp+0x88>)
 8003d7c:	60e3      	str	r3, [r4, #12]
 8003d7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d82:	6665      	str	r5, [r4, #100]	; 0x64
 8003d84:	f000 f8a4 	bl	8003ed0 <__retarget_lock_init_recursive>
 8003d88:	f7ff ff96 	bl	8003cb8 <__sfp_lock_release>
 8003d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d94:	6025      	str	r5, [r4, #0]
 8003d96:	61a5      	str	r5, [r4, #24]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003da0:	f7ff fc54 	bl	800364c <memset>
 8003da4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003da8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dac:	4620      	mov	r0, r4
 8003dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db0:	3468      	adds	r4, #104	; 0x68
 8003db2:	e7d9      	b.n	8003d68 <__sfp+0x1c>
 8003db4:	2104      	movs	r1, #4
 8003db6:	4638      	mov	r0, r7
 8003db8:	f7ff ff62 	bl	8003c80 <__sfmoreglue>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	6030      	str	r0, [r6, #0]
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d1d5      	bne.n	8003d70 <__sfp+0x24>
 8003dc4:	f7ff ff78 	bl	8003cb8 <__sfp_lock_release>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	e7ee      	b.n	8003dac <__sfp+0x60>
 8003dce:	bf00      	nop
 8003dd0:	08004ae0 	.word	0x08004ae0
 8003dd4:	ffff0001 	.word	0xffff0001

08003dd8 <_fwalk>:
 8003dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ddc:	460f      	mov	r7, r1
 8003dde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003de2:	2600      	movs	r6, #0
 8003de4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003de8:	f1b8 0801 	subs.w	r8, r8, #1
 8003dec:	d505      	bpl.n	8003dfa <_fwalk+0x22>
 8003dee:	6824      	ldr	r4, [r4, #0]
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d1f7      	bne.n	8003de4 <_fwalk+0xc>
 8003df4:	4630      	mov	r0, r6
 8003df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d906      	bls.n	8003e0e <_fwalk+0x36>
 8003e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e04:	3301      	adds	r3, #1
 8003e06:	d002      	beq.n	8003e0e <_fwalk+0x36>
 8003e08:	4628      	mov	r0, r5
 8003e0a:	47b8      	blx	r7
 8003e0c:	4306      	orrs	r6, r0
 8003e0e:	3568      	adds	r5, #104	; 0x68
 8003e10:	e7ea      	b.n	8003de8 <_fwalk+0x10>

08003e12 <_fwalk_reent>:
 8003e12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e16:	4606      	mov	r6, r0
 8003e18:	4688      	mov	r8, r1
 8003e1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e1e:	2700      	movs	r7, #0
 8003e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e24:	f1b9 0901 	subs.w	r9, r9, #1
 8003e28:	d505      	bpl.n	8003e36 <_fwalk_reent+0x24>
 8003e2a:	6824      	ldr	r4, [r4, #0]
 8003e2c:	2c00      	cmp	r4, #0
 8003e2e:	d1f7      	bne.n	8003e20 <_fwalk_reent+0xe>
 8003e30:	4638      	mov	r0, r7
 8003e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e36:	89ab      	ldrh	r3, [r5, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d907      	bls.n	8003e4c <_fwalk_reent+0x3a>
 8003e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e40:	3301      	adds	r3, #1
 8003e42:	d003      	beq.n	8003e4c <_fwalk_reent+0x3a>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	47c0      	blx	r8
 8003e4a:	4307      	orrs	r7, r0
 8003e4c:	3568      	adds	r5, #104	; 0x68
 8003e4e:	e7e9      	b.n	8003e24 <_fwalk_reent+0x12>

08003e50 <_getc_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	4605      	mov	r5, r0
 8003e56:	b118      	cbz	r0, 8003e60 <_getc_r+0x10>
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	b90b      	cbnz	r3, 8003e60 <_getc_r+0x10>
 8003e5c:	f7ff ff3e 	bl	8003cdc <__sinit>
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <_getc_r+0x74>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d11e      	bne.n	8003ea4 <_getc_r+0x54>
 8003e66:	686c      	ldr	r4, [r5, #4]
 8003e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6a:	07d8      	lsls	r0, r3, #31
 8003e6c:	d405      	bmi.n	8003e7a <_getc_r+0x2a>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	0599      	lsls	r1, r3, #22
 8003e72:	d402      	bmi.n	8003e7a <_getc_r+0x2a>
 8003e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e76:	f000 f82c 	bl	8003ed2 <__retarget_lock_acquire_recursive>
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	da19      	bge.n	8003eb8 <_getc_r+0x68>
 8003e84:	4628      	mov	r0, r5
 8003e86:	4621      	mov	r1, r4
 8003e88:	f000 fcbe 	bl	8004808 <__srget_r>
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e90:	07da      	lsls	r2, r3, #31
 8003e92:	d405      	bmi.n	8003ea0 <_getc_r+0x50>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	059b      	lsls	r3, r3, #22
 8003e98:	d402      	bmi.n	8003ea0 <_getc_r+0x50>
 8003e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e9c:	f000 f81a 	bl	8003ed4 <__retarget_lock_release_recursive>
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <_getc_r+0x78>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d101      	bne.n	8003eae <_getc_r+0x5e>
 8003eaa:	68ac      	ldr	r4, [r5, #8]
 8003eac:	e7dc      	b.n	8003e68 <_getc_r+0x18>
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <_getc_r+0x7c>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	bf08      	it	eq
 8003eb4:	68ec      	ldreq	r4, [r5, #12]
 8003eb6:	e7d7      	b.n	8003e68 <_getc_r+0x18>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	781d      	ldrb	r5, [r3, #0]
 8003ec0:	e7e5      	b.n	8003e8e <_getc_r+0x3e>
 8003ec2:	bf00      	nop
 8003ec4:	08004b04 	.word	0x08004b04
 8003ec8:	08004b24 	.word	0x08004b24
 8003ecc:	08004ae4 	.word	0x08004ae4

08003ed0 <__retarget_lock_init_recursive>:
 8003ed0:	4770      	bx	lr

08003ed2 <__retarget_lock_acquire_recursive>:
 8003ed2:	4770      	bx	lr

08003ed4 <__retarget_lock_release_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__swhatbuf_r>:
 8003ed6:	b570      	push	{r4, r5, r6, lr}
 8003ed8:	460e      	mov	r6, r1
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	2900      	cmp	r1, #0
 8003ee0:	b096      	sub	sp, #88	; 0x58
 8003ee2:	4614      	mov	r4, r2
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	da07      	bge.n	8003ef8 <__swhatbuf_r+0x22>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	89b3      	ldrh	r3, [r6, #12]
 8003eee:	061a      	lsls	r2, r3, #24
 8003ef0:	d410      	bmi.n	8003f14 <__swhatbuf_r+0x3e>
 8003ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef6:	e00e      	b.n	8003f16 <__swhatbuf_r+0x40>
 8003ef8:	466a      	mov	r2, sp
 8003efa:	f000 fd27 	bl	800494c <_fstat_r>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	dbf2      	blt.n	8003ee8 <__swhatbuf_r+0x12>
 8003f02:	9a01      	ldr	r2, [sp, #4]
 8003f04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f0c:	425a      	negs	r2, r3
 8003f0e:	415a      	adcs	r2, r3
 8003f10:	602a      	str	r2, [r5, #0]
 8003f12:	e7ee      	b.n	8003ef2 <__swhatbuf_r+0x1c>
 8003f14:	2340      	movs	r3, #64	; 0x40
 8003f16:	2000      	movs	r0, #0
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	b016      	add	sp, #88	; 0x58
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f20 <__smakebuf_r>:
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f24:	079d      	lsls	r5, r3, #30
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	d507      	bpl.n	8003f3c <__smakebuf_r+0x1c>
 8003f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	2301      	movs	r3, #1
 8003f36:	6163      	str	r3, [r4, #20]
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	ab01      	add	r3, sp, #4
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7ff ffc9 	bl	8003ed6 <__swhatbuf_r>
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	4605      	mov	r5, r0
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f881 	bl	8004050 <_malloc_r>
 8003f4e:	b948      	cbnz	r0, 8003f64 <__smakebuf_r+0x44>
 8003f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f54:	059a      	lsls	r2, r3, #22
 8003f56:	d4ef      	bmi.n	8003f38 <__smakebuf_r+0x18>
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7e3      	b.n	8003f2c <__smakebuf_r+0xc>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__smakebuf_r+0x7c>)
 8003f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x74>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 fcf5 	bl	8004970 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x74>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a0      	ldrh	r0, [r4, #12]
 8003f96:	4305      	orrs	r5, r0
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cd      	b.n	8003f38 <__smakebuf_r+0x18>
 8003f9c:	08003c75 	.word	0x08003c75

08003fa0 <malloc>:
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <malloc+0xc>)
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f000 b853 	b.w	8004050 <_malloc_r>
 8003faa:	bf00      	nop
 8003fac:	200001bc 	.word	0x200001bc

08003fb0 <_free_r>:
 8003fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	d048      	beq.n	8004048 <_free_r+0x98>
 8003fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fba:	9001      	str	r0, [sp, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8003fc2:	bfb8      	it	lt
 8003fc4:	18e4      	addlt	r4, r4, r3
 8003fc6:	f000 fcf5 	bl	80049b4 <__malloc_lock>
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <_free_r+0x9c>)
 8003fcc:	9801      	ldr	r0, [sp, #4]
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	4615      	mov	r5, r2
 8003fd2:	b933      	cbnz	r3, 8003fe2 <_free_r+0x32>
 8003fd4:	6063      	str	r3, [r4, #4]
 8003fd6:	6014      	str	r4, [r2, #0]
 8003fd8:	b003      	add	sp, #12
 8003fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fde:	f000 bcef 	b.w	80049c0 <__malloc_unlock>
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	d90b      	bls.n	8003ffe <_free_r+0x4e>
 8003fe6:	6821      	ldr	r1, [r4, #0]
 8003fe8:	1862      	adds	r2, r4, r1
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bf04      	itt	eq
 8003fee:	681a      	ldreq	r2, [r3, #0]
 8003ff0:	685b      	ldreq	r3, [r3, #4]
 8003ff2:	6063      	str	r3, [r4, #4]
 8003ff4:	bf04      	itt	eq
 8003ff6:	1852      	addeq	r2, r2, r1
 8003ff8:	6022      	streq	r2, [r4, #0]
 8003ffa:	602c      	str	r4, [r5, #0]
 8003ffc:	e7ec      	b.n	8003fd8 <_free_r+0x28>
 8003ffe:	461a      	mov	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b10b      	cbz	r3, 8004008 <_free_r+0x58>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d9fa      	bls.n	8003ffe <_free_r+0x4e>
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	1855      	adds	r5, r2, r1
 800400c:	42a5      	cmp	r5, r4
 800400e:	d10b      	bne.n	8004028 <_free_r+0x78>
 8004010:	6824      	ldr	r4, [r4, #0]
 8004012:	4421      	add	r1, r4
 8004014:	1854      	adds	r4, r2, r1
 8004016:	42a3      	cmp	r3, r4
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	d1dd      	bne.n	8003fd8 <_free_r+0x28>
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	4421      	add	r1, r4
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	e7d7      	b.n	8003fd8 <_free_r+0x28>
 8004028:	d902      	bls.n	8004030 <_free_r+0x80>
 800402a:	230c      	movs	r3, #12
 800402c:	6003      	str	r3, [r0, #0]
 800402e:	e7d3      	b.n	8003fd8 <_free_r+0x28>
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	1961      	adds	r1, r4, r5
 8004034:	428b      	cmp	r3, r1
 8004036:	bf04      	itt	eq
 8004038:	6819      	ldreq	r1, [r3, #0]
 800403a:	685b      	ldreq	r3, [r3, #4]
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	bf04      	itt	eq
 8004040:	1949      	addeq	r1, r1, r5
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	6054      	str	r4, [r2, #4]
 8004046:	e7c7      	b.n	8003fd8 <_free_r+0x28>
 8004048:	b003      	add	sp, #12
 800404a:	bd30      	pop	{r4, r5, pc}
 800404c:	20000240 	.word	0x20000240

08004050 <_malloc_r>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	1ccd      	adds	r5, r1, #3
 8004054:	f025 0503 	bic.w	r5, r5, #3
 8004058:	3508      	adds	r5, #8
 800405a:	2d0c      	cmp	r5, #12
 800405c:	bf38      	it	cc
 800405e:	250c      	movcc	r5, #12
 8004060:	2d00      	cmp	r5, #0
 8004062:	4606      	mov	r6, r0
 8004064:	db01      	blt.n	800406a <_malloc_r+0x1a>
 8004066:	42a9      	cmp	r1, r5
 8004068:	d903      	bls.n	8004072 <_malloc_r+0x22>
 800406a:	230c      	movs	r3, #12
 800406c:	6033      	str	r3, [r6, #0]
 800406e:	2000      	movs	r0, #0
 8004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004072:	f000 fc9f 	bl	80049b4 <__malloc_lock>
 8004076:	4921      	ldr	r1, [pc, #132]	; (80040fc <_malloc_r+0xac>)
 8004078:	680a      	ldr	r2, [r1, #0]
 800407a:	4614      	mov	r4, r2
 800407c:	b99c      	cbnz	r4, 80040a6 <_malloc_r+0x56>
 800407e:	4f20      	ldr	r7, [pc, #128]	; (8004100 <_malloc_r+0xb0>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b923      	cbnz	r3, 800408e <_malloc_r+0x3e>
 8004084:	4621      	mov	r1, r4
 8004086:	4630      	mov	r0, r6
 8004088:	f000 fbea 	bl	8004860 <_sbrk_r>
 800408c:	6038      	str	r0, [r7, #0]
 800408e:	4629      	mov	r1, r5
 8004090:	4630      	mov	r0, r6
 8004092:	f000 fbe5 	bl	8004860 <_sbrk_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	d123      	bne.n	80040e2 <_malloc_r+0x92>
 800409a:	230c      	movs	r3, #12
 800409c:	6033      	str	r3, [r6, #0]
 800409e:	4630      	mov	r0, r6
 80040a0:	f000 fc8e 	bl	80049c0 <__malloc_unlock>
 80040a4:	e7e3      	b.n	800406e <_malloc_r+0x1e>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	1b5b      	subs	r3, r3, r5
 80040aa:	d417      	bmi.n	80040dc <_malloc_r+0x8c>
 80040ac:	2b0b      	cmp	r3, #11
 80040ae:	d903      	bls.n	80040b8 <_malloc_r+0x68>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	441c      	add	r4, r3
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	e004      	b.n	80040c2 <_malloc_r+0x72>
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	42a2      	cmp	r2, r4
 80040bc:	bf0c      	ite	eq
 80040be:	600b      	streq	r3, [r1, #0]
 80040c0:	6053      	strne	r3, [r2, #4]
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 fc7c 	bl	80049c0 <__malloc_unlock>
 80040c8:	f104 000b 	add.w	r0, r4, #11
 80040cc:	1d23      	adds	r3, r4, #4
 80040ce:	f020 0007 	bic.w	r0, r0, #7
 80040d2:	1ac2      	subs	r2, r0, r3
 80040d4:	d0cc      	beq.n	8004070 <_malloc_r+0x20>
 80040d6:	1a1b      	subs	r3, r3, r0
 80040d8:	50a3      	str	r3, [r4, r2]
 80040da:	e7c9      	b.n	8004070 <_malloc_r+0x20>
 80040dc:	4622      	mov	r2, r4
 80040de:	6864      	ldr	r4, [r4, #4]
 80040e0:	e7cc      	b.n	800407c <_malloc_r+0x2c>
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d0e3      	beq.n	80040b4 <_malloc_r+0x64>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4630      	mov	r0, r6
 80040f0:	f000 fbb6 	bl	8004860 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1dd      	bne.n	80040b4 <_malloc_r+0x64>
 80040f8:	e7cf      	b.n	800409a <_malloc_r+0x4a>
 80040fa:	bf00      	nop
 80040fc:	20000240 	.word	0x20000240
 8004100:	20000244 	.word	0x20000244

08004104 <__sfputc_r>:
 8004104:	6893      	ldr	r3, [r2, #8]
 8004106:	3b01      	subs	r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	b410      	push	{r4}
 800410c:	6093      	str	r3, [r2, #8]
 800410e:	da08      	bge.n	8004122 <__sfputc_r+0x1e>
 8004110:	6994      	ldr	r4, [r2, #24]
 8004112:	42a3      	cmp	r3, r4
 8004114:	db01      	blt.n	800411a <__sfputc_r+0x16>
 8004116:	290a      	cmp	r1, #10
 8004118:	d103      	bne.n	8004122 <__sfputc_r+0x1e>
 800411a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411e:	f7ff bbf1 	b.w	8003904 <__swbuf_r>
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	1c58      	adds	r0, r3, #1
 8004126:	6010      	str	r0, [r2, #0]
 8004128:	7019      	strb	r1, [r3, #0]
 800412a:	4608      	mov	r0, r1
 800412c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004130:	4770      	bx	lr

08004132 <__sfputs_r>:
 8004132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	4614      	mov	r4, r2
 800413a:	18d5      	adds	r5, r2, r3
 800413c:	42ac      	cmp	r4, r5
 800413e:	d101      	bne.n	8004144 <__sfputs_r+0x12>
 8004140:	2000      	movs	r0, #0
 8004142:	e007      	b.n	8004154 <__sfputs_r+0x22>
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	463a      	mov	r2, r7
 800414a:	4630      	mov	r0, r6
 800414c:	f7ff ffda 	bl	8004104 <__sfputc_r>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d1f3      	bne.n	800413c <__sfputs_r+0xa>
 8004154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004158 <_vfiprintf_r>:
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	460d      	mov	r5, r1
 800415e:	b09d      	sub	sp, #116	; 0x74
 8004160:	4614      	mov	r4, r2
 8004162:	4698      	mov	r8, r3
 8004164:	4606      	mov	r6, r0
 8004166:	b118      	cbz	r0, 8004170 <_vfiprintf_r+0x18>
 8004168:	6983      	ldr	r3, [r0, #24]
 800416a:	b90b      	cbnz	r3, 8004170 <_vfiprintf_r+0x18>
 800416c:	f7ff fdb6 	bl	8003cdc <__sinit>
 8004170:	4b89      	ldr	r3, [pc, #548]	; (8004398 <_vfiprintf_r+0x240>)
 8004172:	429d      	cmp	r5, r3
 8004174:	d11b      	bne.n	80041ae <_vfiprintf_r+0x56>
 8004176:	6875      	ldr	r5, [r6, #4]
 8004178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d405      	bmi.n	800418a <_vfiprintf_r+0x32>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	059a      	lsls	r2, r3, #22
 8004182:	d402      	bmi.n	800418a <_vfiprintf_r+0x32>
 8004184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004186:	f7ff fea4 	bl	8003ed2 <__retarget_lock_acquire_recursive>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	d501      	bpl.n	8004194 <_vfiprintf_r+0x3c>
 8004190:	692b      	ldr	r3, [r5, #16]
 8004192:	b9eb      	cbnz	r3, 80041d0 <_vfiprintf_r+0x78>
 8004194:	4629      	mov	r1, r5
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff fc06 	bl	80039a8 <__swsetup_r>
 800419c:	b1c0      	cbz	r0, 80041d0 <_vfiprintf_r+0x78>
 800419e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a0:	07dc      	lsls	r4, r3, #31
 80041a2:	d50e      	bpl.n	80041c2 <_vfiprintf_r+0x6a>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b01d      	add	sp, #116	; 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	4b7b      	ldr	r3, [pc, #492]	; (800439c <_vfiprintf_r+0x244>)
 80041b0:	429d      	cmp	r5, r3
 80041b2:	d101      	bne.n	80041b8 <_vfiprintf_r+0x60>
 80041b4:	68b5      	ldr	r5, [r6, #8]
 80041b6:	e7df      	b.n	8004178 <_vfiprintf_r+0x20>
 80041b8:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <_vfiprintf_r+0x248>)
 80041ba:	429d      	cmp	r5, r3
 80041bc:	bf08      	it	eq
 80041be:	68f5      	ldreq	r5, [r6, #12]
 80041c0:	e7da      	b.n	8004178 <_vfiprintf_r+0x20>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	0598      	lsls	r0, r3, #22
 80041c6:	d4ed      	bmi.n	80041a4 <_vfiprintf_r+0x4c>
 80041c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ca:	f7ff fe83 	bl	8003ed4 <__retarget_lock_release_recursive>
 80041ce:	e7e9      	b.n	80041a4 <_vfiprintf_r+0x4c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	9309      	str	r3, [sp, #36]	; 0x24
 80041d4:	2320      	movs	r3, #32
 80041d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041da:	f8cd 800c 	str.w	r8, [sp, #12]
 80041de:	2330      	movs	r3, #48	; 0x30
 80041e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043a4 <_vfiprintf_r+0x24c>
 80041e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e8:	f04f 0901 	mov.w	r9, #1
 80041ec:	4623      	mov	r3, r4
 80041ee:	469a      	mov	sl, r3
 80041f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f4:	b10a      	cbz	r2, 80041fa <_vfiprintf_r+0xa2>
 80041f6:	2a25      	cmp	r2, #37	; 0x25
 80041f8:	d1f9      	bne.n	80041ee <_vfiprintf_r+0x96>
 80041fa:	ebba 0b04 	subs.w	fp, sl, r4
 80041fe:	d00b      	beq.n	8004218 <_vfiprintf_r+0xc0>
 8004200:	465b      	mov	r3, fp
 8004202:	4622      	mov	r2, r4
 8004204:	4629      	mov	r1, r5
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff ff93 	bl	8004132 <__sfputs_r>
 800420c:	3001      	adds	r0, #1
 800420e:	f000 80aa 	beq.w	8004366 <_vfiprintf_r+0x20e>
 8004212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004214:	445a      	add	r2, fp
 8004216:	9209      	str	r2, [sp, #36]	; 0x24
 8004218:	f89a 3000 	ldrb.w	r3, [sl]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a2 	beq.w	8004366 <_vfiprintf_r+0x20e>
 8004222:	2300      	movs	r3, #0
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800422c:	f10a 0a01 	add.w	sl, sl, #1
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	9307      	str	r3, [sp, #28]
 8004234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004238:	931a      	str	r3, [sp, #104]	; 0x68
 800423a:	4654      	mov	r4, sl
 800423c:	2205      	movs	r2, #5
 800423e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004242:	4858      	ldr	r0, [pc, #352]	; (80043a4 <_vfiprintf_r+0x24c>)
 8004244:	f7fc f964 	bl	8000510 <memchr>
 8004248:	9a04      	ldr	r2, [sp, #16]
 800424a:	b9d8      	cbnz	r0, 8004284 <_vfiprintf_r+0x12c>
 800424c:	06d1      	lsls	r1, r2, #27
 800424e:	bf44      	itt	mi
 8004250:	2320      	movmi	r3, #32
 8004252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004256:	0713      	lsls	r3, r2, #28
 8004258:	bf44      	itt	mi
 800425a:	232b      	movmi	r3, #43	; 0x2b
 800425c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004260:	f89a 3000 	ldrb.w	r3, [sl]
 8004264:	2b2a      	cmp	r3, #42	; 0x2a
 8004266:	d015      	beq.n	8004294 <_vfiprintf_r+0x13c>
 8004268:	9a07      	ldr	r2, [sp, #28]
 800426a:	4654      	mov	r4, sl
 800426c:	2000      	movs	r0, #0
 800426e:	f04f 0c0a 	mov.w	ip, #10
 8004272:	4621      	mov	r1, r4
 8004274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004278:	3b30      	subs	r3, #48	; 0x30
 800427a:	2b09      	cmp	r3, #9
 800427c:	d94e      	bls.n	800431c <_vfiprintf_r+0x1c4>
 800427e:	b1b0      	cbz	r0, 80042ae <_vfiprintf_r+0x156>
 8004280:	9207      	str	r2, [sp, #28]
 8004282:	e014      	b.n	80042ae <_vfiprintf_r+0x156>
 8004284:	eba0 0308 	sub.w	r3, r0, r8
 8004288:	fa09 f303 	lsl.w	r3, r9, r3
 800428c:	4313      	orrs	r3, r2
 800428e:	9304      	str	r3, [sp, #16]
 8004290:	46a2      	mov	sl, r4
 8004292:	e7d2      	b.n	800423a <_vfiprintf_r+0xe2>
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	1d19      	adds	r1, r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	9103      	str	r1, [sp, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfbb      	ittet	lt
 80042a0:	425b      	neglt	r3, r3
 80042a2:	f042 0202 	orrlt.w	r2, r2, #2
 80042a6:	9307      	strge	r3, [sp, #28]
 80042a8:	9307      	strlt	r3, [sp, #28]
 80042aa:	bfb8      	it	lt
 80042ac:	9204      	strlt	r2, [sp, #16]
 80042ae:	7823      	ldrb	r3, [r4, #0]
 80042b0:	2b2e      	cmp	r3, #46	; 0x2e
 80042b2:	d10c      	bne.n	80042ce <_vfiprintf_r+0x176>
 80042b4:	7863      	ldrb	r3, [r4, #1]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d135      	bne.n	8004326 <_vfiprintf_r+0x1ce>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	9203      	str	r2, [sp, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ca:	3402      	adds	r4, #2
 80042cc:	9305      	str	r3, [sp, #20]
 80042ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043b4 <_vfiprintf_r+0x25c>
 80042d2:	7821      	ldrb	r1, [r4, #0]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4650      	mov	r0, sl
 80042d8:	f7fc f91a 	bl	8000510 <memchr>
 80042dc:	b140      	cbz	r0, 80042f0 <_vfiprintf_r+0x198>
 80042de:	2340      	movs	r3, #64	; 0x40
 80042e0:	eba0 000a 	sub.w	r0, r0, sl
 80042e4:	fa03 f000 	lsl.w	r0, r3, r0
 80042e8:	9b04      	ldr	r3, [sp, #16]
 80042ea:	4303      	orrs	r3, r0
 80042ec:	3401      	adds	r4, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	482c      	ldr	r0, [pc, #176]	; (80043a8 <_vfiprintf_r+0x250>)
 80042f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042fa:	2206      	movs	r2, #6
 80042fc:	f7fc f908 	bl	8000510 <memchr>
 8004300:	2800      	cmp	r0, #0
 8004302:	d03f      	beq.n	8004384 <_vfiprintf_r+0x22c>
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <_vfiprintf_r+0x254>)
 8004306:	bb1b      	cbnz	r3, 8004350 <_vfiprintf_r+0x1f8>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	3307      	adds	r3, #7
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	3308      	adds	r3, #8
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004316:	443b      	add	r3, r7
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	e767      	b.n	80041ec <_vfiprintf_r+0x94>
 800431c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004320:	460c      	mov	r4, r1
 8004322:	2001      	movs	r0, #1
 8004324:	e7a5      	b.n	8004272 <_vfiprintf_r+0x11a>
 8004326:	2300      	movs	r3, #0
 8004328:	3401      	adds	r4, #1
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0c0a 	mov.w	ip, #10
 8004332:	4620      	mov	r0, r4
 8004334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004338:	3a30      	subs	r2, #48	; 0x30
 800433a:	2a09      	cmp	r2, #9
 800433c:	d903      	bls.n	8004346 <_vfiprintf_r+0x1ee>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c5      	beq.n	80042ce <_vfiprintf_r+0x176>
 8004342:	9105      	str	r1, [sp, #20]
 8004344:	e7c3      	b.n	80042ce <_vfiprintf_r+0x176>
 8004346:	fb0c 2101 	mla	r1, ip, r1, r2
 800434a:	4604      	mov	r4, r0
 800434c:	2301      	movs	r3, #1
 800434e:	e7f0      	b.n	8004332 <_vfiprintf_r+0x1da>
 8004350:	ab03      	add	r3, sp, #12
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	462a      	mov	r2, r5
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <_vfiprintf_r+0x258>)
 8004358:	a904      	add	r1, sp, #16
 800435a:	4630      	mov	r0, r6
 800435c:	f3af 8000 	nop.w
 8004360:	4607      	mov	r7, r0
 8004362:	1c78      	adds	r0, r7, #1
 8004364:	d1d6      	bne.n	8004314 <_vfiprintf_r+0x1bc>
 8004366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004368:	07d9      	lsls	r1, r3, #31
 800436a:	d405      	bmi.n	8004378 <_vfiprintf_r+0x220>
 800436c:	89ab      	ldrh	r3, [r5, #12]
 800436e:	059a      	lsls	r2, r3, #22
 8004370:	d402      	bmi.n	8004378 <_vfiprintf_r+0x220>
 8004372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004374:	f7ff fdae 	bl	8003ed4 <__retarget_lock_release_recursive>
 8004378:	89ab      	ldrh	r3, [r5, #12]
 800437a:	065b      	lsls	r3, r3, #25
 800437c:	f53f af12 	bmi.w	80041a4 <_vfiprintf_r+0x4c>
 8004380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004382:	e711      	b.n	80041a8 <_vfiprintf_r+0x50>
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	462a      	mov	r2, r5
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <_vfiprintf_r+0x258>)
 800438c:	a904      	add	r1, sp, #16
 800438e:	4630      	mov	r0, r6
 8004390:	f000 f880 	bl	8004494 <_printf_i>
 8004394:	e7e4      	b.n	8004360 <_vfiprintf_r+0x208>
 8004396:	bf00      	nop
 8004398:	08004b04 	.word	0x08004b04
 800439c:	08004b24 	.word	0x08004b24
 80043a0:	08004ae4 	.word	0x08004ae4
 80043a4:	08004b44 	.word	0x08004b44
 80043a8:	08004b4e 	.word	0x08004b4e
 80043ac:	00000000 	.word	0x00000000
 80043b0:	08004133 	.word	0x08004133
 80043b4:	08004b4a 	.word	0x08004b4a

080043b8 <_printf_common>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	4616      	mov	r6, r2
 80043be:	4699      	mov	r9, r3
 80043c0:	688a      	ldr	r2, [r1, #8]
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	bfb8      	it	lt
 80043cc:	4613      	movlt	r3, r2
 80043ce:	6033      	str	r3, [r6, #0]
 80043d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d4:	4607      	mov	r7, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	b10a      	cbz	r2, 80043de <_printf_common+0x26>
 80043da:	3301      	adds	r3, #1
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	0699      	lsls	r1, r3, #26
 80043e2:	bf42      	ittt	mi
 80043e4:	6833      	ldrmi	r3, [r6, #0]
 80043e6:	3302      	addmi	r3, #2
 80043e8:	6033      	strmi	r3, [r6, #0]
 80043ea:	6825      	ldr	r5, [r4, #0]
 80043ec:	f015 0506 	ands.w	r5, r5, #6
 80043f0:	d106      	bne.n	8004400 <_printf_common+0x48>
 80043f2:	f104 0a19 	add.w	sl, r4, #25
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	6832      	ldr	r2, [r6, #0]
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dc26      	bgt.n	800444e <_printf_common+0x96>
 8004400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004404:	1e13      	subs	r3, r2, #0
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	bf18      	it	ne
 800440a:	2301      	movne	r3, #1
 800440c:	0692      	lsls	r2, r2, #26
 800440e:	d42b      	bmi.n	8004468 <_printf_common+0xb0>
 8004410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004414:	4649      	mov	r1, r9
 8004416:	4638      	mov	r0, r7
 8004418:	47c0      	blx	r8
 800441a:	3001      	adds	r0, #1
 800441c:	d01e      	beq.n	800445c <_printf_common+0xa4>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	68e5      	ldr	r5, [r4, #12]
 8004422:	6832      	ldr	r2, [r6, #0]
 8004424:	f003 0306 	and.w	r3, r3, #6
 8004428:	2b04      	cmp	r3, #4
 800442a:	bf08      	it	eq
 800442c:	1aad      	subeq	r5, r5, r2
 800442e:	68a3      	ldr	r3, [r4, #8]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	bf0c      	ite	eq
 8004434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004438:	2500      	movne	r5, #0
 800443a:	4293      	cmp	r3, r2
 800443c:	bfc4      	itt	gt
 800443e:	1a9b      	subgt	r3, r3, r2
 8004440:	18ed      	addgt	r5, r5, r3
 8004442:	2600      	movs	r6, #0
 8004444:	341a      	adds	r4, #26
 8004446:	42b5      	cmp	r5, r6
 8004448:	d11a      	bne.n	8004480 <_printf_common+0xc8>
 800444a:	2000      	movs	r0, #0
 800444c:	e008      	b.n	8004460 <_printf_common+0xa8>
 800444e:	2301      	movs	r3, #1
 8004450:	4652      	mov	r2, sl
 8004452:	4649      	mov	r1, r9
 8004454:	4638      	mov	r0, r7
 8004456:	47c0      	blx	r8
 8004458:	3001      	adds	r0, #1
 800445a:	d103      	bne.n	8004464 <_printf_common+0xac>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	3501      	adds	r5, #1
 8004466:	e7c6      	b.n	80043f6 <_printf_common+0x3e>
 8004468:	18e1      	adds	r1, r4, r3
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	2030      	movs	r0, #48	; 0x30
 800446e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004472:	4422      	add	r2, r4
 8004474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800447c:	3302      	adds	r3, #2
 800447e:	e7c7      	b.n	8004410 <_printf_common+0x58>
 8004480:	2301      	movs	r3, #1
 8004482:	4622      	mov	r2, r4
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d0e6      	beq.n	800445c <_printf_common+0xa4>
 800448e:	3601      	adds	r6, #1
 8004490:	e7d9      	b.n	8004446 <_printf_common+0x8e>
	...

08004494 <_printf_i>:
 8004494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	460c      	mov	r4, r1
 800449a:	4691      	mov	r9, r2
 800449c:	7e27      	ldrb	r7, [r4, #24]
 800449e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044a0:	2f78      	cmp	r7, #120	; 0x78
 80044a2:	4680      	mov	r8, r0
 80044a4:	469a      	mov	sl, r3
 80044a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044aa:	d807      	bhi.n	80044bc <_printf_i+0x28>
 80044ac:	2f62      	cmp	r7, #98	; 0x62
 80044ae:	d80a      	bhi.n	80044c6 <_printf_i+0x32>
 80044b0:	2f00      	cmp	r7, #0
 80044b2:	f000 80d8 	beq.w	8004666 <_printf_i+0x1d2>
 80044b6:	2f58      	cmp	r7, #88	; 0x58
 80044b8:	f000 80a3 	beq.w	8004602 <_printf_i+0x16e>
 80044bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044c4:	e03a      	b.n	800453c <_printf_i+0xa8>
 80044c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ca:	2b15      	cmp	r3, #21
 80044cc:	d8f6      	bhi.n	80044bc <_printf_i+0x28>
 80044ce:	a001      	add	r0, pc, #4	; (adr r0, 80044d4 <_printf_i+0x40>)
 80044d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044d4:	0800452d 	.word	0x0800452d
 80044d8:	08004541 	.word	0x08004541
 80044dc:	080044bd 	.word	0x080044bd
 80044e0:	080044bd 	.word	0x080044bd
 80044e4:	080044bd 	.word	0x080044bd
 80044e8:	080044bd 	.word	0x080044bd
 80044ec:	08004541 	.word	0x08004541
 80044f0:	080044bd 	.word	0x080044bd
 80044f4:	080044bd 	.word	0x080044bd
 80044f8:	080044bd 	.word	0x080044bd
 80044fc:	080044bd 	.word	0x080044bd
 8004500:	0800464d 	.word	0x0800464d
 8004504:	08004571 	.word	0x08004571
 8004508:	0800462f 	.word	0x0800462f
 800450c:	080044bd 	.word	0x080044bd
 8004510:	080044bd 	.word	0x080044bd
 8004514:	0800466f 	.word	0x0800466f
 8004518:	080044bd 	.word	0x080044bd
 800451c:	08004571 	.word	0x08004571
 8004520:	080044bd 	.word	0x080044bd
 8004524:	080044bd 	.word	0x080044bd
 8004528:	08004637 	.word	0x08004637
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	600a      	str	r2, [r1, #0]
 8004534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800453c:	2301      	movs	r3, #1
 800453e:	e0a3      	b.n	8004688 <_printf_i+0x1f4>
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	6808      	ldr	r0, [r1, #0]
 8004544:	062e      	lsls	r6, r5, #24
 8004546:	f100 0304 	add.w	r3, r0, #4
 800454a:	d50a      	bpl.n	8004562 <_printf_i+0xce>
 800454c:	6805      	ldr	r5, [r0, #0]
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	2d00      	cmp	r5, #0
 8004552:	da03      	bge.n	800455c <_printf_i+0xc8>
 8004554:	232d      	movs	r3, #45	; 0x2d
 8004556:	426d      	negs	r5, r5
 8004558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455c:	485e      	ldr	r0, [pc, #376]	; (80046d8 <_printf_i+0x244>)
 800455e:	230a      	movs	r3, #10
 8004560:	e019      	b.n	8004596 <_printf_i+0x102>
 8004562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004566:	6805      	ldr	r5, [r0, #0]
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	bf18      	it	ne
 800456c:	b22d      	sxthne	r5, r5
 800456e:	e7ef      	b.n	8004550 <_printf_i+0xbc>
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	6825      	ldr	r5, [r4, #0]
 8004574:	1d18      	adds	r0, r3, #4
 8004576:	6008      	str	r0, [r1, #0]
 8004578:	0628      	lsls	r0, r5, #24
 800457a:	d501      	bpl.n	8004580 <_printf_i+0xec>
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	e002      	b.n	8004586 <_printf_i+0xf2>
 8004580:	0669      	lsls	r1, r5, #25
 8004582:	d5fb      	bpl.n	800457c <_printf_i+0xe8>
 8004584:	881d      	ldrh	r5, [r3, #0]
 8004586:	4854      	ldr	r0, [pc, #336]	; (80046d8 <_printf_i+0x244>)
 8004588:	2f6f      	cmp	r7, #111	; 0x6f
 800458a:	bf0c      	ite	eq
 800458c:	2308      	moveq	r3, #8
 800458e:	230a      	movne	r3, #10
 8004590:	2100      	movs	r1, #0
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004596:	6866      	ldr	r6, [r4, #4]
 8004598:	60a6      	str	r6, [r4, #8]
 800459a:	2e00      	cmp	r6, #0
 800459c:	bfa2      	ittt	ge
 800459e:	6821      	ldrge	r1, [r4, #0]
 80045a0:	f021 0104 	bicge.w	r1, r1, #4
 80045a4:	6021      	strge	r1, [r4, #0]
 80045a6:	b90d      	cbnz	r5, 80045ac <_printf_i+0x118>
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	d04d      	beq.n	8004648 <_printf_i+0x1b4>
 80045ac:	4616      	mov	r6, r2
 80045ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b2:	fb03 5711 	mls	r7, r3, r1, r5
 80045b6:	5dc7      	ldrb	r7, [r0, r7]
 80045b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045bc:	462f      	mov	r7, r5
 80045be:	42bb      	cmp	r3, r7
 80045c0:	460d      	mov	r5, r1
 80045c2:	d9f4      	bls.n	80045ae <_printf_i+0x11a>
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10b      	bne.n	80045e0 <_printf_i+0x14c>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	07df      	lsls	r7, r3, #31
 80045cc:	d508      	bpl.n	80045e0 <_printf_i+0x14c>
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6861      	ldr	r1, [r4, #4]
 80045d2:	4299      	cmp	r1, r3
 80045d4:	bfde      	ittt	le
 80045d6:	2330      	movle	r3, #48	; 0x30
 80045d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e0:	1b92      	subs	r2, r2, r6
 80045e2:	6122      	str	r2, [r4, #16]
 80045e4:	f8cd a000 	str.w	sl, [sp]
 80045e8:	464b      	mov	r3, r9
 80045ea:	aa03      	add	r2, sp, #12
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f7ff fee2 	bl	80043b8 <_printf_common>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d14c      	bne.n	8004692 <_printf_i+0x1fe>
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	b004      	add	sp, #16
 80045fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004602:	4835      	ldr	r0, [pc, #212]	; (80046d8 <_printf_i+0x244>)
 8004604:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	061f      	lsls	r7, r3, #24
 800460e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004612:	600e      	str	r6, [r1, #0]
 8004614:	d514      	bpl.n	8004640 <_printf_i+0x1ac>
 8004616:	07d9      	lsls	r1, r3, #31
 8004618:	bf44      	itt	mi
 800461a:	f043 0320 	orrmi.w	r3, r3, #32
 800461e:	6023      	strmi	r3, [r4, #0]
 8004620:	b91d      	cbnz	r5, 800462a <_printf_i+0x196>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	f023 0320 	bic.w	r3, r3, #32
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	2310      	movs	r3, #16
 800462c:	e7b0      	b.n	8004590 <_printf_i+0xfc>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	2378      	movs	r3, #120	; 0x78
 8004638:	4828      	ldr	r0, [pc, #160]	; (80046dc <_printf_i+0x248>)
 800463a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800463e:	e7e3      	b.n	8004608 <_printf_i+0x174>
 8004640:	065e      	lsls	r6, r3, #25
 8004642:	bf48      	it	mi
 8004644:	b2ad      	uxthmi	r5, r5
 8004646:	e7e6      	b.n	8004616 <_printf_i+0x182>
 8004648:	4616      	mov	r6, r2
 800464a:	e7bb      	b.n	80045c4 <_printf_i+0x130>
 800464c:	680b      	ldr	r3, [r1, #0]
 800464e:	6826      	ldr	r6, [r4, #0]
 8004650:	6960      	ldr	r0, [r4, #20]
 8004652:	1d1d      	adds	r5, r3, #4
 8004654:	600d      	str	r5, [r1, #0]
 8004656:	0635      	lsls	r5, r6, #24
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	d501      	bpl.n	8004660 <_printf_i+0x1cc>
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0x1d2>
 8004660:	0671      	lsls	r1, r6, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0x1c8>
 8004664:	8018      	strh	r0, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	4616      	mov	r6, r2
 800466c:	e7ba      	b.n	80045e4 <_printf_i+0x150>
 800466e:	680b      	ldr	r3, [r1, #0]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	600a      	str	r2, [r1, #0]
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	2100      	movs	r1, #0
 800467a:	4630      	mov	r0, r6
 800467c:	f7fb ff48 	bl	8000510 <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1f2>
 8004682:	1b80      	subs	r0, r0, r6
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e7a8      	b.n	80045e4 <_printf_i+0x150>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d0ab      	beq.n	80045f8 <_printf_i+0x164>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d413      	bmi.n	80046ce <_printf_i+0x23a>
 80046a6:	68e0      	ldr	r0, [r4, #12]
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	4298      	cmp	r0, r3
 80046ac:	bfb8      	it	lt
 80046ae:	4618      	movlt	r0, r3
 80046b0:	e7a4      	b.n	80045fc <_printf_i+0x168>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d09b      	beq.n	80045f8 <_printf_i+0x164>
 80046c0:	3501      	adds	r5, #1
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	9903      	ldr	r1, [sp, #12]
 80046c6:	1a5b      	subs	r3, r3, r1
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dcf2      	bgt.n	80046b2 <_printf_i+0x21e>
 80046cc:	e7eb      	b.n	80046a6 <_printf_i+0x212>
 80046ce:	2500      	movs	r5, #0
 80046d0:	f104 0619 	add.w	r6, r4, #25
 80046d4:	e7f5      	b.n	80046c2 <_printf_i+0x22e>
 80046d6:	bf00      	nop
 80046d8:	08004b55 	.word	0x08004b55
 80046dc:	08004b66 	.word	0x08004b66

080046e0 <lflush>:
 80046e0:	8983      	ldrh	r3, [r0, #12]
 80046e2:	f003 0309 	and.w	r3, r3, #9
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d101      	bne.n	80046ee <lflush+0xe>
 80046ea:	f7ff ba8d 	b.w	8003c08 <fflush>
 80046ee:	2000      	movs	r0, #0
 80046f0:	4770      	bx	lr
	...

080046f4 <__srefill_r>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	460c      	mov	r4, r1
 80046f8:	4605      	mov	r5, r0
 80046fa:	b118      	cbz	r0, 8004704 <__srefill_r+0x10>
 80046fc:	6983      	ldr	r3, [r0, #24]
 80046fe:	b90b      	cbnz	r3, 8004704 <__srefill_r+0x10>
 8004700:	f7ff faec 	bl	8003cdc <__sinit>
 8004704:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <__srefill_r+0x100>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d10a      	bne.n	8004720 <__srefill_r+0x2c>
 800470a:	686c      	ldr	r4, [r5, #4]
 800470c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004710:	2300      	movs	r3, #0
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	069e      	lsls	r6, r3, #26
 8004718:	d50c      	bpl.n	8004734 <__srefill_r+0x40>
 800471a:	f04f 30ff 	mov.w	r0, #4294967295
 800471e:	e066      	b.n	80047ee <__srefill_r+0xfa>
 8004720:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <__srefill_r+0x104>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <__srefill_r+0x36>
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	e7f0      	b.n	800470c <__srefill_r+0x18>
 800472a:	4b34      	ldr	r3, [pc, #208]	; (80047fc <__srefill_r+0x108>)
 800472c:	429c      	cmp	r4, r3
 800472e:	bf08      	it	eq
 8004730:	68ec      	ldreq	r4, [r5, #12]
 8004732:	e7eb      	b.n	800470c <__srefill_r+0x18>
 8004734:	0758      	lsls	r0, r3, #29
 8004736:	d448      	bmi.n	80047ca <__srefill_r+0xd6>
 8004738:	06d9      	lsls	r1, r3, #27
 800473a:	d405      	bmi.n	8004748 <__srefill_r+0x54>
 800473c:	2309      	movs	r3, #9
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	e7e8      	b.n	800471a <__srefill_r+0x26>
 8004748:	071a      	lsls	r2, r3, #28
 800474a:	d50b      	bpl.n	8004764 <__srefill_r+0x70>
 800474c:	4621      	mov	r1, r4
 800474e:	4628      	mov	r0, r5
 8004750:	f7ff fa1e 	bl	8003b90 <_fflush_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	d1e0      	bne.n	800471a <__srefill_r+0x26>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	60a0      	str	r0, [r4, #8]
 800475c:	f023 0308 	bic.w	r3, r3, #8
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	61a0      	str	r0, [r4, #24]
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f043 0304 	orr.w	r3, r3, #4
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	b91b      	cbnz	r3, 8004778 <__srefill_r+0x84>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f7ff fbd4 	bl	8003f20 <__smakebuf_r>
 8004778:	89a6      	ldrh	r6, [r4, #12]
 800477a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800477e:	07b3      	lsls	r3, r6, #30
 8004780:	d00f      	beq.n	80047a2 <__srefill_r+0xae>
 8004782:	2301      	movs	r3, #1
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <__srefill_r+0x10c>)
 8004788:	491e      	ldr	r1, [pc, #120]	; (8004804 <__srefill_r+0x110>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	f006 0609 	and.w	r6, r6, #9
 8004790:	f7ff fb22 	bl	8003dd8 <_fwalk>
 8004794:	2e09      	cmp	r6, #9
 8004796:	81a7      	strh	r7, [r4, #12]
 8004798:	d103      	bne.n	80047a2 <__srefill_r+0xae>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f7ff f971 	bl	8003a84 <__sflush_r>
 80047a2:	6922      	ldr	r2, [r4, #16]
 80047a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80047a6:	6963      	ldr	r3, [r4, #20]
 80047a8:	6a21      	ldr	r1, [r4, #32]
 80047aa:	6022      	str	r2, [r4, #0]
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b0      	blx	r6
 80047b0:	2800      	cmp	r0, #0
 80047b2:	6060      	str	r0, [r4, #4]
 80047b4:	dc1c      	bgt.n	80047f0 <__srefill_r+0xfc>
 80047b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ba:	bf17      	itett	ne
 80047bc:	2200      	movne	r2, #0
 80047be:	f043 0320 	orreq.w	r3, r3, #32
 80047c2:	6062      	strne	r2, [r4, #4]
 80047c4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80047c8:	e7bc      	b.n	8004744 <__srefill_r+0x50>
 80047ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d0cd      	beq.n	800476c <__srefill_r+0x78>
 80047d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <__srefill_r+0xea>
 80047d8:	4628      	mov	r0, r5
 80047da:	f7ff fbe9 	bl	8003fb0 <_free_r>
 80047de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	2000      	movs	r0, #0
 80047e4:	6360      	str	r0, [r4, #52]	; 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0c0      	beq.n	800476c <__srefill_r+0x78>
 80047ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f0:	2000      	movs	r0, #0
 80047f2:	e7fc      	b.n	80047ee <__srefill_r+0xfa>
 80047f4:	08004b04 	.word	0x08004b04
 80047f8:	08004b24 	.word	0x08004b24
 80047fc:	08004ae4 	.word	0x08004ae4
 8004800:	08004ae0 	.word	0x08004ae0
 8004804:	080046e1 	.word	0x080046e1

08004808 <__srget_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	4605      	mov	r5, r0
 800480e:	b118      	cbz	r0, 8004818 <__srget_r+0x10>
 8004810:	6983      	ldr	r3, [r0, #24]
 8004812:	b90b      	cbnz	r3, 8004818 <__srget_r+0x10>
 8004814:	f7ff fa62 	bl	8003cdc <__sinit>
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <__srget_r+0x4c>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d10d      	bne.n	800483a <__srget_r+0x32>
 800481e:	686c      	ldr	r4, [r5, #4]
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff ff66 	bl	80046f4 <__srefill_r>
 8004828:	b988      	cbnz	r0, 800484e <__srget_r+0x46>
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	3b01      	subs	r3, #1
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	7818      	ldrb	r0, [r3, #0]
 8004838:	bd38      	pop	{r3, r4, r5, pc}
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <__srget_r+0x50>)
 800483c:	429c      	cmp	r4, r3
 800483e:	d101      	bne.n	8004844 <__srget_r+0x3c>
 8004840:	68ac      	ldr	r4, [r5, #8]
 8004842:	e7ed      	b.n	8004820 <__srget_r+0x18>
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <__srget_r+0x54>)
 8004846:	429c      	cmp	r4, r3
 8004848:	bf08      	it	eq
 800484a:	68ec      	ldreq	r4, [r5, #12]
 800484c:	e7e8      	b.n	8004820 <__srget_r+0x18>
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	e7f1      	b.n	8004838 <__srget_r+0x30>
 8004854:	08004b04 	.word	0x08004b04
 8004858:	08004b24 	.word	0x08004b24
 800485c:	08004ae4 	.word	0x08004ae4

08004860 <_sbrk_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	; (800487c <_sbrk_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc fc68 	bl	8001140 <_sbrk>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_sbrk_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_sbrk_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	200002e4 	.word	0x200002e4

08004880 <__sread>:
 8004880:	b510      	push	{r4, lr}
 8004882:	460c      	mov	r4, r1
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	f000 f8a0 	bl	80049cc <_read_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	bfab      	itete	ge
 8004890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004892:	89a3      	ldrhlt	r3, [r4, #12]
 8004894:	181b      	addge	r3, r3, r0
 8004896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800489a:	bfac      	ite	ge
 800489c:	6563      	strge	r3, [r4, #84]	; 0x54
 800489e:	81a3      	strhlt	r3, [r4, #12]
 80048a0:	bd10      	pop	{r4, pc}

080048a2 <__swrite>:
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	461f      	mov	r7, r3
 80048a8:	898b      	ldrh	r3, [r1, #12]
 80048aa:	05db      	lsls	r3, r3, #23
 80048ac:	4605      	mov	r5, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	4616      	mov	r6, r2
 80048b2:	d505      	bpl.n	80048c0 <__swrite+0x1e>
 80048b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b8:	2302      	movs	r3, #2
 80048ba:	2200      	movs	r2, #0
 80048bc:	f000 f868 	bl	8004990 <_lseek_r>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	4632      	mov	r2, r6
 80048ce:	463b      	mov	r3, r7
 80048d0:	4628      	mov	r0, r5
 80048d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	f000 b817 	b.w	8004908 <_write_r>

080048da <__sseek>:
 80048da:	b510      	push	{r4, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 f855 	bl	8004990 <_lseek_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	bf15      	itete	ne
 80048ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80048ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048f6:	81a3      	strheq	r3, [r4, #12]
 80048f8:	bf18      	it	ne
 80048fa:	81a3      	strhne	r3, [r4, #12]
 80048fc:	bd10      	pop	{r4, pc}

080048fe <__sclose>:
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 b813 	b.w	800492c <_close_r>
	...

08004908 <_write_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_write_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fad8 	bl	8000ecc <_write>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_write_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_write_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200002e4 	.word	0x200002e4

0800492c <_close_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d06      	ldr	r5, [pc, #24]	; (8004948 <_close_r+0x1c>)
 8004930:	2300      	movs	r3, #0
 8004932:	4604      	mov	r4, r0
 8004934:	4608      	mov	r0, r1
 8004936:	602b      	str	r3, [r5, #0]
 8004938:	f7fc faf4 	bl	8000f24 <_close>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_close_r+0x1a>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_close_r+0x1a>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200002e4 	.word	0x200002e4

0800494c <_fstat_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	; (800496c <_fstat_r+0x20>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	f7fc fb33 	bl	8000fc4 <_fstat>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d102      	bne.n	8004968 <_fstat_r+0x1c>
 8004962:	682b      	ldr	r3, [r5, #0]
 8004964:	b103      	cbz	r3, 8004968 <_fstat_r+0x1c>
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	200002e4 	.word	0x200002e4

08004970 <_isatty_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	; (800498c <_isatty_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fa90 	bl	8000ea0 <_isatty>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_isatty_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_isatty_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200002e4 	.word	0x200002e4

08004990 <_lseek_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	; (80049b0 <_lseek_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc fad7 	bl	8000f52 <_lseek>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_lseek_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_lseek_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	200002e4 	.word	0x200002e4

080049b4 <__malloc_lock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__malloc_lock+0x8>)
 80049b6:	f7ff ba8c 	b.w	8003ed2 <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	200002dc 	.word	0x200002dc

080049c0 <__malloc_unlock>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__malloc_unlock+0x8>)
 80049c2:	f7ff ba87 	b.w	8003ed4 <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	200002dc 	.word	0x200002dc

080049cc <_read_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d07      	ldr	r5, [pc, #28]	; (80049ec <_read_r+0x20>)
 80049d0:	4604      	mov	r4, r0
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	602a      	str	r2, [r5, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fc faca 	bl	8000f74 <_read>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_read_r+0x1e>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_read_r+0x1e>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	200002e4 	.word	0x200002e4

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
